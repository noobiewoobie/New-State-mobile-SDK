Class: World.Object
	Level* PersistentLevel;//[Offset: 0x70, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x78, Size: 0x8]
	LineBatchComponent* 9c75dda311;//[Offset: 0x80, Size: 0x8]
	LineBatchComponent* a01bd77e65;//[Offset: 0x88, Size: 0x8]
	LineBatchComponent* f641c00760;//[Offset: 0x90, Size: 0x8]
	GameNetworkManager* 1542250a42;//[Offset: 0x98, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0xa0, Size: 0x8]
	Object*[] 91ee867d71;//[Offset: 0xa8, Size: 0x10]
	Object*[] 87a2c306e2;//[Offset: 0xb8, Size: 0x10]
	LevelStreaming*[] 4852361e31;//[Offset: 0xc8, Size: 0x10]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xd8, Size: 0x8]
	0119241da4 0119241da4;//[Offset: 0xe0, Size: 0x28]
	Level* 4e3aa4b50f;//[Offset: 0x108, Size: 0x8]
	Level* 7a9e9fe09b;//[Offset: 0x120, Size: 0x8]
	ParticleEventManager* 4d4c04e93e;//[Offset: 0x128, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x130, Size: 0x8]
	bool b1f9ff42f7;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14e, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x150, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x158, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x160, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x168, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x170, Size: 0x8]
	Level*[] Levels;//[Offset: 0x178, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x188, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x210, Size: 0x8]
	18bae0abd4*[] 513259ec38;//[Offset: 0x218, Size: 0x10]
	Canvas* bce3020310;//[Offset: 0x228, Size: 0x8]
	Canvas* 65c622c980;//[Offset: 0x230, Size: 0x8]
	<ActorComponent*> ed744e40ae;//[Offset: 0x288, Size: 0x50]
	ActorComponent*[] d9a80d2e2a;//[Offset: 0x2d8, Size: 0x10]
	ActorComponent*[] 0645c8677a;//[Offset: 0x2e8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x6b8, Size: 0x8]
	WorldPSCPool e29ff28561;//[Offset: 0x748, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0xffffff90c89e5001
	void HandleTimelineScrubbed();// 0xffffff90c89e5000

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xffffff90c89e5001

--------------------------------
Class: WorldSettings.Info.Actor.Object
	float LandGI_DotMax;//[Offset: 0x2b0, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x2b4, Size: 0x4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b8, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b8, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b8, Size: 0x1]
	bool bEnableWorldCompositionStreaming3D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b9, Size: 0x1]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2c0, Size: 0x20]
	bool afdceb8613;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 0x1]
	bool e359850ef1;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 0x1]
	bool 995a79ef51;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e0, Size: 0x1]
	bool 731caaefe0;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e0, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e0, Size: 0x1]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2e4, Size: 0x4]
	class BookmarkBase* e6e2282ea6;//[Offset: 0x2e8, Size: 0x8]
	float LandGI_WorldXYSize;//[Offset: 0x2f4, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x2f8, Size: 0x8]
	float MinUndilatedFrameTime;//[Offset: 0x300, Size: 0x4]
	<FName,LinearColor> FarLandscapeMaterialColors;//[Offset: 0x308, Size: 0x50]
	float KillZ;//[Offset: 0x35c, Size: 0x4]
	float LandGI_Intensity;//[Offset: 0x364, Size: 0x4]
	float LandGI_U_Offset;//[Offset: 0x36c, Size: 0x4]
	bool bUseGrassRemoverManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	float XtmBuilding_IndoorLightIntensity;//[Offset: 0x374, Size: 0x4]
	class GameNetworkManager* b0cd50c75a;//[Offset: 0x378, Size: 0x8]
	float MonoCullingDistance;//[Offset: 0x390, Size: 0x4]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x398, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x3a0, Size: 0x8]
	float MinGlobalTimeDilation;//[Offset: 0x3a8, Size: 0x4]
	PlayerState* 16ac577d07;//[Offset: 0x3b0, Size: 0x8]
	float 4427ac95cf;//[Offset: 0x3b8, Size: 0x4]
	float TimeDilation;//[Offset: 0x3bc, Size: 0x4]
	BookmarkBase*[] 55938eeebd;//[Offset: 0x3c0, Size: 0x10]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x3d0, Size: 0x8]
	Vector DefaultColorScale;//[Offset: 0x3d8, Size: 0xc]
	int MaxNumberOfBookmarks;//[Offset: 0x3e4, Size: 0x4]
	float WorldCompositionStreamingZOffset;//[Offset: 0x408, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x460, Size: 0x8]
	Texture2D* LandGI_Texture;//[Offset: 0x468, Size: 0x8]
	9359741f93[] GrassMaterialColors;//[Offset: 0x470, Size: 0x10]
	float LandGI_V_Offset;//[Offset: 0x480, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x484, Size: 0x28]
	AssetUserData*[] AssetUserData;//[Offset: 0x4b0, Size: 0x10]
	float GlobalGravityZ;//[Offset: 0x4c0, Size: 0x4]
	float WorldToMeters;//[Offset: 0x4c8, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x4d0, Size: 0x8]
	0f9b668026[] d84d0ad724;//[Offset: 0x4d8, Size: 0x10]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x4e8, Size: 0x8]
	float XtmBuilding_OutdoorLandGIPow;//[Offset: 0x4f4, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x4f8, Size: 0x4]
	float 05d6488d0e;//[Offset: 0x500, Size: 0x4]
	PlayerState* 208f3f9ae3;//[Offset: 0x508, Size: 0x8]
	<FName,LinearColor> LandMaterialColors;//[Offset: 0x560, Size: 0x50]
	NavigationSystemConfig* 9dffda6f4e;//[Offset: 0x5b0, Size: 0x8]
	9359741f93[] ImposterMaterialColors;//[Offset: 0x5b8, Size: 0x10]
	float 514596d1df;//[Offset: 0x5c8, Size: 0x4]
	float LandGI_DotAngle;//[Offset: 0x5cc, Size: 0x4]
	0c32194791 DefaultAmbientZoneSettings;//[Offset: 0x5d0, Size: 0x24]
	void OnRep_WorldGravityZ();// 0xffffff90c89e5000

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x64, Size: 0x1]
	bool d9a1b37a78;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 0x1]
	bool d4a0848783;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65, Size: 0x1]
	bool 4534834cb8;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x65, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x65, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x65, Size: 0x1]
	bool b26e779da4;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x65, Size: 0x1]
	bool d39721de60;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x66, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x66, Size: 0x1]
	bool 711d84b35c;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x66, Size: 0x1]
	bool 8a2e3a0037;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x66, Size: 0x1]
	bool 97737b1e47;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x66, Size: 0x1]
	bool 8f06e05539;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x66, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x66, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x66, Size: 0x1]
	bool 1ae5f04773;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67, Size: 0x1]
	bool 360d3bfef6;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x67, Size: 0x1]
	bool dd0f16388f;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x67, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x67, Size: 0x1]
	bool c7a35074ee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x67, Size: 0x1]
	bool e285187c88;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool b8656f7da9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool 90de11ba18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool d75fdd115b;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x69, Size: 0x1]
	bool 949443e825;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x69, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x6a, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x6b, Size: 0x1]
	float NetUpdateFrequency;//[Offset: 0x6c, Size: 0x4]
	byte RemoteRole;//[Offset: 0x70, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x71, Size: 0x1]
	delegate OnTakeAnyDamage;//[Offset: 0x72, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x73, Size: 0x1]
	ChildActorComponent* dfeb5a3974;//[Offset: 0x74, Size: 0x20]
	float CustomTimeDilation;//[Offset: 0x94, Size: 0x4]
	delegate OnTakePointDamage;//[Offset: 0xb0, Size: 0x1]
	float InitialLifeSpan;//[Offset: 0xb4, Size: 0x4]
	FName[] Layers;//[Offset: 0xb8, Size: 0x10]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0xc8, Size: 0x1]
	byte NetDormancy;//[Offset: 0xc9, Size: 0x1]
	FName NetDriverName;//[Offset: 0xcc, Size: 0x8]
	byte Role;//[Offset: 0xd4, Size: 0x1]
	float MinNetUpdateFrequency;//[Offset: 0xe0, Size: 0x4]
	delegate OnInputTouchEnter;//[Offset: 0xe4, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0xe5, Size: 0x1]
	9e70421366 74e2d3a471;//[Offset: 0xe8, Size: 0x30]
	delegate OnInputTouchLeave;//[Offset: 0x11c, Size: 0x1]
	SceneComponent* RootComponent;//[Offset: 0x120, Size: 0x8]
	int b02ee8945a;//[Offset: 0x128, Size: 0x4]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x12c, Size: 0x1]
	delegate OnClicked;//[Offset: 0x180, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x181, Size: 0x1]
	MatineeActor*[] 6af0070b2d;//[Offset: 0x188, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x198, Size: 0x10]
	Actor*[] Children;//[Offset: 0x1b0, Size: 0x10]
	delegate OnActorBeginOverlap;//[Offset: 0x1c0, Size: 0x1]
	Actor* Owner;//[Offset: 0x1d8, Size: 0x8]
	FName[] Tags;//[Offset: 0x1e8, Size: 0x10]
	float NetPriority;//[Offset: 0x1f8, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x200, Size: 0x8]
	delegate OnInputTouchEnd;//[Offset: 0x208, Size: 0x1]
	delegate OnReleased;//[Offset: 0x209, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x20c, Size: 0x34]
	delegate OnEndCursorOver;//[Offset: 0x240, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x248, Size: 0x10]
	Pawn* Instigator;//[Offset: 0x258, Size: 0x8]
	de7d081164 0b7e6ce3d4;//[Offset: 0x260, Size: 0x40]
	delegate OnEndPlay;//[Offset: 0x2a0, Size: 0x1]
	float NetCullDistanceSquared;//[Offset: 0x2a4, Size: 0x4]
	bool WasRecentlyRendered(float Tolerance);// 0xffffff90c89e5002
	void UserConstructionScript();// 0xffffff90c89e5000
	void TearOff();// 0xffffff90c89e5000
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0xffffff90c89e5002
	void SetTickGroup(byte NewTickGroup);// 0xffffff90c89e5001
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xffffff90c89e5001
	void SetReplicates(bool bInReplicates);// 0xffffff90c89e5001
	void SetReplicateMovement(bool bInReplicateMovement);// 0xffffff90c89e5001
	void SetOwner(Actor* NewOwner);// 0xffffff90c89e5001
	void SetNetDormancy(byte NewDormancy);// 0xffffff90c89e5001
	void SetLifeSpan(float InLifespan);// 0xffffff90c89e5001
	void SetAutoDestroyWhenFinished(bool bVal);// 0xffffff90c89e5001
	void SetActorTickInterval(float TickInterval);// 0xffffff90c89e5001
	void SetActorTickEnabled(bool bEnabled);// 0xffffff90c89e5001
	void SetActorScale3D(Vector NewScale3D);// 0xffffff90c89e5001
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0xffffff90c89e5001
	void SetActorHiddenInGame(bool bNewHidden);// 0xffffff90c89e5001
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0xffffff90c89e5001
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff90c89e5001
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff90c89e5001
	void ReceiveTick(float DeltaSeconds);// 0xffffff90c89e5001
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff90c89e5006
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xffffff90c89e500a
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5008
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff90c89e5001
	void ReceiveDestroyed();// 0xffffff90c89e5000
	void ReceiveBeginPlay();// 0xffffff90c89e5000
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff90c89e5004
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xffffff90c89e5001
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xffffff90c89e5001
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xffffff90c89e5001
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xffffff90c89e5001
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xffffff90c89e5001
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xffffff90c89e5001
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xffffff90c89e5001
	void ReceiveActorEndCursorOver();// 0xffffff90c89e5000
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xffffff90c89e5001
	void ReceiveActorBeginCursorOver();// 0xffffff90c89e5000
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0xffffff90c89e5003
	void OnRep_ReplicateMovement();// 0xffffff90c89e5000
	void OnRep_ReplicatedMovement();// 0xffffff90c89e5000
	void OnRep_Owner();// 0xffffff90c89e5000
	void OnRep_Instigator();// 0xffffff90c89e5000
	void OnRep_AttachmentReplication();// 0xffffff90c89e5000
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0xffffff90c89e5005
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0xffffff90c89e5002
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0xffffff90c89e5003
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5005
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0xffffff90c89e5003
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5006
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5005
	void K2_OnReset();// 0xffffff90c89e5000
	void K2_OnEndViewTarget(PlayerController* PC);// 0xffffff90c89e5001
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xffffff90c89e5001
	SceneComponent* K2_GetRootComponent();// 0xffffff90c89e5001
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0xffffff90c89e5002
	Rotator K2_GetActorRotation();// 0xffffff90c89e5001
	Vector K2_GetActorLocation();// 0xffffff90c89e5001
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0xffffff90c89e5003
	void K2_DestroyComponent(ActorComponent* Component);// 0xffffff90c89e5001
	void K2_DestroyActor();// 0xffffff90c89e5000
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xffffff90c89e5006
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xffffff90c89e5006
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xffffff90c89e5004
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xffffff90c89e5004
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	bool IsOverlappingActor(const Actor* Other);// 0xffffff90c89e5002
	bool IsChildActor();// 0xffffff90c89e5001
	bool IsActorTickEnabled();// 0xffffff90c89e5001
	bool IsActorBeingDestroyed();// 0xffffff90c89e5001
	bool HasAuthority();// 0xffffff90c89e5001
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0xffffff90c89e5002
	Vector GetVelocity();// 0xffffff90c89e5001
	Transform GetTransform();// 0xffffff90c89e5001
	bool GetTickableWhenPaused();// 0xffffff90c89e5001
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0xffffff90c89e5002
	byte GetRemoteRole();// 0xffffff90c89e5001
	ChildActorComponent* GetParentComponent();// 0xffffff90c89e5001
	Actor* GetParentActor();// 0xffffff90c89e5001
	Actor* GetOwner();// 0xffffff90c89e5001
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0xffffff90c89e5001
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xffffff90c89e5002
	byte GetLocalRole();// 0xffffff90c89e5001
	float GetLifeSpan();// 0xffffff90c89e5001
	Controller* GetInstigatorController();// 0xffffff90c89e5001
	Pawn* GetInstigator();// 0xffffff90c89e5001
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0xffffff90c89e5002
	float GetInputAxisValue(const FName InputAxisName);// 0xffffff90c89e5002
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0xffffff90c89e5002
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0xffffff90c89e5002
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0xffffff90c89e5002
	float GetGameTimeSinceCreation();// 0xffffff90c89e5001
	float GetDotProductTo(const Actor* OtherActor);// 0xffffff90c89e5002
	float GetDistanceTo(const Actor* OtherActor);// 0xffffff90c89e5002
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0xffffff90c89e5003
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0xffffff90c89e5002
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0xffffff90c89e5002
	FName GetAttachParentSocketName();// 0xffffff90c89e5001
	Actor* GetAttachParentActor();// 0xffffff90c89e5001
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0xffffff90c89e5002
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0xffffff90c89e5002
	Vector GetActorUpVector();// 0xffffff90c89e5001
	float GetActorTimeDilation();// 0xffffff90c89e5001
	float GetActorTickInterval();// 0xffffff90c89e5001
	Vector GetActorScale3D();// 0xffffff90c89e5001
	Vector GetActorRightVector();// 0xffffff90c89e5001
	Vector GetActorRelativeScale3D();// 0xffffff90c89e5001
	Vector GetActorForwardVector();// 0xffffff90c89e5001
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0xffffff90c89e5002
	bool GetActorEnableCollision();// 0xffffff90c89e5001
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0xffffff90c89e5004
	void ForceNetUpdate();// 0xffffff90c89e5000
	void FlushNetDormancy();// 0xffffff90c89e5000
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0xffffff90c89e5003
	void EnableInput(PlayerController* PlayerController);// 0xffffff90c89e5001
	void DisableInput(PlayerController* PlayerController);// 0xffffff90c89e5001
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0xffffff90c89e5001
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff90c89e5001
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff90c89e5001
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0xffffff90c89e5005
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0xffffff90c89e5006
	bool ActorHasTag(FName Tag);// 0xffffff90c89e5002

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	71068657ac* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: 71068657ac.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ActorComponent.Object
	delegate OnComponentDeactivated;//[Offset: 0x70, Size: 0x1]
	enum CreationMethod;//[Offset: 0x94, Size: 0x1]
	FName[] ComponentTags;//[Offset: 0x98, Size: 0x10]
	b86fc1e07e 4f0f534b4c;//[Offset: 0xa8, Size: 0x30]
	delegate OnComponentActivated;//[Offset: 0xd8, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd9, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd9, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xda, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdb, Size: 0x1]
	bool 9b66bfddd6;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdb, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdb, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xdb, Size: 0x1]
	SimpleMemberReference[] 5f8ef15dec;//[Offset: 0xe0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x100, Size: 0x10]
	void ToggleActive();// 0xffffff90c89e5000
	void SetTickGroup(byte NewTickGroup);// 0xffffff90c89e5001
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xffffff90c89e5001
	void SetIsReplicated(bool ShouldReplicate);// 0xffffff90c89e5001
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0xffffff90c89e5001
	void SetComponentTickInterval(float TickInterval);// 0xffffff90c89e5001
	void SetComponentTickEnabled(bool bEnabled);// 0xffffff90c89e5001
	void SetAutoActivate(bool bNewAutoActivate);// 0xffffff90c89e5001
	void SetActive(bool bNewActive, bool bReset);// 0xffffff90c89e5002
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff90c89e5001
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff90c89e5001
	void ReceiveTick(float DeltaSeconds);// 0xffffff90c89e5001
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff90c89e5001
	void ReceiveBeginPlay();// 0xffffff90c89e5000
	void OnRep_IsActive();// 0xffffff90c89e5000
	void K2_DestroyComponent(Object* Object);// 0xffffff90c89e5001
	bool IsComponentTickEnabled();// 0xffffff90c89e5001
	bool IsBeingDestroyed();// 0xffffff90c89e5001
	bool IsActive();// 0xffffff90c89e5001
	Actor* GetOwner();// 0xffffff90c89e5001
	float GetComponentTickInterval();// 0xffffff90c89e5001
	void Deactivate();// 0xffffff90c89e5000
	bool ComponentHasTag(FName Tag);// 0xffffff90c89e5002
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff90c89e5001
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff90c89e5001
	void Activate(bool bReset);// 0xffffff90c89e5001

--------------------------------
Class: b86fc1e07e.7a1a2c8098

--------------------------------
Class: 7a1a2c8098
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte c35e92ddf0;//[Offset: 0x9, Size: 0x1]
	bool d617994a4f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool 0382fbbbde;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool f88a0b641b;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1]
	float DamageImpulse;//[Offset: 0x68, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x6c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x70, Size: 0x4]
	float DamageFalloff;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	byte ElementIndex;//[Offset: 0x60, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 0x20]
	Actor* Actor;//[Offset: 0x84, Size: 0x20]
	PrimitiveComponent* Component;//[Offset: 0xa4, Size: 0x20]
	FName BoneName;//[Offset: 0xc4, Size: 0x8]
	FName 4d09fb6ede;//[Offset: 0xcc, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	byte RestitutionCombineMode;//[Offset: 0x64, Size: 0x1]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x68, Size: 0x8]
	float StaticFriction;//[Offset: 0x70, Size: 0x4]
	byte SurfaceType;//[Offset: 0x74, Size: 0x1]
	float Restitution;//[Offset: 0x78, Size: 0x4]
	float SleepLinearVelocityThreshold;//[Offset: 0x7c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x90, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x94, Size: 0x1]
	float Density;//[Offset: 0x98, Size: 0x4]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float SleepAngularVelocityThreshold;//[Offset: 0xac, Size: 0x4]
	int SleepCounterThreshold;//[Offset: 0xb0, Size: 0x4]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float Friction;//[Offset: 0xb8, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInputTouchEnter;//[Offset: 0x298, Size: 0x1]
	Actor*[] 37dc6708e4;//[Offset: 0x2a0, Size: 0x10]
	CustomPrimitiveData 5d92697b72;//[Offset: 0x2c0, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2d8, Size: 0x10]
	LightingChannels LightingChannels;//[Offset: 0x2e8, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e9, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e9, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e9, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e9, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ea, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ea, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ea, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ea, Size: 0x1]
	bool 68dfff080a;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ea, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ea, Size: 0x1]
	bool 7930cbc06f;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ea, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ea, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2eb, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2eb, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2eb, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2eb, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2eb, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2eb, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2eb, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2eb, Size: 0x1]
	bool bRenderDepthOnlyPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 0x1]
	bool 7d4c499f09;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ec, Size: 0x1]
	bool 718b1c22f3;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ec, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ec, Size: 0x1]
	bool bHideShadowByScalability;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ec, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ec, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ed, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ed, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ed, Size: 0x1]
	bool bAffectDirectionalLightingOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ed, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ed, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ed, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ed, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ed, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ee, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ee, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ee, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ee, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ee, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ee, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ee, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ee, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ef, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ef, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ef, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ef, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ef, Size: 0x1]
	bool fc3a2ce0ee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ef, Size: 0x1]
	bool 744a2e4148;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ef, Size: 0x1]
	bool 95bfc6d6fc;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ef, Size: 0x1]
	bool c04909abf7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool 91d29c6d1e;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x2f1, Size: 0x1]
	bool 09f1b9be4b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	bool bBasePassDrawLast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x301, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x303, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x306, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x307, Size: 0x1]
	float LDMaxDrawDistance;//[Offset: 0x308, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x328, Size: 0x10]
	enum CustomDepthStencilWriteMask;//[Offset: 0x338, Size: 0x1]
	int TranslucencySortPriority;//[Offset: 0x33c, Size: 0x4]
	delegate OnInputTouchEnd;//[Offset: 0x340, Size: 0x1]
	enum LightmapType;//[Offset: 0x342, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x343, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x344, Size: 0x1]
	float CachedMaxDrawDistance;//[Offset: 0x348, Size: 0x4]
	float MinDrawDistance;//[Offset: 0x34c, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x350, Size: 0x198]
	float CullingScreenSize;//[Offset: 0x4ec, Size: 0x4]
	byte IndirectLightingCacheQuality;//[Offset: 0x4f8, Size: 0x1]
	PrimitiveComponent* 1532b6db53;//[Offset: 0x510, Size: 0x8]
	delegate OnClicked;//[Offset: 0x518, Size: 0x1]
	delegate OnComponentHit;//[Offset: 0x530, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x531, Size: 0x1]
	delegate OnReleased;//[Offset: 0x532, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x533, Size: 0x1]
	bool bEnableDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x539, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x53c, Size: 0x4]
	PrimitiveComponent*[] d445aa8c0d;//[Offset: 0x548, Size: 0x10]
	int CustomDepthStencilValue;//[Offset: 0x558, Size: 0x4]
	bool WasRecentlyRendered(float Tolerance);// 0xffffff90c89e5002
	void WakeRigidBody(FName BoneName);// 0xffffff90c89e5001
	void WakeAllRigidBodies();// 0xffffff90c89e5000
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xffffff90c89e5001
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xffffff90c89e5002
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0xffffff90c89e5001
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0xffffff90c89e5001
	void SetSimulatePhysics(bool bSimulate);// 0xffffff90c89e5001
	void SetRenderInMainPass(bool bValue);// 0xffffff90c89e5001
	void SetRenderCustomDepth(bool bValue);// 0xffffff90c89e5001
	void SetReceivesDecals(bool bNewReceivesDecals);// 0xffffff90c89e5001
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xffffff90c89e5001
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff90c89e5003
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff90c89e5003
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff90c89e5003
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xffffff90c89e5003
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff90c89e5003
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff90c89e5003
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff90c89e5003
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0xffffff90c89e5001
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0xffffff90c89e5001
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xffffff90c89e5001
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xffffff90c89e5002
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xffffff90c89e5002
	void SetMassScale(FName BoneName, float InMassScale);// 0xffffff90c89e5002
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xffffff90c89e5003
	void SetLinearDamping(float InDamping);// 0xffffff90c89e5001
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xffffff90c89e5003
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0xffffff90c89e5001
	void SetLandscapeGIHeight(float fValue);// 0xffffff90c89e5001
	void SetIndoorLight(bool bValue);// 0xffffff90c89e5001
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xffffff90c89e5001
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0xffffff90c89e5001
	void SetEnableGravity(bool bGravityEnabled);// 0xffffff90c89e5001
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xffffff90c89e5002
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xffffff90c89e5002
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xffffff90c89e5002
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xffffff90c89e5002
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xffffff90c89e5002
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xffffff90c89e5002
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xffffff90c89e5002
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xffffff90c89e5002
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0xffffff90c89e5001
	void SetCustomDepthStencilValue(int Value);// 0xffffff90c89e5001
	void SetCullDistance(float NewCullDistance);// 0xffffff90c89e5001
	void SetConstraintMode(byte ConstraintMode);// 0xffffff90c89e5001
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xffffff90c89e5002
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xffffff90c89e5001
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0xffffff90c89e5002
	void SetCollisionObjectType(byte Channel);// 0xffffff90c89e5001
	void SetCollisionEnabled(byte NewType);// 0xffffff90c89e5001
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0xffffff90c89e5002
	void SetCastShadow(bool NewCastShadow);// 0xffffff90c89e5001
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0xffffff90c89e5001
	void SetBoundsScale(float NewBoundsScale);// 0xffffff90c89e5001
	void SetAngularDamping(float InDamping);// 0xffffff90c89e5001
	void SetAllUseCCD(bool InUseCCD);// 0xffffff90c89e5001
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xffffff90c89e5002
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xffffff90c89e5002
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xffffff90c89e5002
	void SetAllMassScale(float InMassScale);// 0xffffff90c89e5001
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xffffff90c89e5003
	void PutRigidBodyToSleep(FName BoneName);// 0xffffff90c89e5001
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff90c89e500b
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff90c89e500a
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff90c89e500a
	bool K2_IsQueryCollisionEnabled();// 0xffffff90c89e5001
	bool K2_IsPhysicsCollisionEnabled();// 0xffffff90c89e5001
	bool K2_IsCollisionEnabled();// 0xffffff90c89e5001
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff90c89e500a
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0xffffff90c89e5002
	bool IsOverlappingActor(const Actor* Other);// 0xffffff90c89e5002
	bool IsGravityEnabled();// 0xffffff90c89e5001
	bool IsAnyRigidBodyAwake();// 0xffffff90c89e5001
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0xffffff90c89e5002
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0xffffff90c89e5002
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0xffffff90c89e5001
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0xffffff90c89e5003
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0xffffff90c89e5002
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0xffffff90c89e5002
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0xffffff90c89e5002
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0xffffff90c89e5002
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0xffffff90c89e5001
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xffffff90c89e5002
	int GetNumMaterials();// 0xffffff90c89e5001
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xffffff90c89e5003
	MaterialInterface* GetMaterial(int ElementIndex);// 0xffffff90c89e5002
	float GetMassScale(FName BoneName);// 0xffffff90c89e5002
	float GetMass();// 0xffffff90c89e5001
	float GetLinearDamping();// 0xffffff90c89e5001
	Vector GetInertiaTensor(FName BoneName);// 0xffffff90c89e5002
	bool GetGenerateOverlapEvents();// 0xffffff90c89e5001
	byte GetCollisionResponseToChannel(byte Channel);// 0xffffff90c89e5002
	FName GetCollisionProfileName();// 0xffffff90c89e5001
	byte GetCollisionObjectType();// 0xffffff90c89e5001
	byte GetCollisionEnabled();// 0xffffff90c89e5001
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0xffffff90c89e5004
	Vector GetCenterOfMass(FName BoneName);// 0xffffff90c89e5002
	float GetAngularDamping();// 0xffffff90c89e5001
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xffffff90c89e5004
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0xffffff90c89e5003
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xffffff90c89e5002
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0xffffff90c89e5001
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0xffffff90c89e5001
	void ClearMoveIgnoreComponents();// 0xffffff90c89e5000
	void ClearMoveIgnoreActors();// 0xffffff90c89e5000
	bool CanCharacterStepUp(Pawn* Pawn);// 0xffffff90c89e5002
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xffffff90c89e5003
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xffffff90c89e5003
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0xffffff90c89e5003
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xffffff90c89e5005
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xffffff90c89e5005
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xffffff90c89e5003
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff90c89e5003
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xffffff90c89e5003
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xffffff90c89e5003
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xffffff90c89e5003
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff90c89e5003
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff90c89e5003
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff90c89e5003

--------------------------------
Class: SceneComponent.ActorComponent.Object
	enum UpdateTransformMode;//[Offset: 0x11c, Size: 0x1]
	Vector RelativeScale3D;//[Offset: 0x120, Size: 0xc]
	byte DetailMode;//[Offset: 0x148, Size: 0x1]
	byte Mobility;//[Offset: 0x190, Size: 0x1]
	Rotator RelativeRotation;//[Offset: 0x194, Size: 0xc]
	SceneComponent*[] AttachChildren;//[Offset: 0x1a0, Size: 0x10]
	SceneComponent* AttachParent;//[Offset: 0x1f0, Size: 0x8]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool 835aeef87e;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool 0e6b8e09ea;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool ab188c9b93;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool 9f606f81b1;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x1fc, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x204, Size: 0xc]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x210, Size: 0x1]
	PhysicsVolume* PhysicsVolume;//[Offset: 0x214, Size: 0x20]
	SceneComponent*[] 39a0dd702a;//[Offset: 0x280, Size: 0x10]
	void ToggleVisibility(bool bPropagateToChildren);// 0xffffff90c89e5001
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0xffffff90c89e5003
	void SetWorldScale3D(Vector NewScale);// 0xffffff90c89e5001
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xffffff90c89e5002
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xffffff90c89e5001
	void SetRelativeScale3D(Vector NewScale3D);// 0xffffff90c89e5001
	void SetMobility(byte NewMobility);// 0xffffff90c89e5001
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xffffff90c89e5002
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xffffff90c89e5003
	void ResetRelativeTransform();// 0xffffff90c89e5000
	void OnRep_Visibility(bool OldValue);// 0xffffff90c89e5001
	void OnRep_Transform();// 0xffffff90c89e5000
	void OnRep_AttachSocketName();// 0xffffff90c89e5000
	void OnRep_AttachParent();// 0xffffff90c89e5000
	void OnRep_AttachChildren();// 0xffffff90c89e5000
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5005
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5005
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	Transform K2_GetComponentToWorld();// 0xffffff90c89e5001
	Vector K2_GetComponentScale();// 0xffffff90c89e5001
	Rotator K2_GetComponentRotation();// 0xffffff90c89e5001
	Vector K2_GetComponentLocation();// 0xffffff90c89e5001
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xffffff90c89e5004
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xffffff90c89e5007
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xffffff90c89e5005
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff90c89e5004
	bool IsVisible();// 0xffffff90c89e5001
	bool IsSimulatingPhysics(FName BoneName);// 0xffffff90c89e5002
	bool IsAnySimulatingPhysics();// 0xffffff90c89e5001
	Vector GetUpVector();// 0xffffff90c89e5001
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xffffff90c89e5003
	Rotator GetSocketRotation(FName InSocketName);// 0xffffff90c89e5002
	Quat GetSocketQuaternion(FName InSocketName);// 0xffffff90c89e5002
	Vector GetSocketLocation(FName InSocketName);// 0xffffff90c89e5002
	bool GetShouldUpdatePhysicsVolume();// 0xffffff90c89e5001
	Vector GetRightVector();// 0xffffff90c89e5001
	Transform GetRelativeTransform();// 0xffffff90c89e5001
	PhysicsVolume* GetPhysicsVolume();// 0xffffff90c89e5001
	void GetParentComponents(out SceneComponent*[] Parents);// 0xffffff90c89e5001
	int GetNumChildrenComponents();// 0xffffff90c89e5001
	Vector GetForwardVector();// 0xffffff90c89e5001
	Vector GetComponentVelocity();// 0xffffff90c89e5001
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xffffff90c89e5002
	SceneComponent* GetChildComponent(int ChildIndex);// 0xffffff90c89e5002
	FName GetAttachSocketName();// 0xffffff90c89e5001
	SceneComponent* GetAttachParent();// 0xffffff90c89e5001
	FName[] GetAllSocketNames();// 0xffffff90c89e5001
	bool DoesSocketExist(FName InSocketName);// 0xffffff90c89e5002
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xffffff90c89e5002

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float FluidFriction;//[Offset: 0x2e0, Size: 0x4]
	bool d64d0ba82f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	int Priority;//[Offset: 0x2e8, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 0x1]
	float TerminalVelocity;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	BrushComponent* BrushComponent;//[Offset: 0x2b0, Size: 0x8]
	bool fe67ac4c0e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool 1d42dce6e5;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool 9afaa6a1e1;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool 0a82bc1148;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	Model* Brush;//[Offset: 0x2c0, Size: 0x8]
	bool 798ef77253;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	3773685f36[] aeda8243bb;//[Offset: 0x2d0, Size: 0x10]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* BrushBodySetup;//[Offset: 0x560, Size: 0x8]
	Model* Brush;//[Offset: 0x568, Size: 0x8]

--------------------------------
Class: BodySetup.a9b258c83a.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool 5aa2bdcff3;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool dc6dc42fec;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool befdca20e3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x90, Size: 0x1]
	bool 59c5a18b78;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x90, Size: 0x1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0xb8, Size: 0x198]
	a82062ca27 AggGeom;//[Offset: 0x260, Size: 0x58]

--------------------------------
Class: a9b258c83a.Object
	FName BoneName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: BodyInstance.45dfbfc440
	byte ObjectType;//[Offset: 0x32, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x34, Size: 0x1]
	enum SleepFamily;//[Offset: 0x69, Size: 0x1]
	byte DOFMode;//[Offset: 0x6a, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b, Size: 0x1]
	bool 51ea91b2b1;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6b, Size: 0x1]
	bool bddbfb9676;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6b, Size: 0x1]
	bool 10331d8392;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6b, Size: 0x1]
	bool fc663a0d16;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6b, Size: 0x1]
	bool 43f2c36e91;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool e8a3c70039;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool 797349d801;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	bool 94acaa34fd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 0x1]
	bool 3a2f221db8;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6d, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x7c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x84, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x85, Size: 0x1]
	bb784cb1f5 CollisionResponses;//[Offset: 0x88, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0xb8, Size: 0x4]
	float MassInKgOverride;//[Offset: 0xbc, Size: 0x4]
	float LinearDamping;//[Offset: 0xe0, Size: 0x4]
	float AngularDamping;//[Offset: 0xe4, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0xe8, Size: 0xc]
	Vector COMNudge;//[Offset: 0xf4, Size: 0xc]
	float MassScale;//[Offset: 0x100, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x104, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x120, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x130, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0x138, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0x13c, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0x140, Size: 0x4]
	float 221ec48587;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: 45dfbfc440
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool d6acc37f17;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: bb784cb1f5
	CollisionResponseContainer 659d3a344a;//[Offset: 0x0, Size: 0x20]
	0cb7384959[] e42d3bc25d;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: 0cb7384959
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: a82062ca27
	50227fb409[] dd13dae6a9;//[Offset: 0x0, Size: 0x10]
	9c02f35ec0[] cf351ff955;//[Offset: 0x10, Size: 0x10]
	c7c235f5a2[] 7c2626502b;//[Offset: 0x20, Size: 0x10]
	1358bed7d7[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	b58d2ae219[] d02aa54f6e;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: 50227fb409.af70bc510e
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: af70bc510e
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool 141dc63f7a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: 9c02f35ec0.af70bc510e
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: c7c235f5a2.af70bc510e
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: 1358bed7d7.af70bc510e
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] be5f935ad9;//[Offset: 0x40, Size: 0x10]
	Box c5be7c0e88;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: b58d2ae219.af70bc510e
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float baf004b0d2;//[Offset: 0x48, Size: 0x4]
	float 10254aed84;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Model.Object

--------------------------------
Class: 3773685f36
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int 968489299d;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MaterialInterface.Object
	AssetUserData*[] AssetUserData;//[Offset: 0x80, Size: 0x10]
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x90, Size: 0x8]
	a5cab3774e LightmassSettings;//[Offset: 0x98, Size: 0x10]
	139deb8b16[] e1ac48fe96;//[Offset: 0xa8, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0xffffff90c89e5005
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0xffffff90c89e5001
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0xffffff90c89e5002
	PhysicalMaterial* GetPhysicalMaterial();// 0xffffff90c89e5001
	d09d4bd395 GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0xffffff90c89e5004
	Material* GetBaseMaterial();// 0xffffff90c89e5001

--------------------------------
Class: PhysicalMaterialMask.Object
	byte AddressX;//[Offset: 0x64, Size: 0x1]
	byte AddressY;//[Offset: 0x65, Size: 0x1]
	int UVChannelIndex;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialFunctionInterface.Object
	enum MaterialFunctionUsage;//[Offset: 0x74, Size: 0x1]

--------------------------------
Class: d09d4bd395
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	byte BlendableLocation;//[Offset: 0xc8, Size: 0x1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xd0, Size: 0x8]
	cd07e6a4b0 Normal;//[Offset: 0x110, Size: 0xc]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x128, Size: 0x8]
	73b6b1cce6 ShadingModels;//[Offset: 0x130, Size: 0x2]
	5aa166f15f Specular;//[Offset: 0x134, Size: 0xc]
	84fe91b176 6c91a9965b;//[Offset: 0x148, Size: 0x228]
	byte MaterialDecalResponse;//[Offset: 0x382, Size: 0x1]
	uint32 1aeddeddd5;//[Offset: 0x384, Size: 0x4]
	bool 497c29ef49;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	5aa166f15f PixelDepthOffset;//[Offset: 0x38c, Size: 0xc]
	5aa166f15f Anisotropy;//[Offset: 0x3a0, Size: 0xc]
	ef02928344 MaterialAttributes;//[Offset: 0x3b8, Size: 0x18]
	5aa166f15f Metallic;//[Offset: 0x3d8, Size: 0xc]
	cd07e6a4b0 WorldPositionOffset;//[Offset: 0x400, Size: 0xc]
	int BlendablePriority;//[Offset: 0x414, Size: 0x4]
	bool f14b82f898;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
	bool d748d707b5;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 0x1]
	bool 9a1f6be086;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x418, Size: 0x1]
	bool de7d027b9b;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x418, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x418, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x418, Size: 0x1]
	bool 6c37aa9f67;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x418, Size: 0x1]
	bool 8798e76620;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x418, Size: 0x1]
	bool 9f03297442;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41a, Size: 0x1]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x420, Size: 0x8]
	float ShadowDirectionalLightingIntensity;//[Offset: 0x444, Size: 0x4]
	ad86e36882 8d3cc01a48;//[Offset: 0x44c, Size: 0xc]
	bool bbcec72353;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1]
	bool 0d8ed878ec;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 0x1]
	bool f99363ac29;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x464, Size: 0x1]
	bool 73207abf30;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x464, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x464, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x464, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x464, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x464, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x465, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x465, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x465, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x465, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x465, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x465, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x465, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x465, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x466, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x466, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x466, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x466, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x466, Size: 0x1]
	bool 575bf12fef;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x466, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x466, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x466, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x467, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x467, Size: 0x1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x467, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x467, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x467, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x467, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x467, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x467, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 0x1]
	bool bUsePrePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x468, Size: 0x1]
	bool bUseSHLightingPerInstance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x468, Size: 0x1]
	bool bUseLandGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x468, Size: 0x1]
	bool bUseImposter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x468, Size: 0x1]
	bool bDepthClamp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x468, Size: 0x1]
	bool bUseTranslucentReceiveCSM;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x468, Size: 0x1]
	bool bUseOnlyTranslucencyShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x469, Size: 0x1]
	bool bUseShadowDirectionalLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x469, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x470, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x470, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x471, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x472, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x472, Size: 0x1]
	bool bad2fa2e30;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x472, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x472, Size: 0x1]
	byte MaterialDomain;//[Offset: 0x473, Size: 0x1]
	bool 213229b8a3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x474, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x474, Size: 0x1]
	bool 532e3ab73b;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x474, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x474, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x474, Size: 0x1]
	bool 51c78d08d4;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x474, Size: 0x1]
	bool b4e8d47c0c;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x474, Size: 0x1]
	bool 90d864502c;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x474, Size: 0x1]
	bool b9eae5964b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x475, Size: 0x1]
	bool 1f57c168a0;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x475, Size: 0x1]
	bool ef8c7f62ac;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x475, Size: 0x1]
	bool b68d94f32e;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x475, Size: 0x1]
	bool 0ae088e5c5;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x475, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x477, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x477, Size: 0x1]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1]
	1788a7fd41 EmissiveColor;//[Offset: 0x49c, Size: 0xc]
	5aa166f15f Refraction;//[Offset: 0x4b0, Size: 0xc]
	cd07e6a4b0 Tangent;//[Offset: 0x4c4, Size: 0xc]
	byte BlendMode;//[Offset: 0x4e4, Size: 0x1]

--------------------------------
Class: cd07e6a4b0.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: 73b6b1cce6
	uint16 8b103a6f45;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: 5aa166f15f.MaterialInput

--------------------------------
Class: 84fe91b176
	31f1398cc7 Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ad2dd4fcea;//[Offset: 0x1a0, Size: 0x10]
	2feb81eb20[] e96e433a23;//[Offset: 0x1b0, Size: 0x10]
	87d3084bdc[] 3e373c960e;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] 1cdea219db;//[Offset: 0x1e0, Size: 0x10]
	55343964b2*[] b8b2405945;//[Offset: 0x1f0, Size: 0x10]
	FName[] 6f3b38e741;//[Offset: 0x200, Size: 0x10]
	bool[] e11167e6c2;//[Offset: 0x210, Size: 0x10]
	bool 7582de77ba;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool fd55297891;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: 31f1398cc7
	08a1523fb6 dca71adf63;//[Offset: 0x0, Size: 0x40]
	float[] 8045bf2907;//[Offset: 0x140, Size: 0x10]
	LinearColor[] 37f129189c;//[Offset: 0x150, Size: 0x10]
	Texture*[] e7c8e0d6f3;//[Offset: 0x160, Size: 0x10]
	Font*[] 327231c2b4;//[Offset: 0x170, Size: 0x10]
	int[] c227044d49;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] 27dc147a4c;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: 08a1523fb6
	uint64[] 5daf0852dc;//[Offset: 0x0, Size: 0x10]
	d09d4bd395[] 1612412cbf;//[Offset: 0x10, Size: 0x10]
	Guid[] 9858d3e22a;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Texture.638112bfc1.Object
	byte LODGroup;//[Offset: 0xa8, Size: 0x1]
	PerPlatformFloat Downscale;//[Offset: 0xac, Size: 0x4]
	enum MipLoadOptions;//[Offset: 0xb0, Size: 0x1]
	int InGameLODBias;//[Offset: 0xb4, Size: 0x4]
	int DiscardMipLevelG;//[Offset: 0xb8, Size: 0x4]
	byte CompressionSettings;//[Offset: 0xbc, Size: 0x1]
	int DiscardMipLevelR;//[Offset: 0xc0, Size: 0x4]
	byte Filter;//[Offset: 0xc4, Size: 0x1]
	int DiscardMipLevelA;//[Offset: 0xc8, Size: 0x4]
	int LODBias;//[Offset: 0xd8, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0xf0, Size: 0x10]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool 1c0346dbce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool 923b619a7a;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool 35e500ee0e;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
	bool 9a20df0c78;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x100, Size: 0x1]
	enum 02f251ce66;//[Offset: 0x101, Size: 0x1]
	int DiscardMipLevelB;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: 638112bfc1.Object
	double 8d509835aa;//[Offset: 0x68, Size: 0x8]
	int a38c51201a;//[Offset: 0x80, Size: 0x4]
	int NumCinematicMipLevels;//[Offset: 0x84, Size: 0x4]
	int 4edfcbbba9;//[Offset: 0x88, Size: 0x4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	bool 314efbe1a0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1]
	bool 6890832dff;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c, Size: 0x1]
	bool 641aecebe9;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: Font.Object
	5ac7ab7375 ImportOptions;//[Offset: 0x78, Size: 0xa8]
	Texture2D*[] Textures;//[Offset: 0x120, Size: 0x10]
	FName 715a083473;//[Offset: 0x130, Size: 0x8]
	int[] 8a322bda1e;//[Offset: 0x138, Size: 0x10]
	49e642cb30 49e642cb30;//[Offset: 0x148, Size: 0x38]
	d1cf0bcb45[] Characters;//[Offset: 0x190, Size: 0x10]
	enum 209213a777;//[Offset: 0x1a0, Size: 0x1]
	int 99b7c3e4fd;//[Offset: 0x200, Size: 0x4]

--------------------------------
Class: 5ac7ab7375
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool 95d2dd3507;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool 7b5958f700;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool e73f923aa4;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool 1f4ae33f89;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool 44e8831a48;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte 82e0ce4199;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString ba6124b537;//[Offset: 0x38, Size: 0x10]
	FString ac6d3565d9;//[Offset: 0x48, Size: 0x10]
	bool de294988ee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bb51add48b;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool 7507a72ed6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int e0972f8e5e;//[Offset: 0x70, Size: 0x4]
	int 84daba59ed;//[Offset: 0x74, Size: 0x4]
	int 339c6f1538;//[Offset: 0x78, Size: 0x4]
	int 0ad98ea657;//[Offset: 0x7c, Size: 0x4]
	int ffe9203589;//[Offset: 0x80, Size: 0x4]
	int 4f0dbc686d;//[Offset: 0x84, Size: 0x4]
	int 32900a494a;//[Offset: 0x88, Size: 0x4]
	int a09198c8f0;//[Offset: 0x8c, Size: 0x4]
	bool bb3a2670d2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int d5af6c0519;//[Offset: 0x9c, Size: 0x4]
	float ba274e2860;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.638112bfc1.Object
	byte AddressX;//[Offset: 0x144, Size: 0x1]
	bool 3ee5c8b7a3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	int LevelIndex;//[Offset: 0x160, Size: 0x4]
	byte AddressY;//[Offset: 0x170, Size: 0x1]
	int Blueprint_GetSizeY();// 0xffffff90c89e5001
	int Blueprint_GetSizeX();// 0xffffff90c89e5001

--------------------------------
Class: 49e642cb30
	Typeface 6fddd4d5c3;//[Offset: 0x0, Size: 0x10]
	90810c6dd3 bb9112b024;//[Offset: 0x10, Size: 0x18]
	ada2671fcb[] 7b2e0884f4;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	fe3707f514[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: fe3707f514
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString 2f9595e994;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int 39a75b002a;//[Offset: 0x14, Size: 0x4]
	Object* 1ef2007adb;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: 90810c6dd3
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ada2671fcb.90810c6dd3
	Int32Range[] 08fe40693c;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: d1cf0bcb45
	int faba64faf6;//[Offset: 0x0, Size: 0x4]
	int 1e47f7b0d7;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int 375f112494;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	enum MaterialType;//[Offset: 0xd4, Size: 0x1]
	9ecffb1187* StreamingTexture;//[Offset: 0xd8, Size: 0x8]
	byte LODGroup;//[Offset: 0xea, Size: 0x1]
	int GetTileSize();// 0xffffff90c89e5001
	int GetTileCount();// 0xffffff90c89e5001
	int GetTileBorderSize();// 0xffffff90c89e5001
	int GetSize();// 0xffffff90c89e5001
	int GetPageTableSize();// 0xffffff90c89e5001

--------------------------------
Class: 9ecffb1187.Texture2D.Texture.638112bfc1.Object

--------------------------------
Class: 2feb81eb20
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: 87d3084bdc
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	b566dc50ab[] 55911882e1;//[Offset: 0x68, Size: 0x10]
	6f418f4bd8[] 03d9577c42;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: b566dc50ab.65f4dc57ac
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: 65f4dc57ac
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 6f418f4bd8.65f4dc57ac
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: 55343964b2.Object
	bool d49de48ebc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	StaticMesh* 62a49bc3b5;//[Offset: 0x78, Size: 0x8]
	fa119d3149[] 19d947ab96;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: StaticMesh.638112bfc1.Object
	ab742e9a1c*[] Sockets;//[Offset: 0xb8, Size: 0x10]
	NavCollisionBase* NavCollision;//[Offset: 0xd0, Size: 0x8]
	bool bEnableDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int LODForCollision;//[Offset: 0xf4, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x140, Size: 0x10]
	float CullingScreenSize;//[Offset: 0x150, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x158, Size: 0x8]
	bool 11465cb247;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x160, Size: 0x1]
	bool af15b73fb1;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x160, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x160, Size: 0x1]
	bool c73190bd16;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x160, Size: 0x1]
	bool 195822f606;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x160, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x160, Size: 0x1]
	bool 3d47320613;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x161, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x164, Size: 0x4]
	float e4113fd5ea;//[Offset: 0x188, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x18c, Size: 0x4]
	4cbc794a88[] StaticMaterials;//[Offset: 0x190, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x1b0, Size: 0x8]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool bEnableInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 0x1]
	void RemoveSocket(ab742e9a1c* Socket);// 0xffffff90c89e5001
	int GetNumSections(int InLOD);// 0xffffff90c89e5002
	int GetNumLODs();// 0xffffff90c89e5001
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0xffffff90c89e5001
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0xffffff90c89e5002
	int GetMaterialIndex(FName MaterialSlotName);// 0xffffff90c89e5002
	MaterialInterface* GetMaterial(int MaterialIndex, bool bCheckDynamic);// 0xffffff90c89e5003
	BoxSphereBounds GetBounds();// 0xffffff90c89e5001
	Box GetBoundingBox();// 0xffffff90c89e5001
	ab742e9a1c* FindSocket(FName InSocketName);// 0xffffff90c89e5002
	static ef5988d5ca* CreateStaticMeshDescription(Object* Outer);// 0xffffff90c89e5002
	void BuildFromStaticMeshDescriptions(out const ef5988d5ca*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0xffffff90c89e5002
	void AddSocket(ab742e9a1c* Socket);// 0xffffff90c89e5001
	FName AddMaterial(MaterialInterface* Material);// 0xffffff90c89e5002

--------------------------------
Class: ab742e9a1c.Object
	Vector RelativeLocation;//[Offset: 0x64, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x70, Size: 0xc]
	FString Tag;//[Offset: 0x80, Size: 0x10]
	FName SocketName;//[Offset: 0x90, Size: 0x8]
	Vector RelativeScale;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: 4cbc794a88
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	be45415f38 UVChannelData;//[Offset: 0x18, Size: 0x14]
	MaterialInterface* 1b687978a5;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: be45415f38
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float 9dbbc9ccea;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ef5988d5ca.0aad348a84.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0xffffff90c89e5003
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0xffffff90c89e5002
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0xffffff90c89e5003
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0xffffff90c89e5009

--------------------------------
Class: 0aad348a84.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0xffffff90c89e5002
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0xffffff90c89e5003
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0xffffff90c89e5002
	void ReversePolygonFacing(PolygonID PolygonID);// 0xffffff90c89e5001
	void ReserveNewVertices(int NumberOfNewVertices);// 0xffffff90c89e5001
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0xffffff90c89e5001
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0xffffff90c89e5001
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0xffffff90c89e5001
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0xffffff90c89e5001
	void ReserveNewEdges(int NumberOfNewEdges);// 0xffffff90c89e5001
	bool IsVertexValid(VertexID VertexID);// 0xffffff90c89e5002
	bool IsVertexOrphaned(VertexID VertexID);// 0xffffff90c89e5002
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0xffffff90c89e5002
	bool IsTriangleValid(const TriangleID TriangleID);// 0xffffff90c89e5002
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0xffffff90c89e5002
	bool IsPolygonValid(PolygonID PolygonID);// 0xffffff90c89e5002
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0xffffff90c89e5002
	bool IsEmpty();// 0xffffff90c89e5001
	bool IsEdgeValid(EdgeID EdgeID);// 0xffffff90c89e5002
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0xffffff90c89e5003
	bool IsEdgeInternal(EdgeID EdgeID);// 0xffffff90c89e5002
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xffffff90c89e5002
	Vector GetVertexPosition(VertexID VertexID);// 0xffffff90c89e5002
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0xffffff90c89e5003
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0xffffff90c89e5002
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0xffffff90c89e5003
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0xffffff90c89e5003
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0xffffff90c89e5003
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0xffffff90c89e5002
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0xffffff90c89e5002
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0xffffff90c89e5002
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0xffffff90c89e5002
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0xffffff90c89e5002
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0xffffff90c89e5002
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0xffffff90c89e5002
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xffffff90c89e5002
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0xffffff90c89e5003
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0xffffff90c89e5002
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0xffffff90c89e5002
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0xffffff90c89e5002
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0xffffff90c89e5002
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0xffffff90c89e5002
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xffffff90c89e5002
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0xffffff90c89e5002
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0xffffff90c89e5002
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xffffff90c89e5002
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xffffff90c89e5002
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0xffffff90c89e5002
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0xffffff90c89e5002
	int GetNumVertexVertexInstances(VertexID VertexID);// 0xffffff90c89e5002
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0xffffff90c89e5002
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0xffffff90c89e5002
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0xffffff90c89e5002
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0xffffff90c89e5002
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0xffffff90c89e5002
	int GetNumPolygonVertices(PolygonID PolygonID);// 0xffffff90c89e5002
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0xffffff90c89e5002
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0xffffff90c89e5002
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0xffffff90c89e5002
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0xffffff90c89e5002
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0xffffff90c89e5002
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0xffffff90c89e5002
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0xffffff90c89e5003
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0xffffff90c89e5002
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0xffffff90c89e5002
	void Empty();// 0xffffff90c89e5000
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0xffffff90c89e5002
	void DeleteVertex(VertexID VertexID);// 0xffffff90c89e5001
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0xffffff90c89e5004
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0xffffff90c89e5001
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0xffffff90c89e5004
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0xffffff90c89e5002
	void CreateVertexWithID(VertexID VertexID);// 0xffffff90c89e5001
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0xffffff90c89e5002
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0xffffff90c89e5002
	VertexID CreateVertex();// 0xffffff90c89e5001
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xffffff90c89e5004
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xffffff90c89e5004
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xffffff90c89e5004
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0xffffff90c89e5001
	PolygonGroupID CreatePolygonGroup();// 0xffffff90c89e5001
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xffffff90c89e5004
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0xffffff90c89e5003
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0xffffff90c89e5003
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0xffffff90c89e5001

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: fa119d3149
	StaticMesh* 62a49bc3b5;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	PerPlatformFloat 22e97e6b06;//[Offset: 0x18, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float f42ed7ebc9;//[Offset: 0x20, Size: 0x4]
	PerPlatformInt dc97d1c1b8;//[Offset: 0x24, Size: 0x4]
	PerPlatformInt a8fb298311;//[Offset: 0x28, Size: 0x4]
	int MinLOD;//[Offset: 0x2c, Size: 0x4]
	enum Scaling;//[Offset: 0x30, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8]
	bool 1cac462e6c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool 253484b500;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool fdbdb9de6d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool 8e018d15ef;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ef02928344.ExpressionInput
	uint64 PropertyConnectedBitmask;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ad86e36882.MaterialInput

--------------------------------
Class: 1788a7fd41.MaterialInput

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x64, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: a5cab3774e
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool 995878457d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool d3eefef241;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool d51e2b6b88;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool ddc223c677;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool 13209eab1e;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: 139deb8b16
	float 1c70e34848;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const d09d4bd395 ParameterInfo, LinearColor Value);// 0xffffff90c89e5002
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0xffffff90c89e5002
	void SetTextureParameterValueByInfo(out const d09d4bd395 ParameterInfo, Texture* Value);// 0xffffff90c89e5002
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0xffffff90c89e5002
	void SetScalarParameterValueByInfo(out const d09d4bd395 ParameterInfo, float Value);// 0xffffff90c89e5002
	void SetScalarParameterValue(FName ParameterName, float Value);// 0xffffff90c89e5002
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0xffffff90c89e5003
	LinearColor K2_GetVectorParameterValueByInfo(out const d09d4bd395 ParameterInfo);// 0xffffff90c89e5002
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xffffff90c89e5002
	Texture* K2_GetTextureParameterValueByInfo(out const d09d4bd395 ParameterInfo);// 0xffffff90c89e5002
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xffffff90c89e5002
	float K2_GetScalarParameterValueByInfo(out const d09d4bd395 ParameterInfo);// 0xffffff90c89e5002
	float K2_GetScalarParameterValue(FName ParameterName);// 0xffffff90c89e5002
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0xffffff90c89e5002
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0xffffff90c89e5001
	void CopyInterpParameters(MaterialInstance* Source);// 0xffffff90c89e5001

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	eda82c3285[] VectorParameterValues;//[Offset: 0xc8, Size: 0x10]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xd8, Size: 0x8]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x118, Size: 0x8]
	bool 5ee945dec0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]
	a250d4e621[] FontParameterValues;//[Offset: 0x128, Size: 0x10]
	86cfe95fba[] TextureParameterValues;//[Offset: 0x140, Size: 0x10]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x150, Size: 0x8]
	65a79bd4e9 9a4ade1ed8;//[Offset: 0x168, Size: 0x40]
	717510dfb2[] ScalarParameterValues;//[Offset: 0x1c8, Size: 0x10]
	MaterialInterface* Parent;//[Offset: 0x1e0, Size: 0x8]
	31f1398cc7 451e531814;//[Offset: 0x1e8, Size: 0x1a0]
	Object*[] 2bb79545e1;//[Offset: 0x388, Size: 0x10]
	fae9e151d1[] RuntimeVirtualTextureParameterValues;//[Offset: 0x398, Size: 0x10]

--------------------------------
Class: eda82c3285
	d09d4bd395 ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid 8220b2f9fa;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool 497c29ef49;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: a250d4e621
	d09d4bd395 ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid 8220b2f9fa;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: 86cfe95fba
	d09d4bd395 ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid 8220b2f9fa;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: 65a79bd4e9
	b1501bfb8d[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	e7efc50c1f[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	420c56078b[] fbf64c0544;//[Offset: 0x20, Size: 0x10]
	71bcfc0b8a[] 1a9b15856b;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: b1501bfb8d.5455fd1413
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: 5455fd1413
	d09d4bd395 ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid 8220b2f9fa;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: e7efc50c1f.5455fd1413
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: 420c56078b.5455fd1413
	int d77dcf95cc;//[Offset: 0x24, Size: 0x4]
	bool 0719adaa79;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: 71bcfc0b8a.5455fd1413
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: 717510dfb2
	d09d4bd395 ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid 8220b2f9fa;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: fae9e151d1
	d09d4bd395 ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid 8220b2f9fa;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x2b8, Size: 0x8]
	enum 7981558104;//[Offset: 0x2c0, Size: 0x1]
	Vector aaaa15c99f;//[Offset: 0x2c4, Size: 0xc]
	XigPtrProperty PlayerState;//[Offset: 0x2d8, Size: 0x20]
	XigPtrProperty LastHitBy;//[Offset: 0x300, Size: 0x20]
	XigPtrProperty Controller;//[Offset: 0x320, Size: 0x20]
	Vector 3ed1d9eaa3;//[Offset: 0x344, Size: 0xc]
	byte 930e9a40e7;//[Offset: 0x350, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x354, Size: 0x4]
	void SpawnDefaultController();// 0xffffff90c89e5000
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0xffffff90c89e5002
	void ReceiveUnpossessed(Controller* OldController);// 0xffffff90c89e5001
	void ReceivePossessed(Controller* NewController);// 0xffffff90c89e5001
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0xffffff90c89e5004
	void OnRep_PlayerState();// 0xffffff90c89e5000
	void OnRep_Controller();// 0xffffff90c89e5000
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff90c89e5003
	Vector K2_GetMovementInputVector();// 0xffffff90c89e5001
	bool IsPlayerControlled();// 0xffffff90c89e5001
	bool IsPawnControlled();// 0xffffff90c89e5001
	bool IsMoveInputIgnored();// 0xffffff90c89e5001
	bool IsLocallyControlled();// 0xffffff90c89e5001
	bool IsControlled();// 0xffffff90c89e5001
	bool IsBotControlled();// 0xffffff90c89e5001
	Vector GetPendingMovementInputVector();// 0xffffff90c89e5001
	Vector GetNavAgentLocation();// 0xffffff90c89e5001
	PawnMovementComponent* GetMovementComponent();// 0xffffff90c89e5001
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0xffffff90c89e5002
	Vector GetLastMovementInputVector();// 0xffffff90c89e5001
	Rotator GetControlRotation();// 0xffffff90c89e5001
	Controller* GetController();// 0xffffff90c89e5001
	Rotator GetBaseAimRotation();// 0xffffff90c89e5001
	void DetachFromControllerPendingDestroy();// 0xffffff90c89e5000
	Vector ConsumeMovementInputVector();// 0xffffff90c89e5001
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0xffffff90c89e5003
	void AddControllerYawInput(float Val);// 0xffffff90c89e5001
	void AddControllerRollInput(float Val);// 0xffffff90c89e5001
	void AddControllerPitchInput(float Val);// 0xffffff90c89e5001

--------------------------------
Class: Controller.Actor.Object
	XigPtrProperty PlayerState;//[Offset: 0x2b0, Size: 0x20]
	XigPtrProperty Pawn;//[Offset: 0x2f8, Size: 0x20]
	SceneComponent* TransformComponent;//[Offset: 0x358, Size: 0x8]
	bool 77bcc62bfc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1]
	FName StateName;//[Offset: 0x388, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x390, Size: 0x10]
	void UnPossess();// 0xffffff90c89e5000
	void StopMovement();// 0xffffff90c89e5000
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0xffffff90c89e5002
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0xffffff90c89e5001
	void SetIgnoreLookInput(bool bNewLookInput);// 0xffffff90c89e5001
	void SetControlRotation(out const Rotator NewRotation);// 0xffffff90c89e5001
	void ResetIgnoreMoveInput();// 0xffffff90c89e5000
	void ResetIgnoreLookInput();// 0xffffff90c89e5000
	void ResetIgnoreInputFlags();// 0xffffff90c89e5000
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0xffffff90c89e5001
	void ReceivePossess(Pawn* PossessedPawn);// 0xffffff90c89e5001
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xffffff90c89e5004
	void Possess(Pawn* InPawn);// 0xffffff90c89e5001
	void OnRep_PlayerState();// 0xffffff90c89e5000
	void OnRep_Pawn();// 0xffffff90c89e5000
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0xffffff90c89e5004
	Pawn* K2_GetPawn();// 0xffffff90c89e5001
	bool IsPlayerController();// 0xffffff90c89e5001
	bool IsMoveInputIgnored();// 0xffffff90c89e5001
	bool IsLookInputIgnored();// 0xffffff90c89e5001
	bool IsLocalPlayerController();// 0xffffff90c89e5001
	bool IsLocalController();// 0xffffff90c89e5001
	Actor* GetViewTarget();// 0xffffff90c89e5001
	Rotator GetDesiredRotation();// 0xffffff90c89e5001
	Rotator GetControlRotation();// 0xffffff90c89e5001
	void 8de3b7df5f(Rotator NewRotation, bool bResetCamera);// 0xffffff90c89e5002
	void 2ef60fa670(Vector NewLocation, Rotator NewRotation);// 0xffffff90c89e5002
	PlayerController* CastToPlayerController();// 0xffffff90c89e5001

--------------------------------
Class: PlayerController.Controller.Actor.Object
	XigPtrProperty Player;//[Offset: 0x3a0, Size: 0x20]
	XigPtrProperty AcknowledgedPawn;//[Offset: 0x3c0, Size: 0x20]
	Vector SpawnLocation;//[Offset: 0x3f0, Size: 0xc]
	XigPtrProperty PlayerCameraManager;//[Offset: 0x400, Size: 0x20]
	HUD* 2d65dac5f1;//[Offset: 0x428, Size: 0x8]
	float ForceFeedbackScale;//[Offset: 0x430, Size: 0x4]
	PrimitiveComponent*[] 981f95047c;//[Offset: 0x450, Size: 0x10]
	Rotator 1f4966e91a;//[Offset: 0x460, Size: 0xc]
	Rotator b6e509259e;//[Offset: 0x46c, Size: 0xc]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x478, Size: 0x8]
	Key[] ClickEventKeys;//[Offset: 0x488, Size: 0x10]
	NetConnection* 72806259b3;//[Offset: 0x4a0, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x4e0, Size: 0x8]
	byte CurrentMouseCursor;//[Offset: 0x4e8, Size: 0x1]
	PlayerInput* PlayerInput;//[Offset: 0x4f0, Size: 0x8]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x538, Size: 0x1]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x588, Size: 0x8]
	float HitResultTraceDistance;//[Offset: 0x590, Size: 0x4]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x5a0, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b8, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b8, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b8, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b8, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b8, Size: 0x1]
	float InputYawScale;//[Offset: 0x5c0, Size: 0x4]
	byte DefaultClickTraceChannel;//[Offset: 0x5c5, Size: 0x1]
	class CheatManager* CheatClass;//[Offset: 0x5c8, Size: 0x8]
	InputComponent* 4d1d538df1;//[Offset: 0x5d0, Size: 0x8]
	15e99d5b7f[] 76ab39bcca;//[Offset: 0x5e8, Size: 0x10]
	float InputPitchScale;//[Offset: 0x5fc, Size: 0x4]
	float InputRollScale;//[Offset: 0x760, Size: 0x4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x778, Size: 0x1]
	CheatManager* CheatManager;//[Offset: 0x780, Size: 0x8]
	Vector ee96457766;//[Offset: 0x788, Size: 0xc]
	TouchInterface* cc628423ac;//[Offset: 0x7d8, Size: 0x8]
	byte CurrentClickTraceChannel;//[Offset: 0x7f8, Size: 0x1]
	ee291b1e71* 97a5866ece;//[Offset: 0x800, Size: 0x8]
	bool 485c2778b3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	byte DefaultMouseCursor;//[Offset: 0x809, Size: 0x1]
	Actor*[] HiddenActors;//[Offset: 0x830, Size: 0x10]
	bool WasInputKeyJustReleased(Key Key);// 0xffffff90c89e5002
	bool WasInputKeyJustPressed(Key Key);// 0xffffff90c89e5002
	void ToggleSpeaking(bool bInSpeaking);// 0xffffff90c89e5001
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0xffffff90c89e5002
	void SwitchLevel(FString URL);// 0xffffff90c89e5001
	void StopHapticEffect(enum Hand);// 0xffffff90c89e5001
	void StartFire(byte FireModeNum);// 0xffffff90c89e5001
	void SetVirtualJoystickVisibility(bool bVisible);// 0xffffff90c89e5001
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0xffffff90c89e5005
	void SetName(FString S);// 0xffffff90c89e5001
	void SetMouseLocation(const int X, const int Y);// 0xffffff90c89e5002
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0xffffff90c89e5002
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0xffffff90c89e5003
	void SetDisableHaptics(bool bNewDisabled);// 0xffffff90c89e5001
	void SetControllerLightColor(Color Color);// 0xffffff90c89e5001
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xffffff90c89e5005
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0xffffff90c89e5003
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0xffffff90c89e5002
	void bb80a8d33a(9069cd7e3f TransitionParams);// 0xffffff90c89e5001
	void f040e60454();// 0xffffff90c89e5000
	void 645bcbf5f6();// 0xffffff90c89e5000
	void 1da0601fc8();// 0xffffff90c89e5000
	void ServerUpdateMultipleLevelsVisibility(const 0c38e91d6d[] LevelVisibilities);// 0xffffff90c89e5001
	void ServerUpdateLevelVisibility(const 0c38e91d6d LevelVisibility);// 0xffffff90c89e5001
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0xffffff90c89e5002
	void dcd25e04de(UniqueNetIdRepl PlayerId);// 0xffffff90c89e5001
	void abb08cfe50();// 0xffffff90c89e5000
	void 66e1202f71();// 0xffffff90c89e5000
	void 78f50736e8(bool bWaiting);// 0xffffff90c89e5001
	void 4a0f66ea83(Vector NewLoc, Rotator NewRot);// 0xffffff90c89e5002
	void 96bc6836e4();// 0xffffff90c89e5000
	void c5cbd45b32();// 0xffffff90c89e5000
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0xffffff90c89e5001
	void 9c322d9532(UniqueNetIdRepl PlayerId);// 0xffffff90c89e5001
	void 1ff43c28c1(FString Msg);// 0xffffff90c89e5001
	void ServerExec(FString Msg);// 0xffffff90c89e5001
	void fa22acad42();// 0xffffff90c89e5000
	void ServerCheckClientPossession();// 0xffffff90c89e5000
	void 3da5716c10(FString S);// 0xffffff90c89e5001
	void ee90c7f07d(FName NewMode);// 0xffffff90c89e5001
	void 20b5a34b05(Pawn* P);// 0xffffff90c89e5001
	void SendToConsole(FString Command);// 0xffffff90c89e5001
	void RestartLevel();// 0xffffff90c89e5000
	void ResetControllerLightColor();// 0xffffff90c89e5000
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0xffffff90c89e5004
	void PlayHapticEffect(5fcbb0ea7b* HapticEffect, enum Hand, float Scale, bool bLoop);// 0xffffff90c89e5004
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, 17018ede23 LatentInfo);// 0xffffff90c89e5008
	void Pause();// 0xffffff90c89e5000
	void a8987b0c4f(bool bIsLogging);// 0xffffff90c89e5001
	void LocalTravel(FString URL);// 0xffffff90c89e5001
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0xffffff90c89e5005
	bool IsInputKeyDown(Key Key);// 0xffffff90c89e5002
	void GetViewportSize(out int SizeX, out int SizeY);// 0xffffff90c89e5002
	SpectatorPawn* GetSpectatorPawn();// 0xffffff90c89e5001
	bool GetMousePosition(out float LocationX, out float LocationY);// 0xffffff90c89e5003
	Vector GetInputVectorKeyState(Key Key);// 0xffffff90c89e5002
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0xffffff90c89e5004
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0xffffff90c89e5002
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0xffffff90c89e5004
	float GetInputKeyTimeDown(Key Key);// 0xffffff90c89e5002
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xffffff90c89e5003
	float GetInputAnalogKeyState(Key Key);// 0xffffff90c89e5002
	HUD* GetHUD();// 0xffffff90c89e5001
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xffffff90c89e5005
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff90c89e5005
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff90c89e5005
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xffffff90c89e5004
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff90c89e5004
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff90c89e5004
	Vector GetFocalLocation();// 0xffffff90c89e5001
	void FOV(float NewFOV);// 0xffffff90c89e5001
	void EnableCheats();// 0xffffff90c89e5000
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0xffffff90c89e5005
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0xffffff90c89e5003
	void ConsoleKey(Key Key);// 0xffffff90c89e5001
	void d1aad2296b(const FText KickReason);// 0xffffff90c89e5001
	void c311e2ed5c();// 0xffffff90c89e5000
	void f35c33233d(const 3856676ad3[] LevelStatuses);// 0xffffff90c89e5001
	void 3a15c08a51(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0xffffff90c89e5005
	void 9bc2ba3ba0(UniqueNetIdRepl PlayerId);// 0xffffff90c89e5001
	void 77e7ed8844(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xffffff90c89e5004
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xffffff90c89e5004
	void 4a79826824(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0xffffff90c89e5004
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0xffffff90c89e5002
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xffffff90c89e5002
	void ClientStopCameraShake(class 1c29c51cb3 Shake, bool bImmediately);// 0xffffff90c89e5002
	void 358765b4f1(CameraAnim* AnimToStop);// 0xffffff90c89e5001
	void 3538b76e42();// 0xffffff90c89e5000
	void ClientStartCameraShakeFromSource(class 1c29c51cb3 Shake, CameraShakeSourceComponent* SourceComponent);// 0xffffff90c89e5002
	void ClientStartCameraShake(class 1c29c51cb3 Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff90c89e5004
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xffffff90c89e5001
	void 4bf23496e2(Actor* A, 9069cd7e3f TransitionParams);// 0xffffff90c89e5002
	void cea5267ecf(bool bWaiting);// 0xffffff90c89e5001
	void ClientSetHUD(class HUD NewHUDClass);// 0xffffff90c89e5001
	void 709458bfcf(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0xffffff90c89e5003
	void 074e111e21(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0xffffff90c89e5004
	void 1d06c8a8cd(FName NewCamMode);// 0xffffff90c89e5001
	void d9c1f99556(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0xffffff90c89e5006
	void 90bdd65bec();// 0xffffff90c89e5000
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0xffffff90c89e5001
	void 8442f0269b(FString ReturnReason);// 0xffffff90c89e5001
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xffffff90c89e5001
	void ClientRestart(Pawn* NewPawn);// 0xffffff90c89e5001
	void b71dcdf6b4();// 0xffffff90c89e5000
	void ClientRepObjRef(Object* Object);// 0xffffff90c89e5001
	void 02f8f0af17(class 112ea71b06 Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0xffffff90c89e5005
	void d6ed741021(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0xffffff90c89e5004
	void c9dc368230(FName LevelName, bool bFirst, bool bLast);// 0xffffff90c89e5003
	void c5ef6992c6(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0xffffff90c89e5004
	void 233c95ee8f(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xffffff90c89e5003
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, cf035291ae Params);// 0xffffff90c89e5002
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0xffffff90c89e5009
	void 734d3305b9(UniqueNetIdRepl PlayerId);// 0xffffff90c89e5001
	void 643045b40c(FString S, FName Type, float MsgLifeTime);// 0xffffff90c89e5003
	void f200d8c1ab(bool bIgnore);// 0xffffff90c89e5001
	void bc27bd58c4(bool bIgnore);// 0xffffff90c89e5001
	void e1e9f54afa(FName NewState);// 0xffffff90c89e5001
	void 26b987cba9(Actor* EndGameFocus, bool bIsWinner);// 0xffffff90c89e5002
	void fadad497f6();// 0xffffff90c89e5000
	void ClientFlushLevelStreaming();// 0xffffff90c89e5000
	void cf0e4e0d9d();// 0xffffff90c89e5000
	void 46582c1ab7(bool bEnable);// 0xffffff90c89e5001
	void 0ee4a6f517();// 0xffffff90c89e5000
	void ClientClearCameraLensEffects();// 0xffffff90c89e5000
	void b936144ccf(int Cap);// 0xffffff90c89e5001
	void 90f0aa2296();// 0xffffff90c89e5000
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0xffffff90c89e5003
	void ClearAudioListenerOverride();// 0xffffff90c89e5000
	void ClearAudioListenerAttenuationOverride();// 0xffffff90c89e5000
	bool CanRestartPlayer();// 0xffffff90c89e5001
	void Camera(FName NewMode);// 0xffffff90c89e5001
	void AddYawInput(float Val);// 0xffffff90c89e5001
	void AddRollInput(float Val);// 0xffffff90c89e5001
	void AddPitchInput(float Val);// 0xffffff90c89e5001
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0xffffff90c89e5001

--------------------------------
Class: UserWidget.Widget.Visual.Object
	enum TickFrequency;//[Offset: 0x1c0, Size: 0x1]
	WidgetTree* WidgetTree;//[Offset: 0x228, Size: 0x8]
	delegate ColorAndOpacityDelegate;//[Offset: 0x234, Size: 0x28]
	2a0275ac41*[] ActiveSequencePlayers;//[Offset: 0x260, Size: 0x10]
	delegate ForegroundColorDelegate;//[Offset: 0x278, Size: 0x28]
	InputComponent* InputComponent;//[Offset: 0x2a0, Size: 0x8]
	2a0275ac41*[] StoppedSequencePlayers;//[Offset: 0x2a8, Size: 0x10]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]
	c58651d48b[] AnimationCallbacks;//[Offset: 0x2c0, Size: 0x10]
	int Priority;//[Offset: 0x2d0, Size: 0x4]
	delegate OnVisibilityChanged;//[Offset: 0x2d8, Size: 0x10]
	0261cf5f4e[] NamedSlotBindings;//[Offset: 0x2e8, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x310, Size: 0x10]
	311b5c95c2* AnimationTickManager;//[Offset: 0x328, Size: 0x8]
	Margin Padding;//[Offset: 0x330, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x360, Size: 0x28]
	void UnregisterInputComponent();// 0xffffff90c89e5000
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xffffff90c89e5002
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xffffff90c89e5002
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0xffffff90c89e5001
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0xffffff90c89e5001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffff90c89e5002
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0xffffff90c89e5002
	void StopListeningForAllInputActions();// 0xffffff90c89e5000
	void StopAnimationsAndLatentActions();// 0xffffff90c89e5000
	void StopAnimation(const WidgetAnimation* InAnimation);// 0xffffff90c89e5001
	void StopAllRelevantPlayingAnimation(const WidgetAnimation* InAnimation);// 0xffffff90c89e5001
	void StopAllAnimations();// 0xffffff90c89e5000
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0xffffff90c89e5002
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xffffff90c89e5002
	void SetPadding(Margin InPadding);// 0xffffff90c89e5001
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0xffffff90c89e5001
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0xffffff90c89e5002
	void SetInputActionPriority(int NewPriority);// 0xffffff90c89e5001
	void SetInputActionBlocking(bool bShouldBlock);// 0xffffff90c89e5001
	void SetForegroundColor(SlateColor InForegroundColor);// 0xffffff90c89e5001
	void SetDesiredSizeInViewport(Vector2D Size);// 0xffffff90c89e5001
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xffffff90c89e5001
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0xffffff90c89e5002
	void SetAnchorsInViewport(Anchors Anchors);// 0xffffff90c89e5001
	void SetAlignmentInViewport(Vector2D Alignment);// 0xffffff90c89e5001
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0xffffff90c89e5001
	void RemoveFromViewport();// 0xffffff90c89e5000
	void RegisterInputComponent();// 0xffffff90c89e5000
	void PreConstruct(bool IsDesignTime);// 0xffffff90c89e5001
	void PlaySound(SoundBase* SoundToPlay);// 0xffffff90c89e5001
	2a0275ac41* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xffffff90c89e5008
	2a0275ac41* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xffffff90c89e5004
	2a0275ac41* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xffffff90c89e5004
	2a0275ac41* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xffffff90c89e5007
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0xffffff90c89e5002
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff90c89e5003
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff90c89e5003
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xffffff90c89e5003
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff90c89e5003
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff90c89e5003
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xffffff90c89e5001
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff90c89e5003
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff90c89e5003
	void OnPaint(out 4cf0090c63 Context);// 0xffffff90c89e5001
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff90c89e5003
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff90c89e5003
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xffffff90c89e5001
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff90c89e5002
	void OnMouseCaptureLost();// 0xffffff90c89e5000
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff90c89e5003
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff90c89e5003
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xffffff90c89e5003
	EventReply OnMotionDetected(Geometry MyGeometry, ff68daf78a InMotionEvent);// 0xffffff90c89e5003
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff90c89e5003
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff90c89e5003
	EventReply OnKeyChar(Geometry MyGeometry, f34a83b1ab InCharacterEvent);// 0xffffff90c89e5003
	void OnInitialized();// 0xffffff90c89e5000
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xffffff90c89e5003
	void OnFocusLost(FocusEvent InFocusEvent);// 0xffffff90c89e5001
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff90c89e5004
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff90c89e5004
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff90c89e5002
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff90c89e5003
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xffffff90c89e5003
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff90c89e5002
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xffffff90c89e5001
	void OnAnimationFinished(const WidgetAnimation* Animation, byte InPlayMode);// 0xffffff90c89e5002
	EventReply OnAnalogValueChanged(Geometry MyGeometry, 9efed9da5e InAnalogInputEvent);// 0xffffff90c89e5003
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xffffff90c89e5001
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0xffffff90c89e5004
	bool IsPlayingAnimation();// 0xffffff90c89e5001
	bool IsListeningForInputAction(FName ActionName);// 0xffffff90c89e5002
	bool IsInViewport();// 0xffffff90c89e5001
	bool IsInteractable();// 0xffffff90c89e5001
	bool IsAnyAnimationPlaying();// 0xffffff90c89e5001
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0xffffff90c89e5002
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0xffffff90c89e5002
	Pawn* GetOwningPlayerPawn();// 0xffffff90c89e5001
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0xffffff90c89e5001
	bool GetIsVisible();// 0xffffff90c89e5001
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0xffffff90c89e5002
	Anchors GetAnchorsInViewport();// 0xffffff90c89e5001
	Vector2D GetAlignmentInViewport();// 0xffffff90c89e5001
	void FlushAnimations();// 0xffffff90c89e5000
	void Destruct();// 0xffffff90c89e5000
	void Construct();// 0xffffff90c89e5000
	void CancelLatentActions();// 0xffffff90c89e5000
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xffffff90c89e5002
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xffffff90c89e5002
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0xffffff90c89e5004
	void AddToViewport(int ZOrder);// 0xffffff90c89e5001
	bool AddToPlayerScreen(int ZOrder);// 0xffffff90c89e5002

--------------------------------
Class: Widget.Visual.Object
	delegate bIsEnabledDelegate;//[Offset: 0x64, Size: 0x28]
	Vector2D RenderTransformPivot;//[Offset: 0xa0, Size: 0x8]
	WidgetNavigation* Navigation;//[Offset: 0xa8, Size: 0x8]
	delegate ToolTipTextDelegate;//[Offset: 0xb0, Size: 0x28]
	692432eb64* AccessibleWidgetData;//[Offset: 0xd8, Size: 0x8]
	bool bNoPixelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	delegate VisibilityDelegate;//[Offset: 0xe4, Size: 0x28]
	enum FlowDirectionPreference;//[Offset: 0x10c, Size: 0x1]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10d, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10d, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10d, Size: 0x1]
	delegate ToolTipWidgetDelegate;//[Offset: 0x110, Size: 0x28]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	Widget* ToolTipWidget;//[Offset: 0x140, Size: 0x8]
	PropertyBinding*[] NativeBindings;//[Offset: 0x148, Size: 0x10]
	byte Cursor;//[Offset: 0x158, Size: 0x1]
	PanelSlot* Slot;//[Offset: 0x160, Size: 0x8]
	enum Visibility;//[Offset: 0x168, Size: 0x1]
	enum Clipping;//[Offset: 0x169, Size: 0x1]
	FText ToolTipText;//[Offset: 0x170, Size: 0x18]
	WidgetTransform RenderTransform;//[Offset: 0x198, Size: 0x1c]
	void SetVisibility(enum InVisibility);// 0xffffff90c89e5001
	void SetUserFocus(PlayerController* PlayerController);// 0xffffff90c89e5001
	void SetToolTipText(out const FText InToolTipText);// 0xffffff90c89e5001
	void SetToolTip(Widget* Widget);// 0xffffff90c89e5001
	void SetRenderTranslation(Vector2D Translation);// 0xffffff90c89e5001
	void SetRenderTransformPivot(Vector2D Pivot);// 0xffffff90c89e5001
	void SetRenderTransformAngle(float Angle);// 0xffffff90c89e5001
	void SetRenderTransform(WidgetTransform InTransform);// 0xffffff90c89e5001
	void SetRenderShear(Vector2D Shear);// 0xffffff90c89e5001
	void SetRenderScale(Vector2D Scale);// 0xffffff90c89e5001
	void SetRenderOpacity(float InOpacity);// 0xffffff90c89e5001
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0xffffff90c89e5002
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0xffffff90c89e5002
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0xffffff90c89e5002
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0xffffff90c89e5002
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0xffffff90c89e5003
	void SetKeyboardFocus();// 0xffffff90c89e5000
	void SetIsEnabled(bool bInIsEnabled);// 0xffffff90c89e5001
	void SetFocus();// 0xffffff90c89e5000
	void SetCursor(byte InCursor);// 0xffffff90c89e5001
	void SetClipping(enum InClipping);// 0xffffff90c89e5001
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0xffffff90c89e5002
	void ResetCursor();// 0xffffff90c89e5000
	void RemoveFromParent();// 0xffffff90c89e5000
	EventReply OnReply__DelegateSignature();// 0xffffff90c89e5001
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff90c89e5003
	bool IsVisible();// 0xffffff90c89e5001
	bool IsHovered();// 0xffffff90c89e5001
	void InvalidateLayoutAndVolatility();// 0xffffff90c89e5000
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0xffffff90c89e5002
	bool HasUserFocus(PlayerController* PlayerController);// 0xffffff90c89e5002
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0xffffff90c89e5003
	bool HasMouseCapture();// 0xffffff90c89e5001
	bool HasKeyboardFocus();// 0xffffff90c89e5001
	bool HasFocusedDescendants();// 0xffffff90c89e5001
	bool HasAnyUserFocus();// 0xffffff90c89e5001
	Widget* GetWidget__DelegateSignature();// 0xffffff90c89e5001
	enum GetVisibility();// 0xffffff90c89e5001
	Geometry GetTickSpaceGeometry();// 0xffffff90c89e5001
	FText GetText__DelegateSignature();// 0xffffff90c89e5001
	enum GetSlateVisibility__DelegateSignature();// 0xffffff90c89e5001
	SlateColor GetSlateColor__DelegateSignature();// 0xffffff90c89e5001
	SlateBrush GetSlateBrush__DelegateSignature();// 0xffffff90c89e5001
	float GetRenderTransformAngle();// 0xffffff90c89e5001
	float GetRenderOpacity();// 0xffffff90c89e5001
	PanelWidget* GetParent();// 0xffffff90c89e5001
	Geometry GetPaintSpaceGeometry();// 0xffffff90c89e5001
	PlayerController* GetOwningPlayer();// 0xffffff90c89e5001
	LocalPlayer* GetOwningLocalPlayer();// 0xffffff90c89e5001
	byte GetMouseCursor__DelegateSignature();// 0xffffff90c89e5001
	LinearColor GetLinearColor__DelegateSignature();// 0xffffff90c89e5001
	bool GetIsEnabled();// 0xffffff90c89e5001
	int GetInt32__DelegateSignature();// 0xffffff90c89e5001
	GameInstance* GetGameInstance();// 0xffffff90c89e5001
	float GetFloat__DelegateSignature();// 0xffffff90c89e5001
	Vector2D GetDesiredSize();// 0xffffff90c89e5001
	enum GetClipping();// 0xffffff90c89e5001
	enum GetCheckBoxState__DelegateSignature();// 0xffffff90c89e5001
	Geometry GetCachedGeometry();// 0xffffff90c89e5001
	bool GetBool__DelegateSignature();// 0xffffff90c89e5001
	FText GetAccessibleText();// 0xffffff90c89e5001
	FText GetAccessibleSummaryText();// 0xffffff90c89e5001
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xffffff90c89e5002
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xffffff90c89e5002
	void ForceVolatile(bool bForce);// 0xffffff90c89e5001
	void ForceLayoutPrepass();// 0xffffff90c89e5000

--------------------------------
Class: Visual.Object

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D 377c1d0706;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool 1fd4de77c7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	LinearColor ContentColorAndOpacity;//[Offset: 0x1b4, Size: 0x10]
	PanelSlot*[] Slots;//[Offset: 0x1c8, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x1dc, Size: 0x28]
	bool RemoveChildAt(int Index);// 0xffffff90c89e5002
	bool RemoveChild(Widget* Content);// 0xffffff90c89e5002
	bool HasChild(Widget* Content);// 0xffffff90c89e5002
	bool HasAnyChildren();// 0xffffff90c89e5001
	int GetChildrenCount();// 0xffffff90c89e5001
	int GetChildIndex(const Widget* Content);// 0xffffff90c89e5002
	Widget* GetChildAt(int Index);// 0xffffff90c89e5002
	Widget*[] GetAllChildren();// 0xffffff90c89e5001
	void ClearChildren();// 0xffffff90c89e5000
	PanelSlot* AddChild(Widget* Content);// 0xffffff90c89e5002

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x68, Size: 0x8]
	Widget* Content;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: LocalPlayer.Player.Object
	bool 80064f493f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x271, Size: 0x1]
	class PlayerController* b8eff9925f;//[Offset: 0x278, Size: 0x8]
	GameViewportClient* ViewportClient;//[Offset: 0x298, Size: 0x8]

--------------------------------
Class: Player.Object
	int ConfiguredInternetSpeed;//[Offset: 0x74, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: GameViewportClient.f6a0f1d52b.Object
	World* World;//[Offset: 0xd0, Size: 0x8]
	int MaxSplitscreenPlayers;//[Offset: 0x1c0, Size: 0x4]
	Console* 28ba0a7ce3;//[Offset: 0x1c8, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x2d8, Size: 0x8]
	65d96748ef[] 3c60a97eb1;//[Offset: 0x3b8, Size: 0x10]
	void SSSwapControllers();// 0xffffff90c89e5000
	void ShowTitleSafeArea();// 0xffffff90c89e5000
	void SetConsoleTarget(int PlayerIndex);// 0xffffff90c89e5001

--------------------------------
Class: f6a0f1d52b.Object

--------------------------------
Class: Console.Object
	FString[] HistoryBuffer;//[Offset: 0xe0, Size: 0x10]
	LocalPlayer* 9900ba3baa;//[Offset: 0xf8, Size: 0x8]
	Texture2D* 46726a83af;//[Offset: 0x100, Size: 0x8]
	Texture2D* 8e58973840;//[Offset: 0x158, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	c13ae6a33e(XigPtrProperty)[] c13ae6a33e;//[Offset: 0x78, Size: 0x10]
	ReferencedObjects(XigPtrProperty)[] ReferencedObjects;//[Offset: 0xa0, Size: 0x10]
	80fef9608d* 80fef9608d;//[Offset: 0xf0, Size: 0x8]
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x1e0, Size: 0x10]
	void ReceiveShutdown();// 0xffffff90c89e5000
	void ReceiveInit();// 0xffffff90c89e5000
	void HandleTravelError(byte FailureType);// 0xffffff90c89e5001
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xffffff90c89e5002
	void DebugRemovePlayer(int ControllerId);// 0xffffff90c89e5001
	void DebugCreatePlayer(int ControllerId);// 0xffffff90c89e5001

--------------------------------
Class: 80fef9608d.Object

--------------------------------
Class: 65d96748ef
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* 86f0022fd3;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0xa0, Size: 0x8]
	989ce5a865[] AnimationBindings;//[Offset: 0xc0, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xffffff90c89e5002
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xffffff90c89e5002
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0xffffff90c89e5001
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0xffffff90c89e5001
	float GetStartTime();// 0xffffff90c89e5001
	float GetEndTime();// 0xffffff90c89e5001
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xffffff90c89e5002
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xffffff90c89e5002

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	c7e8d8940c* CompiledData;//[Offset: 0x90, Size: 0x8]
	enum DefaultCompletionMode;//[Offset: 0x98, Size: 0x1]
	enum 693f2f76f3;//[Offset: 0x9a, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0xffffff90c89e5002
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0xffffff90c89e5002

--------------------------------
Class: MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x90, Size: 0x10]
	b1fdb8137a SelectionRange;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xb0, Size: 0x8]
	enum ClockSource;//[Offset: 0xb8, Size: 0x1]
	enum b7e2b236fc;//[Offset: 0xb9, Size: 0x1]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0xc0, Size: 0x10]
	<FName,af0ec59f2b> a04e30f315;//[Offset: 0xd0, Size: 0x50]
	SoftObjectPath fe02643e90;//[Offset: 0x120, Size: 0x18]
	b1fdb8137a 62ea1322a3;//[Offset: 0x138, Size: 0x10]
	9f30e954e7[] MarkedFrames;//[Offset: 0x148, Size: 0x10]
	MovieSceneTrack*[] 3e84d66d8d;//[Offset: 0x158, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x168, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x178, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x180, Size: 0x8]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool 58379e58b8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool 8d3aeda88e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* 3660d90733;//[Offset: 0x68, Size: 0x8]
	Guid[] 45591ba79d;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: b1fdb8137a

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions fe6c5c7a9e;//[Offset: 0x90, Size: 0x4]
	c42eae0309 c69b2565bc;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool 347db26051;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool d935246007;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool 5b19120513;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool fe2649cd58;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: c42eae0309
	64f71ff8ad[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 64f71ff8ad
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4]
	enum Flags;//[Offset: 0x1c, Size: 0x1]
	int16 6056943cee;//[Offset: 0x1e, Size: 0x2]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	e11da3bad0 Easing;//[Offset: 0x98, Size: 0x38]
	b1fdb8137a fb17e85c9f;//[Offset: 0xdc, Size: 0x10]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xec, Size: 0x1]
	MovieSceneSectionEvalOptions fe6c5c7a9e;//[Offset: 0xf8, Size: 0x2]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	ca272fc2ea d9829eb9af;//[Offset: 0x101, Size: 0x2]
	void SetRowIndex(int NewRowIndex);// 0xffffff90c89e5001
	void SetPreRollFrames(int InPreRollFrames);// 0xffffff90c89e5001
	void SetPostRollFrames(int InPostRollFrames);// 0xffffff90c89e5001
	void SetOverlapPriority(int NewPriority);// 0xffffff90c89e5001
	void SetIsLocked(bool bInIsLocked);// 0xffffff90c89e5001
	void SetIsActive(bool bInIsActive);// 0xffffff90c89e5001
	void SetCompletionMode(enum InCompletionMode);// 0xffffff90c89e5001
	void SetBlendType(enum InBlendType);// 0xffffff90c89e5001
	bool IsLocked();// 0xffffff90c89e5001
	bool IsActive();// 0xffffff90c89e5001
	int GetRowIndex();// 0xffffff90c89e5001
	int GetPreRollFrames();// 0xffffff90c89e5001
	int GetPostRollFrames();// 0xffffff90c89e5001
	int GetOverlapPriority();// 0xffffff90c89e5001
	enum GetCompletionMode();// 0xffffff90c89e5001
	ca272fc2ea GetBlendType();// 0xffffff90c89e5001

--------------------------------
Class: ca272fc2ea
	enum d9829eb9af;//[Offset: 0x0, Size: 0x1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: e11da3bad0
	int 4e67efdfab;//[Offset: 0x0, Size: 0x4]
	int 03e2405936;//[Offset: 0x4, Size: 0x4]
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10]
	bool 3941a9aee2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int f288d45ef2;//[Offset: 0x1c, Size: 0x4]
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10]
	bool afda955d80;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int c54c2ebf2e;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool 9382bb19d6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum ee22a4bcf4;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: FrameNumberRange
	38164c6e58 LowerBound;//[Offset: 0x0, Size: 0x8]
	38164c6e58 UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: 38164c6e58
	byte Type;//[Offset: 0x0, Size: 0x1]
	FrameNumber Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString 3013072653;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: af0ec59f2b
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString 747172ad6c;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 9f30e954e7
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* 217ba5071a;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 989ce5a865
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: c7e8d8940c.Object
	dca6336d87 2416fb9ecb;//[Offset: 0x68, Size: 0x160]
	fca8ac003c Hierarchy;//[Offset: 0x1c8, Size: 0x118]
	fc8be3d66b 64ca320659;//[Offset: 0x2e0, Size: 0xf0]
	3dd79c505c 4410f88bd0;//[Offset: 0x3d0, Size: 0x30]
	FrameTime[] 60b0d7805a;//[Offset: 0x400, Size: 0x10]
	Guid 7b0a23ad3f;//[Offset: 0x410, Size: 0x10]
	Guid CompilerVersion;//[Offset: 0x420, Size: 0x10]
	20b5c772ee ad767e54b3;//[Offset: 0x430, Size: 0x1]
	20b5c772ee 5e70a17670;//[Offset: 0x431, Size: 0x1]
	enum 2f13968c09;//[Offset: 0x432, Size: 0x1]

--------------------------------
Class: dca6336d87
	<3ce57f05b4,19290b356e> Tracks;//[Offset: 0x0, Size: 0x50]
	Guid 4059fe4de6;//[Offset: 0xa0, Size: 0x10]
	06f5d29d88 d713916e2b;//[Offset: 0xb0, Size: 0x4]
	af16918e50 f7d1421cf2;//[Offset: 0xb8, Size: 0xa8]

--------------------------------
Class: 3ce57f05b4
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: 19290b356e
	Guid ecc5c2a56a;//[Offset: 0x0, Size: 0x10]
	uint16 9e66c9c1a3;//[Offset: 0x10, Size: 0x2]
	enum bab6ce2a9f;//[Offset: 0x12, Size: 0x1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x20]
	b71987c873[] 044a823c96;//[Offset: 0x38, Size: 0x10]
	4b325938ff 2c12130c0f;//[Offset: 0x48, Size: 0x38]
	FName f5a38da469;//[Offset: 0x80, Size: 0x8]
	bool 5b19120513;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool fe2649cd58;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	bool 80459bfdef;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: b71987c873

--------------------------------
Class: 4b325938ff

--------------------------------
Class: 06f5d29d88
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: af16918e50
	3ce57f05b4 9763ce97f9;//[Offset: 0x0, Size: 0x4]
	<Guid,3ce57f05b4> d7bece4135;//[Offset: 0x8, Size: 0x50]
	<Guid,b1fdb8137a> 9c1db01856;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: fca8ac003c
	83f0d1a65c RootNode;//[Offset: 0x0, Size: 0x18]
	7f369322b2 Tree;//[Offset: 0x18, Size: 0x60]
	<11d2dd548d,a7ef095365> SubSequences;//[Offset: 0x78, Size: 0x50]
	<11d2dd548d,83f0d1a65c> Hierarchy;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: 83f0d1a65c
	11d2dd548d ParentID;//[Offset: 0x0, Size: 0x4]
	11d2dd548d[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 11d2dd548d
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: 7f369322b2

--------------------------------
Class: a7ef095365
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	0de0ef89bc f23db4867b;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	11d2dd548d 52a67bf60d;//[Offset: 0x40, Size: 0x4]
	b1fdb8137a 06b485d090;//[Offset: 0x44, Size: 0x10]
	b1fdb8137a d86960825c;//[Offset: 0x54, Size: 0x10]
	b1fdb8137a 123555d07a;//[Offset: 0x64, Size: 0x10]
	b1fdb8137a da5fea7dc5;//[Offset: 0x74, Size: 0x10]
	b1fdb8137a ba59c96851;//[Offset: 0x84, Size: 0x10]
	int16 HierarchicalBias;//[Offset: 0x94, Size: 0x2]
	bool bfc8bac3b2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	f68bf55a05 InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid 66abddd490;//[Offset: 0xd0, Size: 0x10]
	0de0ef89bc a22121e087;//[Offset: 0xe0, Size: 0x20]

--------------------------------
Class: 0de0ef89bc
	61902e1e9b 9108ea1832;//[Offset: 0x0, Size: 0xc]
	d38e32e2e8[] 17d2494758;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: 61902e1e9b
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: d38e32e2e8
	61902e1e9b 9108ea1832;//[Offset: 0x0, Size: 0xc]
	5346312256 48a195b89a;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: 5346312256
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: f68bf55a05

--------------------------------
Class: fc8be3d66b
	c65664327e 2dd960607c;//[Offset: 0x0, Size: 0x60]
	c65664327e 4f3fee11dc;//[Offset: 0x60, Size: 0x60]
	44dee50e90[] Entities;//[Offset: 0xc0, Size: 0x10]
	999fc253a8[] 0568acd38f;//[Offset: 0xd0, Size: 0x10]
	b2aeda297d[] e4a0b0f652;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: c65664327e

--------------------------------
Class: 44dee50e90
	5ce1105280 Key;//[Offset: 0x0, Size: 0x24]
	int c8dc2c804d;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: 5ce1105280
	Object* 6569779b89;//[Offset: 0x0, Size: 0x20]
	uint32 EntityID;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: 999fc253a8
	FrameNumber ForcedTime;//[Offset: 0x0, Size: 0x4]
	enum Flags;//[Offset: 0x8, Size: 0x1]
	bool 13e73e5eaf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool 7912e64b9d;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: b2aeda297d
	Guid ecc5c2a56a;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 3dd79c505c
	b1fdb8137a[] Ranges;//[Offset: 0x0, Size: 0x10]
	6df91042b6[] Groups;//[Offset: 0x10, Size: 0x10]
	6ec5f12a5a[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: 6df91042b6
	e4b217e851[] 062b1bfc6c;//[Offset: 0x0, Size: 0x10]
	94fa26b529[] 96aab411a9;//[Offset: 0x10, Size: 0x10]
	6ec70f0400[] 0b151edba2;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: e4b217e851
	int 5b642ec5e0;//[Offset: 0x0, Size: 0x4]
	int 3f3e1b48e1;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 94fa26b529
	dfa8985963 38491a0324;//[Offset: 0x0, Size: 0x8]
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: dfa8985963
	11d2dd548d SequenceID;//[Offset: 0x0, Size: 0x4]
	3ce57f05b4 6e654430be;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 6ec70f0400
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2]
	enum Flags;//[Offset: 0x2, Size: 0x1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 6ec5f12a5a
	11d2dd548d[] b6a1ae4430;//[Offset: 0x0, Size: 0x10]
	c57ec075cd[] a10809bad1;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: c57ec075cd
	ed4a679dd2 Key;//[Offset: 0x0, Size: 0xc]
	uint16 070c16424f;//[Offset: 0xc, Size: 0x2]
	uint16 5b6cc429f1;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: ed4a679dd2
	11d2dd548d SequenceID;//[Offset: 0x0, Size: 0x4]
	3ce57f05b4 6e654430be;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 20b5c772ee
	bool 0a90c901af;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool a83671c8d7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool 769b337363;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool d8057386b1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetNavigation.Object
	cd4d2613ff Left;//[Offset: 0x64, Size: 0x54]
	cd4d2613ff Up;//[Offset: 0xb8, Size: 0x54]
	cd4d2613ff Down;//[Offset: 0x10c, Size: 0x54]
	cd4d2613ff Next;//[Offset: 0x160, Size: 0x54]
	cd4d2613ff Right;//[Offset: 0x1b4, Size: 0x54]
	cd4d2613ff Previous;//[Offset: 0x208, Size: 0x54]

--------------------------------
Class: cd4d2613ff
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x20]
	delegate aa2ccc3603;//[Offset: 0x2c, Size: 0x28]

--------------------------------
Class: 692432eb64.Object
	enum AccessibleSummaryBehavior;//[Offset: 0x64, Size: 0x1]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x80, Size: 0x28]
	delegate AccessibleTextDelegate;//[Offset: 0xa8, Size: 0x28]
	enum AccessibleBehavior;//[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: PropertyBinding.Object
	Object* 48a14a9214;//[Offset: 0x64, Size: 0x20]
	FName c000d0879d;//[Offset: 0x84, Size: 0x8]
	48ea011610 SourcePath;//[Offset: 0x90, Size: 0x28]

--------------------------------
Class: 48ea011610.6a67640e8d

--------------------------------
Class: 6a67640e8d
	2d6327d112[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* ce5a5d38ed;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: 2d6327d112
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: 2a0275ac41.Object
	WidgetAnimation* Animation;//[Offset: 0x490, Size: 0x8]
	b91d2b9d16 24cfc64869;//[Offset: 0x4e8, Size: 0x100]
	void SetUserTag(FName InUserTag);// 0xffffff90c89e5001
	FName GetUserTag();// 0xffffff90c89e5001

--------------------------------
Class: b91d2b9d16
	MovieSceneSequence* b5187f8d1d;//[Offset: 0x0, Size: 0x20]
	4951012bbb* 589483e643;//[Offset: 0x20, Size: 0x8]
	9fa6c99ee9* 700f351fe8;//[Offset: 0x30, Size: 0x8]
	<11d2dd548d,Object*> fc00b9a1e7;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: 4951012bbb.Object
	<int,fca8ac003c> Hierarchies;//[Offset: 0x90, Size: 0x50]
	<int,3dd79c505c> e3a83e60af;//[Offset: 0xf8, Size: 0x50]
	<int,dca6336d87> 034fbb686e;//[Offset: 0x180, Size: 0x50]
	<int,fc8be3d66b> b7614ab1d6;//[Offset: 0x1d0, Size: 0x50]

--------------------------------
Class: 9fa6c99ee9.Object
	75f8fba64e d0d29eec52;//[Offset: 0x278, Size: 0x138]

--------------------------------
Class: 75f8fba64e
	8f025fc374 Nodes;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: 8f025fc374

--------------------------------
Class: SoundBase.Object
	c4106845fa[] PreEffectBusSends;//[Offset: 0x70, Size: 0x10]
	float Priority;//[Offset: 0x80, Size: 0x4]
	SoundClass* SoundClassObject;//[Offset: 0x88, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool f55ec17825;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool d203f51b7f;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1]
	f47d21218f* AttenuationSettings;//[Offset: 0x98, Size: 0x8]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0xa0, Size: 0x48]
	5c9cf0fb95* SourceEffectChain;//[Offset: 0xe8, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x140, Size: 0x10]
	7a330b57f1* SoundSubmixObject;//[Offset: 0x150, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x158, Size: 0x50]
	float MaxDistance;//[Offset: 0x1a8, Size: 0x4]
	enum VirtualizationMode;//[Offset: 0x1ac, Size: 0x1]
	float Duration;//[Offset: 0x1b0, Size: 0x4]
	c4106845fa[] BusSends;//[Offset: 0x1b8, Size: 0x10]
	d9dab5379a[] SoundSubmixSends;//[Offset: 0x1c8, Size: 0x10]
	float TotalSamples;//[Offset: 0x1d8, Size: 0x4]
	9706fb6b1f ConcurrencyOverrides;//[Offset: 0x1dc, Size: 0x24]

--------------------------------
Class: c4106845fa
	enum da0ce4af27;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8]
	float SendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4]
	float MinSendDistance;//[Offset: 0x24, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum 47a2acc315;//[Offset: 0x3d0, Size: 0x1]
	AudioBus* AudioBus;//[Offset: 0x3d8, Size: 0x8]
	bool c8ec8acb3b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1]

--------------------------------
Class: SoundWave.SoundBase.Object
	98af55bcb8[] 8533b595c0;//[Offset: 0x200, Size: 0x10]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1]
	bool d3a96d0d32;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1]
	enum dc2a0494f7;//[Offset: 0x225, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x226, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x226, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x227, Size: 0x1]
	bool 969c3dfacd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x227, Size: 0x1]
	4a94776987[] Subtitles;//[Offset: 0x278, Size: 0x10]
	CurveTable* de2f3296eb;//[Offset: 0x2d0, Size: 0x8]
	float SubtitlePriority;//[Offset: 0x2e8, Size: 0x4]
	FString SpokenText;//[Offset: 0x2f8, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x308, Size: 0x8]
	enum LoadingBehavior;//[Offset: 0x310, Size: 0x1]
	0978ada2c8[] 841dc6f109;//[Offset: 0x330, Size: 0x10]
	float[] ea6e0019c9;//[Offset: 0x370, Size: 0x10]

--------------------------------
Class: 98af55bcb8
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 4a94776987
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AudioBus.Object
	enum c2b62fe188;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: 0978ada2c8
	c18765806b[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: c18765806b
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: RichCurve.eea7c66749.34f697d219
	4acacef6f8[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: eea7c66749.34f697d219
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: 34f697d219
	5c4a91f0fb ca62bcde59;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: 5c4a91f0fb

--------------------------------
Class: 4acacef6f8
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x78, Size: 0x80]
	float GetFloatValue(float InTime);// 0xffffff90c89e5002

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0xffffff90c89e5002
	void GetTimeRange(out float MinTime, out float MaxTime);// 0xffffff90c89e5002

--------------------------------
Class: SoundClass.Object
	eb313d9bce Properties;//[Offset: 0x68, Size: 0x80]
	SoundClass* ParentClass;//[Offset: 0xe8, Size: 0x8]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xf0, Size: 0x10]
	SoundClass*[] ChildClasses;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: eb313d9bce
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x30, Size: 0x40]
	byte OutputTarget;//[Offset: 0x70, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x71, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4]
	900609d6fb* Modulator;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: 900609d6fb.Object

--------------------------------
Class: SoundSubmix.45c37c58d6.7a330b57f1.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x88, Size: 0x10]
	71068657ac*[] SubmixEffectChain;//[Offset: 0x98, Size: 0x10]
	float OutputVolume;//[Offset: 0xa8, Size: 0x4]
	float WetLevel;//[Offset: 0xac, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0xb0, Size: 0x4]
	246714623b* AmbisonicsPluginSettings;//[Offset: 0xb8, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0xc0, Size: 0x4]
	enum GainMode;//[Offset: 0xc4, Size: 0x1]
	float DryLevel;//[Offset: 0xd0, Size: 0x4]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0xffffff90c89e5001
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0xffffff90c89e5005
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0xffffff90c89e5001
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0xffffff90c89e5006
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0xffffff90c89e5002
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0xffffff90c89e5001
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0xffffff90c89e5002
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0xffffff90c89e5002
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const 6ebed01fc3[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0xffffff90c89e5009
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0xffffff90c89e5002

--------------------------------
Class: 45c37c58d6.7a330b57f1.Object
	7a330b57f1* ParentSubmix;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: 7a330b57f1.Object
	7a330b57f1*[] ChildSubmixes;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: 246714623b.Object

--------------------------------
Class: 6ebed01fc3
	float BandFrequency;//[Offset: 0x0, Size: 0x4]
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float QFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool 23fc6e0079;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	AudioEQEffect bd2953b1df;//[Offset: 0x78, Size: 0x40]
	0e915daf05[] SoundClassEffects;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: AudioEQEffect.89c434ed66
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: 89c434ed66

--------------------------------
Class: 0e915daf05
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: f47d21218f.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x68, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.ca9f11d811
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	5233f8dcd0[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	cada0e31f5 PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: ca9f11d811
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: 5233f8dcd0
	7a330b57f1* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: cada0e31f5
	44de54b749*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	6ba266a355*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	3c2c7626d3*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: 44de54b749.Object

--------------------------------
Class: 6ba266a355.Object

--------------------------------
Class: 3c2c7626d3.Object

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1]
	enum PitchRouting;//[Offset: 0x41, Size: 0x1]
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1]
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1]

--------------------------------
Class: 5c9cf0fb95.Object
	8dcfa86bd3[] Chain;//[Offset: 0x68, Size: 0x10]
	bool 42e70ad28e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: 8dcfa86bd3
	fc06589e11* PRESET;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: fc06589e11.SoundEffectPreset.Object

--------------------------------
Class: SoundConcurrency.Object
	9706fb6b1f Concurrency;//[Offset: 0x64, Size: 0x24]

--------------------------------
Class: 9706fb6b1f
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float RetriggerTime;//[Offset: 0x8, Size: 0x4]
	float 6ccb351d39;//[Offset: 0xc, Size: 0x4]
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: d9dab5379a
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	enum SendStage;//[Offset: 0x1, Size: 0x1]
	7a330b57f1* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: 4cf0090c63

--------------------------------
Class: ff68daf78a.InputEvent

--------------------------------
Class: f34a83b1ab.InputEvent

--------------------------------
Class: DragDropOperation.Object
	Widget* DefaultDragVisual;//[Offset: 0x68, Size: 0x8]
	delegate OnDrop;//[Offset: 0x70, Size: 0x10]
	Vector2D Offset;//[Offset: 0x80, Size: 0x8]
	delegate OnDragCancelled;//[Offset: 0x88, Size: 0x10]
	FString Tag;//[Offset: 0x98, Size: 0x10]
	enum Pivot;//[Offset: 0xa8, Size: 0x1]
	delegate OnDragged;//[Offset: 0xb0, Size: 0x10]
	Object* Payload;//[Offset: 0xc0, Size: 0x8]
	void Drop(out const PointerEvent PointerEvent);// 0xffffff90c89e5001
	void Dragged(out const PointerEvent PointerEvent);// 0xffffff90c89e5001
	void DragCancelled(out const PointerEvent PointerEvent);// 0xffffff90c89e5001

--------------------------------
Class: 9efed9da5e.KeyEvent.InputEvent

--------------------------------
Class: PlayerCameraManager.Actor.Object
	Vector FreeCamOffset;//[Offset: 0x2a8, Size: 0xc]
	float ViewYawMax;//[Offset: 0x2b4, Size: 0x4]
	PostProcessSettings[] 9814823de1;//[Offset: 0x2b8, Size: 0x10]
	delegate OnAudioFadeChangeEvent;//[Offset: 0x2c8, Size: 0x10]
	c9d1258728 ViewTarget;//[Offset: 0x2e0, Size: 0x600]
	10687dde7f LastFrameCameraCache;//[Offset: 0x8f0, Size: 0x5f0]
	c9d1258728 PendingViewTarget;//[Offset: 0xee0, Size: 0x600]
	CameraActor* bd5205d172;//[Offset: 0x14e8, Size: 0x8]
	10687dde7f 3f0ae445d7;//[Offset: 0x1500, Size: 0x5f0]
	SceneComponent* TransformComponent;//[Offset: 0x1af0, Size: 0x8]
	4337f6934c* fed1e025b5;//[Offset: 0x1af8, Size: 0x8]
	float DefaultFOV;//[Offset: 0x1b00, Size: 0x4]
	float ViewRollMin;//[Offset: 0x1b04, Size: 0x4]
	af8c01cac6*[] 98a6d1f57d;//[Offset: 0x1b10, Size: 0x10]
	af8c01cac6*[] 7b9a819c0e;//[Offset: 0x1b38, Size: 0x10]
	8e247eeffb*[] 33fcf5b4b0;//[Offset: 0x1b48, Size: 0x10]
	class 8e247eeffb[] DefaultModifiers;//[Offset: 0x1b58, Size: 0x10]
	Vector ViewTargetOffset;//[Offset: 0x1b68, Size: 0xc]
	af8c01cac6* d87d1567d0;//[Offset: 0x1b88, Size: 0x8]
	10687dde7f CameraCache;//[Offset: 0x1bd0, Size: 0x5f0]
	float ViewPitchMin;//[Offset: 0x21d0, Size: 0x4]
	EmitterCameraLensEffectBase*[] 01749b1afb;//[Offset: 0x21d8, Size: 0x10]
	float ViewRollMax;//[Offset: 0x21f0, Size: 0x4]
	10687dde7f 4afbb5f663;//[Offset: 0x2200, Size: 0x5f0]
	float FreeCamDistance;//[Offset: 0x27f0, Size: 0x4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2810, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2810, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2810, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2810, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2811, Size: 0x1]
	float DefaultOrthoWidth;//[Offset: 0x2814, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2818, Size: 0x4]
	float ViewYawMin;//[Offset: 0x281c, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x2820, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2848, Size: 0x4]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0xffffff90c89e5000
	void StopCameraShake(1c29c51cb3* ShakeInstance, bool bImmediately);// 0xffffff90c89e5002
	void StopCameraFade();// 0xffffff90c89e5000
	void StopCameraAnimInst(af8c01cac6* AnimInst, bool bImmediate);// 0xffffff90c89e5002
	void StopAllInstancesOfCameraShakeFromSource(class 1c29c51cb3 Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xffffff90c89e5003
	void StopAllInstancesOfCameraShake(class 1c29c51cb3 Shake, bool bImmediately);// 0xffffff90c89e5002
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0xffffff90c89e5002
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xffffff90c89e5002
	void StopAllCameraShakes(bool bImmediately);// 0xffffff90c89e5001
	void StopAllCameraAnims(bool bImmediate);// 0xffffff90c89e5001
	MatineeCameraShake* StartMatineeCameraShakeFromSource(class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff90c89e5006
	MatineeCameraShake* StartMatineeCameraShake(class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff90c89e5005
	1c29c51cb3* StartCameraShakeFromSource(class 1c29c51cb3 ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff90c89e5006
	1c29c51cb3* StartCameraShake(class 1c29c51cb3 ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff90c89e5005
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0xffffff90c89e5006
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0xffffff90c89e5003
	void SetGameCameraCutThisFrame();// 0xffffff90c89e5000
	bool RemoveCameraModifier(8e247eeffb* ModifierToRemove);// 0xffffff90c89e5002
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0xffffff90c89e5001
	af8c01cac6* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff90c89e500b
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0xffffff90c89e5004
	void OnPhotographySessionStart();// 0xffffff90c89e5000
	void OnPhotographySessionEnd();// 0xffffff90c89e5000
	void OnPhotographyMultiPartCaptureStart();// 0xffffff90c89e5000
	void OnPhotographyMultiPartCaptureEnd();// 0xffffff90c89e5000
	PlayerController* GetOwningPlayerController();// 0xffffff90c89e5001
	float GetFOVAngle();// 0xffffff90c89e5001
	Rotator GetCameraRotation();// 0xffffff90c89e5001
	Vector GetCameraLocation();// 0xffffff90c89e5001
	8e247eeffb* FindCameraModifierByClass(class 8e247eeffb ModifierClass);// 0xffffff90c89e5002
	void ClearCameraLensEffects();// 0xffffff90c89e5000
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xffffff90c89e5005
	8e247eeffb* AddNewCameraModifier(class 8e247eeffb ModifierClass);// 0xffffff90c89e5002
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xffffff90c89e5002

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareToggle;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareAtlasOffsets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSizes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareAtlasSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDownScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDepthDownScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBlurSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionSteps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float ToneCurveAmount;//[Offset: 0x180, Size: 0x4]
	float FilmSlope;//[Offset: 0x184, Size: 0x4]
	float FilmToe;//[Offset: 0x188, Size: 0x4]
	float FilmShoulder;//[Offset: 0x18c, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x190, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x194, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1c0, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 0x10]
	float FilmContrast;//[Offset: 0x1f4, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x200, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 0x4]
	float BloomIntensity;//[Offset: 0x21c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x220, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x224, Size: 0x4]
	float Bloom1Size;//[Offset: 0x228, Size: 0x4]
	float Bloom2Size;//[Offset: 0x22c, Size: 0x4]
	float Bloom3Size;//[Offset: 0x230, Size: 0x4]
	float Bloom4Size;//[Offset: 0x234, Size: 0x4]
	float Bloom5Size;//[Offset: 0x238, Size: 0x4]
	float Bloom6Size;//[Offset: 0x23c, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 0x4]
	float CameraISO;//[Offset: 0x304, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x314, Size: 0x4]
	float DefaultAutoExposureBias;//[Offset: 0x318, Size: 0x4]
	float 21f1a8d681;//[Offset: 0x31c, Size: 0x4]
	float 5de580c096;//[Offset: 0x320, Size: 0x4]
	bool 15dc339bc5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x328, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x330, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x338, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x33c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x340, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x344, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x348, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x34c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x350, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x354, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x358, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x35c, Size: 0x4]
	bool bUseLensFlareAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float LensFlareIntensityNormal;//[Offset: 0x364, Size: 0x4]
	float LensFlareIntensityOnAircraft;//[Offset: 0x368, Size: 0x4]
	float LensFlareAttenuationStartHeight;//[Offset: 0x36c, Size: 0x4]
	float LensFlareAttenuationDuration;//[Offset: 0x370, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x374, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x384, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x388, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x390, Size: 0x8]
	LinearColor[] LensFlareTints;//[Offset: 0x398, Size: 0x10]
	IntPoint[] 11b7d7fdca;//[Offset: 0x3a8, Size: 0x10]
	bool[] 4a789aca44;//[Offset: 0x3b8, Size: 0x10]
	bool[] 41063e0cfa;//[Offset: 0x3c8, Size: 0x10]
	Vector2D[] d32c660430;//[Offset: 0x3d8, Size: 0x10]
	float LensFlareBokehDistance;//[Offset: 0x3e8, Size: 0x4]
	int LensFlareAtlasSize;//[Offset: 0x3ec, Size: 0x4]
	float VignetteIntensity;//[Offset: 0x3f0, Size: 0x4]
	float GrainJitter;//[Offset: 0x3f4, Size: 0x4]
	float GrainIntensity;//[Offset: 0x3f8, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x3fc, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x400, Size: 0x4]
	float AmbientOcclusionFadeDistance;//[Offset: 0x404, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x408, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x40c, Size: 0x4]
	int AmbientOcclusionDownScale;//[Offset: 0x410, Size: 0x4]
	int AmbientOcclusionDepthDownScale;//[Offset: 0x414, Size: 0x4]
	int AmbientOcclusionBlurSize;//[Offset: 0x418, Size: 0x4]
	int AmbientOcclusionSteps;//[Offset: 0x41c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x420, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1]
	float AmbientOcclusionFadeRadius;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x434, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x438, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x440, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x448, Size: 0x4]
	float RayTracingAOIntensity;//[Offset: 0x44c, Size: 0x4]
	float RayTracingAORadius;//[Offset: 0x450, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x454, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x464, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x468, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x46c, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x470, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x474, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ac, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4b0, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4b4, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4b8, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4bc, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4c0, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4c4, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4c8, Size: 0x4]
	float LPVSize;//[Offset: 0x4cc, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4d0, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4d4, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d8, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4dc, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4e0, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4e4, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e8, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ec, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4f0, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4f4, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x4f8, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4fc, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x500, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x504, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x508, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x50c, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x510, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x514, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x515, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x516, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x518, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x51c, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x520, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x524, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x528, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x52c, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x530, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x534, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x538, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x540, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.638112bfc1.Object

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: c9d1258728
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	9f0e012e9c POV;//[Offset: 0x10, Size: 0x5e0]
	PlayerState* PlayerState;//[Offset: 0x5f0, Size: 0x8]

--------------------------------
Class: 9f0e012e9c
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x550]
	float AspectRatio;//[Offset: 0x590, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x594, Size: 0x4]
	float OrthoWidth;//[Offset: 0x598, Size: 0x4]
	Vector Location;//[Offset: 0x59c, Size: 0xc]
	float PostProcessBlendWeight;//[Offset: 0x5a8, Size: 0x4]
	float 4b01305fb1;//[Offset: 0x5ac, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b0, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b0, Size: 0x1]
	float OrthoNearClipPlane;//[Offset: 0x5b4, Size: 0x4]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5b8, Size: 0x8]
	byte ProjectionMode;//[Offset: 0x5c0, Size: 0x1]
	Rotator Rotation;//[Offset: 0x5c4, Size: 0xc]
	float FOV;//[Offset: 0x5d0, Size: 0x4]

--------------------------------
Class: PlayerState.Info.Actor.Object
	int PlayerId;//[Offset: 0x2ac, Size: 0x4]
	Pawn* PawnPrivate;//[Offset: 0x2b0, Size: 0x8]
	UniqueNetIdRepl UniqueId;//[Offset: 0x2b8, Size: 0x28]
	bool 435803aabc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 0x1]
	bool 0796813876;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 0x1]
	bool 7bb3caca51;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e0, Size: 0x1]
	bool 1a61dcc47b;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e0, Size: 0x1]
	int StartTime;//[Offset: 0x2f4, Size: 0x4]
	class 112ea71b06* 410ea45517;//[Offset: 0x308, Size: 0x8]
	float Score;//[Offset: 0x310, Size: 0x4]
	FString 2be1ed4a36;//[Offset: 0x318, Size: 0x10]
	byte Ping;//[Offset: 0x330, Size: 0x1]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xffffff90c89e5001
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xffffff90c89e5001
	void OnRep_UniqueId();// 0xffffff90c89e5000
	void OnRep_Score();// 0xffffff90c89e5000
	void OnRep_PlayerName();// 0xffffff90c89e5000
	void OnRep_PlayerId();// 0xffffff90c89e5000
	void OnRep_bIsInactive();// 0xffffff90c89e5000
	FString GetPlayerName();// 0xffffff90c89e5001

--------------------------------
Class: UniqueNetIdRepl.ee87b0411c
	byte[] 7f95c73e35;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ee87b0411c

--------------------------------
Class: 112ea71b06.Object

--------------------------------
Class: 10687dde7f
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	9f0e012e9c POV;//[Offset: 0x10, Size: 0x5e0]

--------------------------------
Class: 1c29c51cb3.Object
	PlayerCameraManager* CameraManager;//[Offset: 0xc0, Size: 0x8]
	float ShakeScale;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CameraActor.Actor.Object
	PostProcessSettings PostProcessSettings;//[Offset: 0x2b0, Size: 0x550]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x810, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x818, Size: 0x8]
	int GetAutoActivatePlayerIndex();// 0xffffff90c89e5001

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float AspectRatio;//[Offset: 0x290, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2a0, Size: 0x550]
	float FieldOfView;//[Offset: 0x810, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x814, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x814, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x814, Size: 0x1]
	float OrthoWidth;//[Offset: 0x818, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x850, Size: 0x4]
	byte ProjectionMode;//[Offset: 0x854, Size: 0x1]
	float OrthoFarClipPlane;//[Offset: 0x858, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x85c, Size: 0x4]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0xffffff90c89e5001
	void SetProjectionMode(byte InProjectionMode);// 0xffffff90c89e5001
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0xffffff90c89e5001
	void SetOrthoWidth(float InOrthoWidth);// 0xffffff90c89e5001
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0xffffff90c89e5001
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0xffffff90c89e5001
	void SetFieldOfView(float InFieldOfView);// 0xffffff90c89e5001
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0xffffff90c89e5001
	void SetAspectRatio(float InAspectRatio);// 0xffffff90c89e5001
	void RemoveBlendable(interface classNone InBlendableObject);// 0xffffff90c89e5001
	void OnCameraMeshHiddenChanged();// 0xffffff90c89e5000
	void GetCameraView(float DeltaTime, out 9f0e012e9c DesiredView);// 0xffffff90c89e5002
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xffffff90c89e5002

--------------------------------
Class: af8c01cac6.Object
	float PlayRate;//[Offset: 0x68, Size: 0x4]
	6d4676e0fb* 6d4676e0fb;//[Offset: 0xc0, Size: 0x8]
	8f4a6b634c* 43f86d120e;//[Offset: 0xc8, Size: 0x8]
	0170217033* 46b6cfa85a;//[Offset: 0xd8, Size: 0x8]
	CameraAnim* abaeb8dc60;//[Offset: 0xe0, Size: 0x8]
	enum PlaySpace;//[Offset: 0xe8, Size: 0x1]
	void Stop(bool bImmediate);// 0xffffff90c89e5001
	void SetScale(float NewDuration);// 0xffffff90c89e5001
	void SetDuration(float NewDuration);// 0xffffff90c89e5001

--------------------------------
Class: 6d4676e0fb.Object
	Actor* GroupActor;//[Offset: 0x68, Size: 0x8]
	4866c69594*[] bfc16cd746;//[Offset: 0x70, Size: 0x10]
	InterpGroup* Group;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: 4866c69594.Object

--------------------------------
Class: InterpGroup.Object
	FName GroupName;//[Offset: 0x70, Size: 0x8]
	e4400a65be*[] InterpTracks;//[Offset: 0x80, Size: 0x10]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool 369e006575;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool e94fd8dd70;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: e4400a65be.Object
	e4400a65be*[] SubTracks;//[Offset: 0x80, Size: 0x10]
	class 4866c69594* acf4a07e80;//[Offset: 0xa0, Size: 0x8]
	bool 4f8e9d4d50;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool 41ed153c41;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	bool da42657554;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1]
	bool c1ef31b63f;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]
	bool 3d12d33180;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1]
	bool a74c8ef92a;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: 8f4a6b634c.4866c69594.Object

--------------------------------
Class: 0170217033.e4400a65be.Object
	InterpCurveVector 32e75c237a;//[Offset: 0xb0, Size: 0x18]
	InterpCurveVector PosTrack;//[Offset: 0xd0, Size: 0x18]
	f4fa4aabc8 ceb85540c7;//[Offset: 0xf0, Size: 0x10]
	bool f2c3e95ba7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool 711841af0e;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool 3f748bde7a;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool e61bc4286d;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool ff10b5be04;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
	bool 7e8d785ed4;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x100, Size: 0x1]
	FName e8954c801d;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: f4fa4aabc8
	fc83b67b5e[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: fc83b67b5e
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraAnim.Object
	PostProcessSettings 9634871059;//[Offset: 0x90, Size: 0x550]
	bool 7a3c0b1590;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e0, Size: 0x1]
	bool fc79e6af97;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e0, Size: 0x1]
	InterpGroup* 2e2b8a3a4c;//[Offset: 0x5e8, Size: 0x8]

--------------------------------
Class: 4337f6934c.8e247eeffb.Object
	<class 1c29c51cb3,9d8afdbe5b> 55f8dc7cce;//[Offset: 0x88, Size: 0x50]
	6aa26aefdb[] 24979bc7f9;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: 8e247eeffb.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	float Alpha;//[Offset: 0x68, Size: 0x4]
	float AlphaInTime;//[Offset: 0x6c, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x70, Size: 0x4]
	PlayerCameraManager* CameraOwner;//[Offset: 0x78, Size: 0x8]
	byte Priority;//[Offset: 0x80, Size: 0x1]
	bool IsDisabled();// 0xffffff90c89e5001
	Actor* GetViewTarget();// 0xffffff90c89e5001
	void EnableModifier();// 0xffffff90c89e5000
	void DisableModifier(bool bImmediate);// 0xffffff90c89e5001
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xffffff90c89e5003
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xffffff90c89e5007

--------------------------------
Class: 9d8afdbe5b
	1c29c51cb3*[] 19d4bc2592;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 6aa26aefdb
	1c29c51cb3* 3fd8d32476;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* e2aa0141b4;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	class 1c29c51cb3* CameraShake;//[Offset: 0x298, Size: 0x8]
	float OuterAttenuationRadius;//[Offset: 0x2a0, Size: 0x4]
	float InnerAttenuationRadius;//[Offset: 0x2a4, Size: 0x4]
	enum Attenuation;//[Offset: 0x2a8, Size: 0x1]
	void StopAllCameraShakesOfType(class 1c29c51cb3 InCameraShake, bool bImmediately);// 0xffffff90c89e5002
	void StopAllCameraShakes(bool bImmediately);// 0xffffff90c89e5001
	void StartCameraShake(class 1c29c51cb3 InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff90c89e5004
	void Start();// 0xffffff90c89e5000
	float GetAttenuationFactor(out const Vector Location);// 0xffffff90c89e5002

--------------------------------
Class: MatineeCameraShake.1c29c51cb3.Object
	7adaf104d1 FOVOscillation;//[Offset: 0xd4, Size: 0xc]
	af8c01cac6* AnimInst;//[Offset: 0xe8, Size: 0x8]
	CameraAnim* Anim;//[Offset: 0x108, Size: 0x8]
	976ecf58df RotOscillation;//[Offset: 0x11c, Size: 0x24]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 0x1]
	float OscillatorTimeRemaining;//[Offset: 0x15c, Size: 0x4]
	4764e2d7e4 LocOscillation;//[Offset: 0x164, Size: 0x24]
	void ReceiveStopShake(bool bImmediately);// 0xffffff90c89e5001
	void ReceivePlayShake(float Scale);// 0xffffff90c89e5001
	bool ReceiveIsFinished();// 0xffffff90c89e5001
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const 9f0e012e9c POV, out 9f0e012e9c ModifiedPOV);// 0xffffff90c89e5004

--------------------------------
Class: 7adaf104d1
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: 976ecf58df
	7adaf104d1 Pitch;//[Offset: 0x0, Size: 0xc]
	7adaf104d1 Yaw;//[Offset: 0xc, Size: 0xc]
	7adaf104d1 Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: 4764e2d7e4
	7adaf104d1 X;//[Offset: 0x0, Size: 0xc]
	7adaf104d1 Y;//[Offset: 0xc, Size: 0xc]
	7adaf104d1 Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	Transform RelativeTransform;//[Offset: 0x300, Size: 0x30]
	class EmitterCameraLensEffectBase[] 2d0a9643d1;//[Offset: 0x330, Size: 0x10]
	ParticleSystem* 0811ccd6bf;//[Offset: 0x340, Size: 0x8]
	bool 67d8019442;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool e49bcbe833;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x350, Size: 0x8]
	PlayerCameraManager* d3817f31ec;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2a8, Size: 0x8]
	bool 9742ca0f68;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool 169f479dce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	delegate OnParticleDeath;//[Offset: 0x2b8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x2c8, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x2d8, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x2e8, Size: 0x10]
	void ToggleActive();// 0xffffff90c89e5000
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xffffff90c89e5002
	void SetTemplate(ParticleSystem* NewTemplate);// 0xffffff90c89e5001
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xffffff90c89e5002
	void SetFloatParameter(FName ParameterName, float Param);// 0xffffff90c89e5002
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xffffff90c89e5002
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xffffff90c89e5002
	void OnRep_bCurrentlyActive();// 0xffffff90c89e5000
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0xffffff90c89e5001
	bool IsActive();// 0xffffff90c89e5001
	void Deactivate();// 0xffffff90c89e5000
	void Activate();// 0xffffff90c89e5000

--------------------------------
Class: ParticleSystem.efe5f889cf.Object
	ParticleSystemComponent* 81a11fac75;//[Offset: 0x90, Size: 0x8]
	b9f822b5e4[] LODSettings;//[Offset: 0xb8, Size: 0x10]
	ba83a48ab8[] 8ffa81e74d;//[Offset: 0xd0, Size: 0x10]
	bool d3d91c1028;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool 4e5b4dfa54;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool 83f1dc0f52;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool cd5e10e6f1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool 12d1615d25;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool b898797736;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]
	bool 000b3a362f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x109, Size: 0x1]
	bool b5c9e8b110;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x109, Size: 0x1]
	bool 8d35213af2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x109, Size: 0x1]
	bool 9850550032;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x109, Size: 0x1]
	bool a515640659;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool 4aa3391526;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	ParticleEmitter*[] Emitters;//[Offset: 0x118, Size: 0x10]
	InterpCurveEdSetup* 47b771eeaa;//[Offset: 0x128, Size: 0x8]
	float[] LODDistances;//[Offset: 0x140, Size: 0x10]
	enum 4274e3b746;//[Offset: 0x150, Size: 0x1]
	6f37549947[] b6d5512a62;//[Offset: 0x158, Size: 0x10]
	enum 925bddb461;//[Offset: 0x168, Size: 0x1]
	bool ContainsEmitterType(class Object TypeData);// 0xffffff90c89e5002

--------------------------------
Class: efe5f889cf.Object

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnParticleBurst;//[Offset: 0x580, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x591, Size: 0x1]
	bool 5c770809a1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x591, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x591, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x591, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x591, Size: 0x1]
	bool b87117b913;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x592, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x592, Size: 0x1]
	bool be722cfe47;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x592, Size: 0x1]
	bool a11b007bbb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ac, Size: 0x1]
	byte LODMethod;//[Offset: 0x5ad, Size: 0x1]
	enum fdfd3b418d;//[Offset: 0x5ae, Size: 0x1]
	delegate OnParticleCollide;//[Offset: 0x5c0, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x5d8, Size: 0x10]
	ParticleSystem* Template;//[Offset: 0x628, Size: 0x8]
	317fb3b125*[] bad21d61b8;//[Offset: 0x630, Size: 0x10]
	delegate OnSystemFinished;//[Offset: 0x640, Size: 0x10]
	enum AutoAttachRotationRule;//[Offset: 0x650, Size: 0x1]
	SceneComponent* AutoAttachParent;//[Offset: 0x660, Size: 0x20]
	enum AutoAttachLocationRule;//[Offset: 0x6c0, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6f0, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x740, Size: 0x4]
	MaterialInterface*[] f0c2818a15;//[Offset: 0x748, Size: 0x10]
	enum AutoAttachScaleRule;//[Offset: 0x76c, Size: 0x1]
	FName AutoAttachSocketName;//[Offset: 0x790, Size: 0x8]
	SkeletalMeshComponent*[] 575e727856;//[Offset: 0x798, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x7e0, Size: 0x10]
	float SecondsBeforeInactive;//[Offset: 0x7f0, Size: 0x4]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xffffff90c89e5004
	void SetTemplate(ParticleSystem* NewTemplate);// 0xffffff90c89e5001
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xffffff90c89e5002
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0xffffff90c89e5003
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0xffffff90c89e5003
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0xffffff90c89e5003
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0xffffff90c89e5003
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0xffffff90c89e5003
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0xffffff90c89e5003
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0xffffff90c89e5002
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0xffffff90c89e5003
	int GetNumActiveParticles();// 0xffffff90c89e5001
	MaterialInterface* GetNamedMaterial(FName InName);// 0xffffff90c89e5002
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0xffffff90c89e5004
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0xffffff90c89e5004
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0xffffff90c89e5004
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0xffffff90c89e5004
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0xffffff90c89e5004
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0xffffff90c89e5004
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0xffffff90c89e5003
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0xffffff90c89e5005
	void EndTrails();// 0xffffff90c89e5000
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0xffffff90c89e5003
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xffffff90c89e5004

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xffffff90c89e5002
	void SetUseAutoManageAttachment(bool bAutoManage);// 0xffffff90c89e5001
	void SetIntParameter(FName ParameterName, int Param);// 0xffffff90c89e5002
	void SetFloatParameter(FName ParameterName, float Param);// 0xffffff90c89e5002
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0xffffff90c89e5002
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xffffff90c89e5002
	void SetBoolParameter(FName ParameterName, bool Param);// 0xffffff90c89e5002
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0xffffff90c89e5005
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xffffff90c89e5002
	void ReleaseToPool();// 0xffffff90c89e5000
	efe5f889cf* GetFXSystemAsset();// 0xffffff90c89e5001

--------------------------------
Class: 317fb3b125.Object
	int 864cb4e557;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform[] 3423c1986e;//[Offset: 0x948, Size: 0x10]
	Transform[] 1cbbe7dfb9;//[Offset: 0x978, Size: 0x10]
	float TeleportDistanceThreshold;//[Offset: 0x998, Size: 0x4]
	float AreaStiffness;//[Offset: 0x9a0, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x9f8, Size: 0x4]
	float GlobalAnimRateScale;//[Offset: 0xa00, Size: 0x4]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa40, Size: 0x1]
	bool 561ad523ae;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa40, Size: 0x1]
	bool 5b7a85db4d;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa40, Size: 0x1]
	bool bd43f04a6e;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa40, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa40, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa40, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa41, Size: 0x1]
	bool 6dc484552e;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa58, Size: 0x1]
	bool 0a408429d7;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa58, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa58, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa59, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa59, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa59, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa59, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa59, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa59, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa59, Size: 0x1]
	bool 020e7a8b0b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5a, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5a, Size: 0x1]
	bool 0663508d38;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa5a, Size: 0x1]
	bool 2e57a976bc;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa5a, Size: 0x1]
	bool ff7f6eaa19;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa5a, Size: 0x1]
	bool 3023bed44a;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa5a, Size: 0x1]
	bool 4f6c8d285a;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa5a, Size: 0x1]
	bool f11293706b;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa5a, Size: 0x1]
	bool 05f5e8889c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5b, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5b, Size: 0x1]
	bool d226a7bffc;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa5b, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa5b, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa5b, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa5b, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa5b, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa5b, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5c, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5c, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa5c, Size: 0x1]
	bool 0fe2914d0c;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa5c, Size: 0x1]
	AnimInstance*[] LinkedInstances;//[Offset: 0xa60, Size: 0x10]
	AnimInstance* 190432bfef;//[Offset: 0xa70, Size: 0x8]
	AnimInstance*[] 8093cfa774;//[Offset: 0xa78, Size: 0x10]
	FName[] e0ce72bd87;//[Offset: 0xa88, Size: 0x10]
	float Density;//[Offset: 0xa98, Size: 0x4]
	uint32 e7455bcd72;//[Offset: 0xd14, Size: 0x4]
	float VolumeStiffness;//[Offset: 0xd58, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xd60, Size: 0x8]
	8b15d9c47d* 3a499508cd;//[Offset: 0xda0, Size: 0x8]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0xda8, Size: 0x8]
	byte AnimationMode;//[Offset: 0xdc8, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0xdc9, Size: 0x1]
	float EdgeStiffness;//[Offset: 0xdd8, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0xe30, Size: 0x4]
	delegate OnConstraintBroken;//[Offset: 0xe38, Size: 0x10]
	float MinPerParticleMass;//[Offset: 0xe48, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0xe4c, Size: 0x1]
	float StrainLimitingStiffness;//[Offset: 0xee4, Size: 0x4]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 0x1]
	Vector c451c75707;//[Offset: 0xeec, Size: 0xc]
	float UniformMass;//[Offset: 0xf10, Size: 0x4]
	enum MassMode;//[Offset: 0xf18, Size: 0x1]
	float BendingStiffness;//[Offset: 0xf1c, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0xf20, Size: 0x4]
	uint16 3977fde2db;//[Offset: 0xf30, Size: 0x2]
	9e71cdf1e8 AnimationData;//[Offset: 0xfd0, Size: 0x18]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x1118, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x1120, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0x1130, Size: 0x10]
	float TotalMass;//[Offset: 0x1140, Size: 0x4]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xffffff90c89e5001
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0xffffff90c89e5001
	void ToggleDisablePostProcessBlueprint();// 0xffffff90c89e5000
	void TermBodiesBelow(FName ParentBoneName);// 0xffffff90c89e5001
	void SuspendClothingSimulation();// 0xffffff90c89e5000
	void Stop();// 0xffffff90c89e5000
	void SnapshotPose(out 2a0a41cece Snapshot);// 0xffffff90c89e5001
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0xffffff90c89e5001
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0xffffff90c89e5001
	void SetTeleportRotationThreshold(float Threshold);// 0xffffff90c89e5001
	void SetTeleportDistanceThreshold(float Threshold);// 0xffffff90c89e5001
	void SetPosition(float InPos, bool bFireNotifies);// 0xffffff90c89e5002
	void SetPlayRate(float Rate);// 0xffffff90c89e5001
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0xffffff90c89e5001
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0xffffff90c89e5003
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0xffffff90c89e5003
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0xffffff90c89e5001
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0xffffff90c89e5003
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0xffffff90c89e5002
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0xffffff90c89e5001
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0xffffff90c89e5001
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0xffffff90c89e5002
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0xffffff90c89e5003
	void SetClothMaxDistanceScale(float Scale);// 0xffffff90c89e5001
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0xffffff90c89e5002
	void SetAnimClass(class Object NewClass);// 0xffffff90c89e5001
	void SetAnimationMode(byte InAnimationMode);// 0xffffff90c89e5001
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0xffffff90c89e5001
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0xffffff90c89e5004
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0xffffff90c89e5002
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0xffffff90c89e5002
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0xffffff90c89e5001
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xffffff90c89e5003
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xffffff90c89e5003
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0xffffff90c89e5004
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0xffffff90c89e5001
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xffffff90c89e5002
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0xffffff90c89e5003
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0xffffff90c89e5004
	void ResumeClothingSimulation();// 0xffffff90c89e5000
	void ResetClothTeleportMode();// 0xffffff90c89e5000
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0xffffff90c89e5001
	void ResetAllowedAnimCurveEvaluation();// 0xffffff90c89e5000
	void ResetAllBodiesSimulatePhysics();// 0xffffff90c89e5000
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0xffffff90c89e5002
	void Play(bool bLooping);// 0xffffff90c89e5001
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0xffffff90c89e5005
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xffffff90c89e5002
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xffffff90c89e5001
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0xffffff90c89e5006
	bool IsPlaying();// 0xffffff90c89e5001
	bool IsClothingSimulationSuspended();// 0xffffff90c89e5001
	bool IsBodyGravityEnabled(FName BoneName);// 0xffffff90c89e5002
	bool HasValidAnimationInstance();// 0xffffff90c89e5001
	float GetTeleportRotationThreshold();// 0xffffff90c89e5001
	float GetTeleportDistanceThreshold();// 0xffffff90c89e5001
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0xffffff90c89e5005
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0xffffff90c89e5006
	Vector GetSkeletalCenterOfMass();// 0xffffff90c89e5001
	AnimInstance*[] GetPostProcessInstances();// 0xffffff90c89e5001
	float GetPosition();// 0xffffff90c89e5001
	float GetPlayRate();// 0xffffff90c89e5001
	float GetMorphTarget(FName MorphTargetName);// 0xffffff90c89e5002
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xffffff90c89e5002
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xffffff90c89e5002
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xffffff90c89e5002
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xffffff90c89e5002
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0xffffff90c89e5005
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0xffffff90c89e5006
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0xffffff90c89e5005
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0xffffff90c89e5006
	bool GetDisablePostProcessBlueprint();// 0xffffff90c89e5001
	bool GetDisableAnimCurves();// 0xffffff90c89e5001
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0xffffff90c89e5004
	float GetClothMaxDistanceScale();// 0xffffff90c89e5001
	8b15d9c47d* GetClothingSimulationInteractor();// 0xffffff90c89e5001
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0xffffff90c89e5003
	AnimInstance* GetAnimInstance();// 0xffffff90c89e5001
	class Object GetAnimClass();// 0xffffff90c89e5001
	byte GetAnimationMode();// 0xffffff90c89e5001
	bool GetAllowRigidBodyAnimNode();// 0xffffff90c89e5001
	bool GetAllowedAnimCurveEvaluate();// 0xffffff90c89e5001
	void ForceClothNextUpdateTeleportAndReset();// 0xffffff90c89e5000
	void ForceClothNextUpdateTeleport();// 0xffffff90c89e5000
	FName FindConstraintBoneName(int ConstraintIndex);// 0xffffff90c89e5002
	void ClearMorphTargets();// 0xffffff90c89e5000
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0xffffff90c89e5003
	void BindClothToMasterPoseComponent();// 0xffffff90c89e5000
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0xffffff90c89e5002
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0xffffff90c89e5004
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0xffffff90c89e5004
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xffffff90c89e5003

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MinLodModel;//[Offset: 0x590, Size: 0x4]
	int ForcedLodModel;//[Offset: 0x5a0, Size: 0x4]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5a4, Size: 0x4]
	54ec12850a[] LODInfo;//[Offset: 0x5a8, Size: 0x10]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x5e8, Size: 0x10]
	enum[] SkinCacheUsage;//[Offset: 0x5f8, Size: 0x10]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x6b8, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x728, Size: 0x20]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x769, Size: 0x1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x769, Size: 0x1]
	bool bOverrideEnableDistanceCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x769, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x769, Size: 0x1]
	bool 5e64dc7e44;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x769, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76a, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76a, Size: 0x1]
	bool 98c56e4602;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76a, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76a, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76a, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76a, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76a, Size: 0x1]
	bool 9e5632ea2d;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76a, Size: 0x1]
	bool 7b67902fd3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76b, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76b, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76b, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76b, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76b, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76b, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76b, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76b, Size: 0x1]
	bool 8b1287c84e;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76c, Size: 0x1]
	bool 0bb19795b7;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76c, Size: 0x1]
	bool bIgnoreLODBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76d, Size: 0x1]
	float StreamingDistanceMultiplier;//[Offset: 0x770, Size: 0x4]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x778, Size: 0x1]
	BoxSphereBounds ceaa1697e4;//[Offset: 0x77c, Size: 0x1c]
	Matrix 0004a58ed1;//[Offset: 0x7a0, Size: 0x40]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x7e0, Size: 0x8]
	void UnloadSkinWeightProfile(FName InProfileName);// 0xffffff90c89e5001
	void UnHideBoneByName(FName BoneName);// 0xffffff90c89e5001
	Vector TransformToRefLocalLocation(out const FName BoneName, out const Vector WorldLocation);// 0xffffff90c89e5003
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xffffff90c89e5005
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xffffff90c89e5005
	void ShowMaterialSection(int MaterialID, int SectionIndex, enum HiddenType, int LODIndex);// 0xffffff90c89e5004
	void ShowAllMaterialSections(int LODIndex);// 0xffffff90c89e5001
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0xffffff90c89e5002
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0xffffff90c89e5002
	bool SetSkinWeightProfile(FName InProfileName);// 0xffffff90c89e5002
	void SetSkinWeightOverride(int LODIndex, out const a23c95dd8f[] SkinWeights);// 0xffffff90c89e5002
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0xffffff90c89e5002
	void SetRenderStatic(bool bNewValue);// 0xffffff90c89e5001
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xffffff90c89e5002
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xffffff90c89e5002
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0xffffff90c89e5002
	void SetMinLOD(int InNewMinLOD);// 0xffffff90c89e5001
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0xffffff90c89e5002
	void SetForcedLOD(int InNewForcedLOD);// 0xffffff90c89e5001
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0xffffff90c89e5001
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0xffffff90c89e5001
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0xffffff90c89e5001
	bool IsUsingSkinWeightProfile();// 0xffffff90c89e5001
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0xffffff90c89e5003
	bool IsBoneHiddenByName(FName BoneName);// 0xffffff90c89e5002
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0xffffff90c89e5002
	int GetVertexOffsetUsage(int LODIndex);// 0xffffff90c89e5002
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0xffffff90c89e5004
	FName GetSocketBoneName(FName InSocketName);// 0xffffff90c89e5002
	Vector GetRefPosePosition(int BoneIndex);// 0xffffff90c89e5002
	Transform GetRefPoseBoneTransform(FName BoneName);// 0xffffff90c89e5002
	FName GetParentBone(FName BoneName);// 0xffffff90c89e5002
	int GetNumLODs();// 0xffffff90c89e5001
	int GetNumBones();// 0xffffff90c89e5001
	int GetForcedLOD();// 0xffffff90c89e5001
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0xffffff90c89e5003
	FName GetCurrentSkinWeightProfileName();// 0xffffff90c89e5001
	Transform GetBoneTransform(FName BoneName);// 0xffffff90c89e5002
	FName GetBoneName(int BoneIndex);// 0xffffff90c89e5002
	int GetBoneIndex(FName BoneName);// 0xffffff90c89e5002
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0xffffff90c89e5005
	void ClearVertexColorOverride(int LODIndex);// 0xffffff90c89e5001
	void ClearSkinWeightProfile();// 0xffffff90c89e5000
	void ClearSkinWeightOverride(int LODIndex);// 0xffffff90c89e5001
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0xffffff90c89e5003

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x560, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0xffffff90c89e5002
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0xffffff90c89e5002
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xffffff90c89e5003
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xffffff90c89e5002
	FName[] GetMaterialSlotNames();// 0xffffff90c89e5001
	MaterialInterface*[] GetMaterials();// 0xffffff90c89e5001
	int GetMaterialIndex(FName MaterialSlotName);// 0xffffff90c89e5002

--------------------------------
Class: 54ec12850a
	byte[] def7bc0df3;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: a23c95dd8f
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkeletalMesh.638112bfc1.Object
	BodySetup* BodySetup;//[Offset: 0xd0, Size: 0x8]
	PerPlatformInt MinLOD;//[Offset: 0xd8, Size: 0x4]
	BoxSphereBounds dcddaeee62;//[Offset: 0xdc, Size: 0x1c]
	MorphTarget*[] MorphTargets;//[Offset: 0xf8, Size: 0x10]
	Vector NegativeBoundsExtension;//[Offset: 0x108, Size: 0xc]
	625c38b6ec*[] NodeMappingData;//[Offset: 0x128, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x198, Size: 0x10]
	68e1119bc0 SamplingInfo;//[Offset: 0x1a8, Size: 0x30]
	bool bEnableDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 0x1]
	bool 07499374b1;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 0x1]
	bool b4e799b528;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9, Size: 0x1]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	float e4113fd5ea;//[Offset: 0x234, Size: 0x4]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x240, Size: 0x8]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x248, Size: 0x10]
	2fadb2f8c6[] fca938a5e0;//[Offset: 0x258, Size: 0x10]
	f2cb64951e[] Materials;//[Offset: 0x268, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x278, Size: 0x10]
	Skeleton* Skeleton;//[Offset: 0x288, Size: 0x8]
	class AnimInstance[] 09c99c4c4c;//[Offset: 0x290, Size: 0x10]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x2a0, Size: 0x1]
	Vector PositiveBoundsExtension;//[Offset: 0x400, Size: 0xc]
	BoxSphereBounds 0b51db210d;//[Offset: 0x40c, Size: 0x1c]
	AssetUserData*[] AssetUserData;//[Offset: 0x428, Size: 0x10]
	float CullingScreenSize;//[Offset: 0x438, Size: 0x4]
	734fa27c0b*[] MeshClothingAssets;//[Offset: 0x440, Size: 0x10]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x450, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x458, Size: 0x8]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0xffffff90c89e5001
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0xffffff90c89e5001
	int NumSockets();// 0xffffff90c89e5001
	FString[] K2_GetAllMorphTargetNames();// 0xffffff90c89e5001
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0xffffff90c89e5003
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0xffffff90c89e5002
	625c38b6ec* GetNodeMappingContainer(Blueprint* SourceAsset);// 0xffffff90c89e5002
	BoxSphereBounds GetImportedBounds();// 0xffffff90c89e5001
	Object* GetDefaultAnimatingRig();// 0xffffff90c89e5001
	BoxSphereBounds GetBounds();// 0xffffff90c89e5001
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0xffffff90c89e5005
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0xffffff90c89e5003
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0xffffff90c89e5002

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* 1ecc4d9043;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: 625c38b6ec.Object
	<FName,FName> b56bab8300;//[Offset: 0x68, Size: 0x50]
	<FName,55342939c4> 9998f8d42f;//[Offset: 0xb8, Size: 0x50]
	Object* e1b01e53fa;//[Offset: 0x108, Size: 0x40]
	Object* SourceAsset;//[Offset: 0x148, Size: 0x40]
	<FName,55342939c4> 7136fad798;//[Offset: 0x188, Size: 0x50]

--------------------------------
Class: 55342939c4
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt 59bb16ec5d;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: 68e1119bc0
	96c762f4b9[] Regions;//[Offset: 0x0, Size: 0x10]
	80392e455e fe621a28ba;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: 96c762f4b9
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] 00cde12fa7;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] e8d4d8dac7;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool 2917680676;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: 80392e455e
	320551ce62[] 7b97082d51;//[Offset: 0x0, Size: 0x10]
	0f9421a794[] 796a170fd9;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: 320551ce62

--------------------------------
Class: 0f9421a794

--------------------------------
Class: AnimInstance.Object
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool 8f77b183d9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	bool cd52beb2da;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool 4aa018f851;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88, Size: 0x1]
	bool 3dc9c8e041;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x88, Size: 0x1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0xf8, Size: 0x10]
	674d0a3af0 1986c1ad26;//[Offset: 0x1d0, Size: 0x70]
	delegate OnMontageBlendingOut;//[Offset: 0x248, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x258, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x268, Size: 0x10]
	Skeleton* CurrentSkeleton;//[Offset: 0x290, Size: 0x8]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0xffffff90c89e5002
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xffffff90c89e5001
	Pawn* TryGetPawnOwner();// 0xffffff90c89e5001
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0xffffff90c89e5002
	void SnapshotPose(out 2a0a41cece Snapshot);// 0xffffff90c89e5001
	void SetRootMotionMode(byte Value);// 0xffffff90c89e5001
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0xffffff90c89e5001
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0xffffff90c89e5001
	void SetMorphTarget(FName MorphTargetName, float Value);// 0xffffff90c89e5002
	void SavePoseSnapshot(FName SnapshotName);// 0xffffff90c89e5001
	void ResetDynamics(enum InTeleportType);// 0xffffff90c89e5001
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0xffffff90c89e5009
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0xffffff90c89e5007
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0xffffff90c89e5002
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0xffffff90c89e5002
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0xffffff90c89e5002
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0xffffff90c89e5002
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0xffffff90c89e5003
	void Montage_Resume(const AnimMontage* Montage);// 0xffffff90c89e5001
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0xffffff90c89e5006
	void Montage_Pause(const AnimMontage* Montage);// 0xffffff90c89e5001
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0xffffff90c89e5002
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0xffffff90c89e5002
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0xffffff90c89e5002
	bool Montage_IsActive(const AnimMontage* Montage);// 0xffffff90c89e5002
	float Montage_GetPosition(const AnimMontage* Montage);// 0xffffff90c89e5002
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0xffffff90c89e5002
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0xffffff90c89e5002
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0xffffff90c89e5002
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0xffffff90c89e5002
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0xffffff90c89e5002
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xffffff90c89e5002
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xffffff90c89e5001
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0xffffff90c89e5005
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0xffffff90c89e5003
	bool IsAnyMontagePlaying();// 0xffffff90c89e5001
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0xffffff90c89e5003
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0xffffff90c89e5004
	940902d626 GetSyncGroupPosition(FName InSyncGroupName);// 0xffffff90c89e5002
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0xffffff90c89e5003
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0xffffff90c89e5003
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0xffffff90c89e5003
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0xffffff90c89e5003
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0xffffff90c89e5003
	bool GetReceiveNotifiesFromLinkedInstances();// 0xffffff90c89e5001
	bool GetPropagateNotifiesToLinkedInstances();// 0xffffff90c89e5001
	SkeletalMeshComponent* GetOwningComponent();// 0xffffff90c89e5001
	Actor* GetOwningActor();// 0xffffff90c89e5001
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0xffffff90c89e5002
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0xffffff90c89e5003
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xffffff90c89e5002
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xffffff90c89e5002
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xffffff90c89e5002
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xffffff90c89e5002
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0xffffff90c89e5003
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0xffffff90c89e5003
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0xffffff90c89e5003
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0xffffff90c89e5003
	float GetInstanceMachineWeight(int MachineIndex);// 0xffffff90c89e5002
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0xffffff90c89e5002
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0xffffff90c89e5002
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0xffffff90c89e5002
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0xffffff90c89e5002
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0xffffff90c89e5002
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0xffffff90c89e5002
	float GetCurveValue(FName CurveName);// 0xffffff90c89e5002
	FName GetCurrentStateName(int MachineIndex);// 0xffffff90c89e5002
	AnimMontage* GetCurrentActiveMontage();// 0xffffff90c89e5001
	void GetAllCurveNames(out FName[] OutNames);// 0xffffff90c89e5001
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0xffffff90c89e5002
	void ClearMorphTargets();// 0xffffff90c89e5000
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0xffffff90c89e5003
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xffffff90c89e5001
	void BlueprintPostEvaluateAnimation();// 0xffffff90c89e5000
	void BlueprintLinkedAnimationLayersInitialized();// 0xffffff90c89e5000
	void BlueprintInitializeAnimation();// 0xffffff90c89e5000
	void BlueprintBeginPlay();// 0xffffff90c89e5000

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float a4d8fbe2f9;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool 1b5d158dfa;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* 215b2707f9;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte f2de125869;//[Offset: 0x18, Size: 0x1]
	byte 67933cd52c;//[Offset: 0x19, Size: 0x1]
	float 13f0603bde;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float 8632744978;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* 1132124984;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff90c89e5003
	FString GetNotifyName();// 0xffffff90c89e5001

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0xc0, Size: 0x10]
	float SequenceLength;//[Offset: 0xd4, Size: 0x4]
	bccda4b976 82f6cdc779;//[Offset: 0xd8, Size: 0x10]
	float GetPlayLength();// 0xffffff90c89e5001

--------------------------------
Class: AnimationAsset.Object
	fe8e67460b*[] MetaData;//[Offset: 0x98, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0xa8, Size: 0x10]
	Skeleton* Skeleton;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: bccda4b976
	FloatCurve[] 1cfa8d3a9e;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int ae9180414a;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: fe8e67460b.Object

--------------------------------
Class: Skeleton.Object
	1164e83f47[] VirtualBones;//[Offset: 0x270, Size: 0x10]
	BlendProfile*[] dd294c3991;//[Offset: 0x2d0, Size: 0x10]
	346842d564[] 1fb3c2b48f;//[Offset: 0x2e0, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x340, Size: 0x10]
	0012013a7d 77f851d1dc;//[Offset: 0x378, Size: 0x50]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x3c8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3d8, Size: 0x10]
	9924569aaa[] e6740061dd;//[Offset: 0x3e8, Size: 0x10]

--------------------------------
Class: 1164e83f47
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName 9a0391d1ce;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BlendProfile.Object
	50a708a5e4[] 1fdd6b7e9e;//[Offset: 0x70, Size: 0x10]
	Skeleton* b163e61d5b;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: 50a708a5e4
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float c85324d664;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: 346842d564
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 0012013a7d

--------------------------------
Class: SkeletalMeshSocket.Object
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	FName SocketName;//[Offset: 0x68, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x70, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x7c, Size: 0xc]
	FName BoneName;//[Offset: 0x88, Size: 0x8]
	Rotator RelativeRotation;//[Offset: 0x90, Size: 0xc]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0xffffff90c89e5003
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0xffffff90c89e5002

--------------------------------
Class: 9924569aaa
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte 6042067c66;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0xffffff90c89e5004
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff90c89e5003
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0xffffff90c89e5004
	FString GetNotifyName();// 0xffffff90c89e5001

--------------------------------
Class: AnimMontage.3d123a622f.AnimSequenceBase.AnimationAsset.Object
	BranchingPoint[] BranchingPoints;//[Offset: 0xe8, Size: 0x10]
	FName SyncGroup;//[Offset: 0xf8, Size: 0x8]
	86985cf582 86985cf582;//[Offset: 0x108, Size: 0x28]
	CompositeSection[] a7f019a823;//[Offset: 0x130, Size: 0x10]
	8260300b59 0c78c7a359;//[Offset: 0x148, Size: 0x20]
	56acc37980[] 6172499459;//[Offset: 0x170, Size: 0x10]
	4a3500145d 4599957e2a;//[Offset: 0x180, Size: 0x30]
	4a3500145d cbb0793029;//[Offset: 0x1b8, Size: 0x30]
	00d6a5bb35[] a3cb97bf09;//[Offset: 0x1e8, Size: 0x10]
	FName d1b725d850;//[Offset: 0x1fc, Size: 0x8]
	int[] ec9c4c4195;//[Offset: 0x208, Size: 0x10]
	float GetDefaultBlendOutTime();// 0xffffff90c89e5001

--------------------------------
Class: 3d123a622f.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float a4d8fbe2f9;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: 86985cf582
	float 770fbeff4d;//[Offset: 0x0, Size: 0x4]
	float 5fc0d77529;//[Offset: 0x4, Size: 0x4]
	9470f625f9[] Markers;//[Offset: 0x8, Size: 0x10]
	float aab53c54f5;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: 9470f625f9
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	fe8e67460b*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: 8260300b59
	f3a67b78bd[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: f3a67b78bd
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 56acc37980
	int fa8125567a;//[Offset: 0x0, Size: 0x4]
	float 4517ccc4b8;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: 4a3500145d
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: 00d6a5bb35
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] 5a35767350;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: 674d0a3af0
	16750eba46[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,cdb9397c7c> 89887d1e16;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: 16750eba46
	Object* 97aebfa4d0;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: cdb9397c7c
	16750eba46[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 2a0a41cece
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: 940902d626
	FName f67bfcd287;//[Offset: 0x0, Size: 0x8]
	FName 49d128ccff;//[Offset: 0x8, Size: 0x8]
	float 2a962eeffb;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x74, Size: 0x4]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x78, Size: 0x4]
	PerPlatformInt MinLOD;//[Offset: 0x7c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x80, Size: 0x10]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x90, Size: 0x1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x91, Size: 0x1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float dbd9b145d1;//[Offset: 0x4, Size: 0x4]
	enum a446beeab9;//[Offset: 0x8, Size: 0x1]
	b21f140591[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] 70021d8db3;//[Offset: 0x20, Size: 0x10]
	float d687040cff;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: b21f140591
	bool 71849673e9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	fc31903f63[] 5474318238;//[Offset: 0xe8, Size: 0x10]
	4628bd8da0* CurveCompressionSettings;//[Offset: 0x100, Size: 0x8]
	AnimSequence* b5702131f2;//[Offset: 0x108, Size: 0x8]
	8b94c4c44e* BoneCompressionSettings;//[Offset: 0x118, Size: 0x8]
	e068c609ef[] 95b1702de9;//[Offset: 0x128, Size: 0x10]
	FName RetargetSource;//[Offset: 0x138, Size: 0x8]
	f3a67b78bd[] AuthoredSyncMarkers;//[Offset: 0x160, Size: 0x10]
	enum Interpolation;//[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: fc31903f63
	int 520feaaba5;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: 4628bd8da0.Object
	caf4f544b4* Codec;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: caf4f544b4.Object

--------------------------------
Class: 8b94c4c44e.Object
	fadfb46608*[] Codecs;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: fadfb46608.Object

--------------------------------
Class: e068c609ef
	int 520feaaba5;//[Offset: 0x0, Size: 0x4]
	8185db71b0[] StringAttributes;//[Offset: 0x8, Size: 0x10]
	61ccbc2565[] 36513aae56;//[Offset: 0x18, Size: 0x10]
	8925646f5d[] FloatAttributes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: 8185db71b0
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: StringCurve.34f697d219
	FString DefaultValue;//[Offset: 0x68, Size: 0x10]
	cd3247efd0[] Keys;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: cd3247efd0
	float Time;//[Offset: 0x0, Size: 0x4]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 61ccbc2565
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	IntegralCurve 259603f2c8;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: IntegralCurve.34f697d219
	d8e6a23e62[] Keys;//[Offset: 0x68, Size: 0x10]
	int DefaultValue;//[Offset: 0x78, Size: 0x4]
	bool b375ac668e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: d8e6a23e62
	float Time;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 8925646f5d
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: SimpleCurve.eea7c66749.34f697d219
	byte InterpMode;//[Offset: 0x6e, Size: 0x1]
	344358190b[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: 344358190b
	float Time;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float a5ccb37eff;//[Offset: 0x8, Size: 0x4]
	uint32 7e1cd41330;//[Offset: 0xc, Size: 0x4]
	uint32 3d43c5a1f1;//[Offset: 0x10, Size: 0x4]
	float 7e803c0576;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool 2c0653febb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool f9ad261cc5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool c42eb50cd2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool dbe6bffe8a;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: 2fadb2f8c6
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte ad04d39601;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: f2cb64951e
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	be45415f38 UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float dbd9b145d1;//[Offset: 0x4, Size: 0x4]
	int[] 50abbd010e;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] cb7952a064;//[Offset: 0x68, Size: 0x10]
	BoneReference[] 70021d8db3;//[Offset: 0x78, Size: 0x10]
	float d687040cff;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* b37e99970e;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool 07499374b1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool 4a4f44c07f;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: 734fa27c0b.Object

--------------------------------
Class: PhysicsAsset.Object
	int[] 74f74ec5d9;//[Offset: 0x70, Size: 0x10]
	SkeletalBodySetup*[] bcbd6778d9;//[Offset: 0xd0, Size: 0x10]
	BodySetup*[] BodySetup;//[Offset: 0xe0, Size: 0x10]
	bool 9d41536197;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	1818d3a16a* 1818d3a16a;//[Offset: 0xf8, Size: 0x8]
	PhysicsConstraintTemplate*[] 299542a4b8;//[Offset: 0x150, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x160, Size: 0x1c]

--------------------------------
Class: SkeletalBodySetup.BodySetup.a9b258c83a.Object
	PhysicalAnimationProfile[] eee84e80ec;//[Offset: 0x320, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	eee84e80ec eee84e80ec;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: eee84e80ec
	FName 7f4d84802a;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: 1818d3a16a.Object

--------------------------------
Class: PhysicsConstraintTemplate.Object
	81c1cebd68 DefaultProfile;//[Offset: 0x64, Size: 0x10c]
	ConstraintInstance DefaultInstance;//[Offset: 0x170, Size: 0x1c0]
	1f0d7aac18[] d1f1d4c96d;//[Offset: 0x330, Size: 0x10]

--------------------------------
Class: 81c1cebd68
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float cb41d11e57;//[Offset: 0x8, Size: 0x4]
	float 28bd1666fb;//[Offset: 0xc, Size: 0x4]
	float b0d15e86ed;//[Offset: 0x10, Size: 0x4]
	float df2b7239e8;//[Offset: 0x14, Size: 0x4]
	432503f418 LinearLimit;//[Offset: 0x18, Size: 0x1c]
	b14158369b 21b23296b2;//[Offset: 0x34, Size: 0x20]
	ea8dfd7980 TwistLimit;//[Offset: 0x54, Size: 0x1c]
	c88a14bda2 61345d1442;//[Offset: 0x70, Size: 0x4c]
	21a06b1fd8 bf5254d486;//[Offset: 0xbc, Size: 0x4c]
	bool 6615d47141;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool b77e29b3de;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool 8ddfc6b159;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]

--------------------------------
Class: 432503f418.12a4a3b72d
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte 70eaa6abf6;//[Offset: 0x18, Size: 0x1]
	byte ee785c1b2c;//[Offset: 0x19, Size: 0x1]
	byte 78be5d635f;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: 12a4a3b72d
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: b14158369b.12a4a3b72d
	float 0c802b4d75;//[Offset: 0x14, Size: 0x4]
	float ace46bd142;//[Offset: 0x18, Size: 0x4]
	byte 01a8065db1;//[Offset: 0x1c, Size: 0x1]
	byte 07635e2b13;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: ea8dfd7980.12a4a3b72d
	float f3d5c787ce;//[Offset: 0x14, Size: 0x4]
	byte af20c05de8;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: c88a14bda2
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector 89cc777e1a;//[Offset: 0xc, Size: 0xc]
	e609eb9e79 4f55a9a6e8;//[Offset: 0x18, Size: 0x10]
	e609eb9e79 ca96a9c205;//[Offset: 0x28, Size: 0x10]
	e609eb9e79 951dbf3a2d;//[Offset: 0x38, Size: 0x10]
	bool b7c8e9e958;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: e609eb9e79
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool b7c8e9e958;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool a2378112f6;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: 21a06b1fd8
	e609eb9e79 3f6791100b;//[Offset: 0x0, Size: 0x10]
	e609eb9e79 15e5185829;//[Offset: 0x10, Size: 0x10]
	e609eb9e79 SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator 4e606b055c;//[Offset: 0x30, Size: 0xc]
	Vector 6759f2bc65;//[Offset: 0x3c, Size: 0xc]
	byte a75ad3c0d2;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintInstance.0ed6f66b13
	FName d582eadc97;//[Offset: 0x18, Size: 0x8]
	FName 35bcfb47cf;//[Offset: 0x20, Size: 0x8]
	FName 4e05f4e4ee;//[Offset: 0x28, Size: 0x8]
	Vector cf725c96e6;//[Offset: 0x30, Size: 0xc]
	Vector a7215f70b2;//[Offset: 0x3c, Size: 0xc]
	Vector 770ac30c2c;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector ac4a5c01f7;//[Offset: 0x60, Size: 0xc]
	Vector 672eca7ef2;//[Offset: 0x6c, Size: 0xc]
	Rotator f7b675c7a3;//[Offset: 0x78, Size: 0xc]
	bool ceb939b1b7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	81c1cebd68 13efed9ed0;//[Offset: 0x8c, Size: 0x10c]

--------------------------------
Class: 0ed6f66b13

--------------------------------
Class: 1f0d7aac18
	81c1cebd68 58205692b2;//[Offset: 0x0, Size: 0x10c]
	FName ProfileName;//[Offset: 0x10c, Size: 0x8]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4]
	int SolverIterations;//[Offset: 0x4, Size: 0x4]
	int JointIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionIterations;//[Offset: 0xc, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x90, Size: 0x8]
	b845497be3*[] Timelines;//[Offset: 0x98, Size: 0x10]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool 6c3f1ffe7f;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	bool e905e733c2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0xb0, Size: 0x8]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0xb8, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0xc0, Size: 0x10]
	cae0c4f660[] ComponentClassOverrides;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: BlueprintCore.Object
	class Object* GeneratedClass;//[Offset: 0x68, Size: 0x8]
	class Object* SkeletonGeneratedClass;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: b845497be3.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1]
	FName fce607a13d;//[Offset: 0x7c, Size: 0x8]
	5754e1f572[] 78b1c5a135;//[Offset: 0x88, Size: 0x10]
	FName 268f5e1b35;//[Offset: 0x98, Size: 0x8]
	1595823a14[] 2f89557be5;//[Offset: 0xa0, Size: 0x10]
	FName VariableName;//[Offset: 0xb0, Size: 0x8]
	43d3a4ca42[] f1bf9db38d;//[Offset: 0xb8, Size: 0x10]
	08436402d6[] 0c4eb7f687;//[Offset: 0xc8, Size: 0x10]
	b1aa36a04a[] 92ceaab84c;//[Offset: 0xd8, Size: 0x10]
	FName 69b18e85ca;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: 5754e1f572.020e95a99c.48c673e459
	c835d7a808* c835d7a808;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: 020e95a99c.48c673e459
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: 48c673e459
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool c532bd8362;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: c835d7a808.CurveBase.Object
	RichCurve 1cfa8d3a9e;//[Offset: 0x70, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0xffffff90c89e5002

--------------------------------
Class: 1595823a14.020e95a99c.48c673e459
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: 43d3a4ca42.020e95a99c.48c673e459
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve 1cfa8d3a9e;//[Offset: 0x80, Size: 0x80]
	LinearColor GetLinearColorValue(float InTime);// 0xffffff90c89e5002
	LinearColor GetClampedLinearColorValue(float InTime);// 0xffffff90c89e5002

--------------------------------
Class: 08436402d6
	FName 671c195b10;//[Offset: 0x0, Size: 0x8]
	FString a749c03a9f;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: b1aa36a04a.48c673e459
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* bf7329c3f3;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] d1c23c6043;//[Offset: 0x68, Size: 0x10]
	SCS_Node* 6b1959da86;//[Offset: 0x78, Size: 0x8]
	SCS_Node*[] RootNodes;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: SCS_Node.Object
	08436402d6[] 0c4eb7f687;//[Offset: 0x68, Size: 0x10]
	class Object* ComponentClass;//[Offset: 0x78, Size: 0x8]
	ActorComponent* e02ff60697;//[Offset: 0x98, Size: 0x8]
	FName InternalVariableName;//[Offset: 0xa0, Size: 0x8]
	SCS_Node*[] ChildNodes;//[Offset: 0xa8, Size: 0x10]
	FName ParentComponentOrVariableName;//[Offset: 0xb8, Size: 0x8]
	FName 96d6b4901a;//[Offset: 0xc0, Size: 0x8]
	e31931599e 8eb8efe31a;//[Offset: 0xc8, Size: 0x48]
	FName e298a26223;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: e31931599e
	1e1ce9e446[] 155e8afcae;//[Offset: 0x0, Size: 0x10]
	bool ea480a8c26;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: 1e1ce9e446
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* 8b682273ef;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ActorComponent*[] 4020df6113;//[Offset: 0x68, Size: 0x10]
	06e2c90eb5[] Records;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: 06e2c90eb5
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* e02ff60697;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	e31931599e 8eb8efe31a;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: cae0c4f660
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: 8b15d9c47d.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0xffffff90c89e5001
	void PhysicsAssetUpdated();// 0xffffff90c89e5000
	float GetSimulationTime();// 0xffffff90c89e5001
	int GetNumSubsteps();// 0xffffff90c89e5001
	int GetNumKinematicParticles();// 0xffffff90c89e5001
	int GetNumIterations();// 0xffffff90c89e5001
	int GetNumDynamicParticles();// 0xffffff90c89e5001
	int GetNumCloths();// 0xffffff90c89e5001
	void EnableGravityOverride(out const Vector InVector);// 0xffffff90c89e5001
	void DisableGravityOverride();// 0xffffff90c89e5000
	void ClothConfigUpdated();// 0xffffff90c89e5000

--------------------------------
Class: 9e71cdf1e8
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: b9f822b5e4

--------------------------------
Class: ba83a48ab8
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ParticleEmitter.Object
	ParticleLODLevel*[] LODLevels;//[Offset: 0x70, Size: 0x10]
	bool bRenderThermalScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool 88f7b97271;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool 9b99c2603d;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1]
	bool 6ff6c5043c;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1]
	bool eac3a9b3e6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1]
	bool 045e96b3c0;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1]
	bool 594844fdb2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 0x1]
	int 92fe83a4dc;//[Offset: 0x100, Size: 0x4]
	enum 29028b4138;//[Offset: 0x1a4, Size: 0x1]
	FName EmitterName;//[Offset: 0x1a8, Size: 0x8]

--------------------------------
Class: ParticleLODLevel.Object
	ParticleModuleSpawn* 8f1e0de30a;//[Offset: 0x68, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	ParticleModuleOrbit*[] b616b8e8b3;//[Offset: 0x78, Size: 0x10]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x88, Size: 0x8]
	ParticleModuleEventReceiverBase*[] 425cde81ce;//[Offset: 0x90, Size: 0x10]
	ParticleModule*[] 89b5ef6e4c;//[Offset: 0xa0, Size: 0x10]
	ParticleModule*[] Modules;//[Offset: 0xb0, Size: 0x10]
	ParticleModuleRequired* ef7c1f203f;//[Offset: 0xc8, Size: 0x8]
	ParticleModuleTypeDataBase* a9d6065166;//[Offset: 0xd0, Size: 0x8]
	ParticleModule*[] 7bdf752e5f;//[Offset: 0xd8, Size: 0x10]
	3e1294eab1*[] ff53e9d56c;//[Offset: 0xe8, Size: 0x10]
	bool 9b99c2603d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawn.3e1294eab1.ParticleModule.Object
	a7337bd043[] e749729115;//[Offset: 0x68, Size: 0x10]
	f2b2926d4a RateScale;//[Offset: 0x78, Size: 0x30]
	f2b2926d4a Rate;//[Offset: 0xa8, Size: 0x30]
	f2b2926d4a 9a9395a7e8;//[Offset: 0xd8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x109, Size: 0x1]

--------------------------------
Class: 3e1294eab1.ParticleModule.Object
	bool 2a4b449964;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67, Size: 0x1]
	bool 0f61f67a6b;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67, Size: 0x1]

--------------------------------
Class: ParticleModule.Object
	bool 9ff9138528;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool f9a6aefefc;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	bool 4f97e3e6c3;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1]
	bool 3406475ab9;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1]
	bool 61ff315513;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1]
	bool 9b3eb97b10;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x64, Size: 0x1]
	bool 8e0d6223a3;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x64, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x64, Size: 0x1]
	bool b58590fc3d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 0x1]
	bool 473ce4ba83;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65, Size: 0x1]
	bool 9467eb798f;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65, Size: 0x1]
	bool 73192fecd6;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65, Size: 0x1]

--------------------------------
Class: a7337bd043
	int Count;//[Offset: 0x0, Size: 0x4]
	int 0036bc017b;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: f2b2926d4a.9dcfe4833e
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	6d4d44dd71* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: 9dcfe4833e
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float d5260c8842;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte a54cd6f13f;//[Offset: 0x1a, Size: 0x1]
	byte 06d51e4823;//[Offset: 0x1b, Size: 0x1]
	byte 48c2e09cdb;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: 6d4d44dd71.Distribution.Object
	bool 8af723abbe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool f6ad88f094;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleModuleOrbit.7775775905.ParticleModule.Object
	RawDistributionVector OffsetAmount;//[Offset: 0x68, Size: 0x48]
	72d535e163 2f7802066d;//[Offset: 0xb0, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xb8, Size: 0x48]
	RawDistributionVector RotationAmount;//[Offset: 0x100, Size: 0x48]
	72d535e163 7b14af314b;//[Offset: 0x14c, Size: 0x4]
	72d535e163 92ee6fe97e;//[Offset: 0x150, Size: 0x4]

--------------------------------
Class: 7775775905.ParticleModule.Object
	bool 6c7531337e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67, Size: 0x1]

--------------------------------
Class: RawDistributionVector.9dcfe4833e
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector 95efc42607;//[Offset: 0x28, Size: 0xc]
	Vector 524cc3b973;//[Offset: 0x34, Size: 0xc]
	2b90e2338e* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: 2b90e2338e.Distribution.Object
	bool 8af723abbe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool f6ad88f094;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: 72d535e163
	bool 09147fd204;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool 0b82b28aca;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool 6c7531337e;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.727f40dd52.ParticleModule.Object
	7f2a2b99ec[] Events;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: 727f40dd52.ParticleModule.Object

--------------------------------
Class: 7f2a2b99ec
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int f0e7ba6086;//[Offset: 0x8, Size: 0x4]
	bool 30bd7938d1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bfd94e94b2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool 60609fc5d5;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool 8a478f008d;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName 6e940d25be;//[Offset: 0x10, Size: 0x8]
	e846b2232f*[] e9f10e5eb6;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: e846b2232f.Object

--------------------------------
Class: ParticleModuleEventReceiverBase.727f40dd52.ParticleModule.Object
	FName EventName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	a7337bd043[] e749729115;//[Offset: 0x70, Size: 0x10]
	MaterialInterface* Material;//[Offset: 0x88, Size: 0x8]
	bool 4586555cec;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool 9f5565636c;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool 536fed8d26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool 4f4c23ff53;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1]
	bool 1cf7816b51;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x98, Size: 0x1]
	f2b2926d4a SpawnRate;//[Offset: 0xa0, Size: 0x30]
	FName[] 2bc28957d0;//[Offset: 0xd8, Size: 0x10]
	enum b010023802;//[Offset: 0xe8, Size: 0x1]
	bool d315770410;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool 3f689272bf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool 9960847fbb;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool 153c82d361;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool 4696f4eb8e;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool 69b7bb5139;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0x120, Size: 0x8]
	bool 9969a2af7a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: InterpCurveEdSetup.Object
	78ca98a1dc[] Tabs;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: 78ca98a1dc
	FString TabName;//[Offset: 0x0, Size: 0x10]
	a23600902a[] Curves;//[Offset: 0x10, Size: 0x10]
	float d9e149ffa9;//[Offset: 0x20, Size: 0x4]
	float ac1c72d8b3;//[Offset: 0x24, Size: 0x4]
	float 7345a7b11f;//[Offset: 0x28, Size: 0x4]
	float 1801ca8624;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: a23600902a
	Object* 275eef0c5f;//[Offset: 0x0, Size: 0x8]
	Color 123d1449f7;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int e2c91895b3;//[Offset: 0x20, Size: 0x4]
	int 7e97d3e9c3;//[Offset: 0x24, Size: 0x4]
	int 556164bbed;//[Offset: 0x28, Size: 0x4]
	int 546a5d7364;//[Offset: 0x2c, Size: 0x4]
	float 2024850914;//[Offset: 0x30, Size: 0x4]
	float 2a173a8179;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: 6f37549947
	byte[] 99337af868;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InputComponent.ActorComponent.Object
	0c831c6fcf[] 0c831c6fcf;//[Offset: 0x150, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0xffffff90c89e5002
	bool WasControllerKeyJustPressed(Key Key);// 0xffffff90c89e5002
	bool IsControllerKeyDown(Key Key);// 0xffffff90c89e5002
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0xffffff90c89e5004
	Vector GetControllerVectorKeyState(Key Key);// 0xffffff90c89e5002
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0xffffff90c89e5002
	float GetControllerKeyTimeDown(Key Key);// 0xffffff90c89e5002
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xffffff90c89e5003
	float GetControllerAnalogKeyState(Key Key);// 0xffffff90c89e5002

--------------------------------
Class: 0c831c6fcf
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x140, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x3c0, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0xffffff90c89e5001
	void SetGamePadSensitivityOf(const Key AxisKey, const float Sensitivity);// 0xffffff90c89e5002
	void SetGamePadSensitivity(const float Sensitivity);// 0xffffff90c89e5001
	void SetGamePadDeadZoneOf(const Key AxisKey, const float DeadZone);// 0xffffff90c89e5002
	void SetGamePadDeadZone(const float DeadZone);// 0xffffff90c89e5001
	void SetBind(FName BindName, FString Command);// 0xffffff90c89e5002
	void InvertAxisKey(const Key AxisKey);// 0xffffff90c89e5001
	void InvertAxis(const FName AxisName);// 0xffffff90c89e5001
	void ClearSmoothing();// 0xffffff90c89e5000

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: c58651d48b
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x28]
	enum 88f29fa353;//[Offset: 0x30, Size: 0x1]
	FName UserTag;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: 0261cf5f4e
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: 311b5c95c2.Object
	<UserWidget*> 5dccbb70ff;//[Offset: 0x68, Size: 0x50]
	9fa6c99ee9* Linker;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: 9069cd7e3f
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: 0c38e91d6d
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	PawnMovementComponent* MovementComponent;//[Offset: 0x358, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x360, Size: 0x8]
	float BaseLookUpRate;//[Offset: 0x368, Size: 0x4]
	float BaseTurnRate;//[Offset: 0x36c, Size: 0x4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x370, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	void TurnAtRate(float Rate);// 0xffffff90c89e5001
	void MoveUp_World(float Val);// 0xffffff90c89e5001
	void MoveRight(float Val);// 0xffffff90c89e5001
	void MoveForward(float Val);// 0xffffff90c89e5001
	void LookUpAtRate(float Rate);// 0xffffff90c89e5001

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* d6dfa901c0;//[Offset: 0x1a8, Size: 0x8]
	Vector K2_GetInputVector();// 0xffffff90c89e5001
	bool IsMoveInputIgnored();// 0xffffff90c89e5001
	Vector GetPendingInputVector();// 0xffffff90c89e5001
	Pawn* GetPawnOwner();// 0xffffff90c89e5001
	Vector GetLastInputVector();// 0xffffff90c89e5001
	Vector ConsumeInputVector();// 0xffffff90c89e5001
	void AddInputVector(Vector WorldVector, bool bForce);// 0xffffff90c89e5002

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	ebc7160fb5 6d8e9ddaba;//[Offset: 0x164, Size: 0x1]
	bool c48eb55512;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16c, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16c, Size: 0x1]
	Object* 1a5b586891;//[Offset: 0x170, Size: 0x8]
	a057bbcf4b NavAgentProps;//[Offset: 0x178, Size: 0x30]
	void StopMovementKeepPathing();// 0xffffff90c89e5000
	void StopActiveMovement();// 0xffffff90c89e5000
	bool IsSwimming();// 0xffffff90c89e5001
	bool IsMovingOnGround();// 0xffffff90c89e5001
	bool IsFlying();// 0xffffff90c89e5001
	bool IsFalling();// 0xffffff90c89e5001
	bool IsCrouching();// 0xffffff90c89e5001

--------------------------------
Class: MovementComponent.ActorComponent.Object
	enum 0f4bb812b1;//[Offset: 0x11c, Size: 0x1]
	Vector PlaneConstraintOrigin;//[Offset: 0x120, Size: 0xc]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x130, Size: 0x8]
	Vector PlaneConstraintNormal;//[Offset: 0x138, Size: 0xc]
	SceneComponent* UpdatedComponent;//[Offset: 0x148, Size: 0x8]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1]
	Vector Velocity;//[Offset: 0x154, Size: 0xc]
	void StopMovementImmediately();// 0xffffff90c89e5000
	void SnapUpdatedComponentToPlane();// 0xffffff90c89e5000
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xffffff90c89e5001
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xffffff90c89e5001
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xffffff90c89e5001
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xffffff90c89e5002
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xffffff90c89e5001
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xffffff90c89e5001
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xffffff90c89e5001
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xffffff90c89e5006
	float K2_GetModifiedMaxSpeed();// 0xffffff90c89e5001
	float K2_GetMaxSpeedModifier();// 0xffffff90c89e5001
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xffffff90c89e5002
	Vector GetPlaneConstraintOrigin();// 0xffffff90c89e5001
	Vector GetPlaneConstraintNormal();// 0xffffff90c89e5001
	enum GetPlaneConstraintAxisSetting();// 0xffffff90c89e5001
	PhysicsVolume* GetPhysicsVolume();// 0xffffff90c89e5001
	float GetMaxSpeed();// 0xffffff90c89e5001
	float GetGravityZ();// 0xffffff90c89e5001
	Vector ConstrainNormalToPlane(Vector Normal);// 0xffffff90c89e5002
	Vector ConstrainLocationToPlane(Vector Location);// 0xffffff90c89e5002
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xffffff90c89e5002

--------------------------------
Class: ebc7160fb5
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: a057bbcf4b.ebc7160fb5
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x574, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0xffffff90c89e5002
	float GetUnscaledSphereRadius();// 0xffffff90c89e5001
	float GetShapeScale();// 0xffffff90c89e5001
	float GetScaledSphereRadius();// 0xffffff90c89e5001

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x55c, Size: 0x4]
	BodySetup* fbf5775930;//[Offset: 0x560, Size: 0x8]
	class 2571ea275f* AreaClass;//[Offset: 0x568, Size: 0x8]
	bool 838ca11431;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	bool 3f6595c7c7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x570, Size: 0x1]
	bool f605459b0e;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x570, Size: 0x1]

--------------------------------
Class: 2571ea275f.Object

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	f28c6334fd LightmassSettings;//[Offset: 0x584, Size: 0x18]
	int ForcedLodModel;//[Offset: 0x5a0, Size: 0x4]
	96af5f29df[] a5ee055e36;//[Offset: 0x5a8, Size: 0x10]
	int OverriddenLightMapRes;//[Offset: 0x5b8, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5bc, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d8, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d8, Size: 0x1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d8, Size: 0x1]
	bool bOverrideEnableDistanceCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d8, Size: 0x1]
	bool 5059b96e68;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d8, Size: 0x1]
	bool 32b78f55ec;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d8, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d8, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d8, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d9, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d9, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d9, Size: 0x1]
	bool a350f148ba;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d9, Size: 0x1]
	bool 316a8e378c;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d9, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d9, Size: 0x1]
	bool bOccludedByOthers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d9, Size: 0x1]
	bool ExcludedObjectFromVolume;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5da, Size: 0x1]
	float StreamingDistanceMultiplier;//[Offset: 0x5dc, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x5e0, Size: 0x8]
	2f691f5465[] c5eecce647;//[Offset: 0x5e8, Size: 0x10]
	int MinLOD;//[Offset: 0x5fc, Size: 0x4]
	Color WireframeColorOverride;//[Offset: 0x600, Size: 0x4]
	MaterialInstanceDynamic* BurnedMaterialDynamic;//[Offset: 0x608, Size: 0x8]
	3a3edb4d9d 776dc247ec;//[Offset: 0x610, Size: 0x50]
	float DistanceFieldSelfShadowBias;//[Offset: 0x660, Size: 0x4]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0xffffff90c89e5002
	void SetReverseCulling(bool ReverseCulling);// 0xffffff90c89e5001
	void SetForcedLodModel(int NewForcedLodModel);// 0xffffff90c89e5001
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0xffffff90c89e5001
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0xffffff90c89e5001
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0xffffff90c89e5001
	void GetLocalBounds(out Vector Min, out Vector Max);// 0xffffff90c89e5002

--------------------------------
Class: f28c6334fd
	bool c5c6f7c576;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool 61732ecbc5;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool 460e6d9c7b;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool 281c8c49db;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float 23d1b22eed;//[Offset: 0x4, Size: 0x4]
	float c2b995dc97;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float 2b80a6c46d;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: 96af5f29df

--------------------------------
Class: 2f691f5465
	uint32 ea1faf79dd;//[Offset: 0x0, Size: 0x4]
	int 98f51a68c2;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 3a3edb4d9d
	<Guid,9a713932f5> 357426c0fc;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: 9a713932f5
	float[] ec37a2e88f;//[Offset: 0x0, Size: 0x10]
	int8 bOccludedByOthers;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0xa0, Size: 0x10]
	NetDriver* Driver;//[Offset: 0xb0, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0xb8, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0xc0, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0xc8, Size: 0x10]
	Actor*[] 3553f0e50b;//[Offset: 0xd8, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0xe8, Size: 0x8]
	Actor* 575bea43ee;//[Offset: 0xf0, Size: 0x8]
	int MaxPacket;//[Offset: 0xf8, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x1b8, Size: 0x28]
	double 8ba6c7ce12;//[Offset: 0x228, Size: 0x8]
	Channel*[] d53d172776;//[Offset: 0x1570, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b48, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	World* World;//[Offset: 0x100, Size: 0x8]
	float ServerTravelPause;//[Offset: 0x10c, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x11c, Size: 0x4]
	FName NetDriverName;//[Offset: 0x128, Size: 0x8]
	<FName,8b5e4839f1> 7579b473e1;//[Offset: 0x188, Size: 0x50]
	int MaxDownloadSize;//[Offset: 0x210, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x238, Size: 0x4]
	Channel*[] ActorChannelPool;//[Offset: 0x248, Size: 0x10]
	FString NetConnectionClassName;//[Offset: 0x260, Size: 0x10]
	int MaxClientRate;//[Offset: 0x278, Size: 0x4]
	class Object* ReplicationDriverClass;//[Offset: 0x280, Size: 0x8]
	class Object* 9a0d19d813;//[Offset: 0x430, Size: 0x8]
	int MaxInternetClientRate;//[Offset: 0x43c, Size: 0x4]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x440, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x4b0, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x4f0, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x5c8, Size: 0x4]
	NetConnection* ServerConnection;//[Offset: 0x628, Size: 0x8]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6a0, Size: 0x8]
	float ConnectionTimeout;//[Offset: 0x710, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x7a8, Size: 0x4]
	FString ReplicationDriverClassName;//[Offset: 0x7b0, Size: 0x10]
	8b5e4839f1[] ChannelDefinitions;//[Offset: 0x7c0, Size: 0x10]
	NetConnection*[] ClientConnections;//[Offset: 0x7d0, Size: 0x10]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1]
	Package* 13fae84214;//[Offset: 0x808, Size: 0x8]
	int NetServerMaxTickRate;//[Offset: 0x810, Size: 0x4]

--------------------------------
Class: 8b5e4839f1
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* fc4d0d6838;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: Package.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: 5fcbb0ea7b.Object

--------------------------------
Class: 17018ede23
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	float Duration;//[Offset: 0x64, Size: 0x4]
	edd92c8b83[] ChannelDetails;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: edd92c8b83
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: 3856676ad3
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool 4bec139c93;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool 6c041afd2e;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool 9593edbad1;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: cf035291ae
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: CheatManager.Object
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x68, Size: 0x8]
	DebugCameraController* aacc297087;//[Offset: 0xa0, Size: 0x8]
	void Walk();// 0xffffff90c89e5000
	void ViewSelf();// 0xffffff90c89e5000
	void ViewPlayer(FString S);// 0xffffff90c89e5001
	void ViewClass(class Actor DesiredClass);// 0xffffff90c89e5001
	void ViewActor(FName ActorName);// 0xffffff90c89e5001
	void UpdateSafeArea();// 0xffffff90c89e5000
	void ToggleServerStatReplicatorUpdateStatNet();// 0xffffff90c89e5000
	void ToggleServerStatReplicatorClientOverwrite();// 0xffffff90c89e5000
	void ToggleDebugCamera();// 0xffffff90c89e5000
	void ToggleAILogging();// 0xffffff90c89e5000
	void TestCollisionDistance();// 0xffffff90c89e5000
	void Teleport();// 0xffffff90c89e5000
	void Summon(FString ClassName);// 0xffffff90c89e5001
	void StreamLevelOut(FName PackageName);// 0xffffff90c89e5001
	void StreamLevelIn(FName PackageName);// 0xffffff90c89e5001
	void SpawnServerStatReplicator();// 0xffffff90c89e5000
	void Slomo(float NewTimeDilation);// 0xffffff90c89e5001
	void SetWorldOrigin();// 0xffffff90c89e5000
	void SetMouseSensitivityToDefault();// 0xffffff90c89e5000
	void abb08cfe50();// 0xffffff90c89e5000
	void ReceiveInitCheatManager();// 0xffffff90c89e5000
	void ReceiveEndPlay();// 0xffffff90c89e5000
	void PlayersOnly();// 0xffffff90c89e5000
	void OnlyLoadLevel(FName PackageName);// 0xffffff90c89e5001
	void LogLoc();// 0xffffff90c89e5000
	void InvertMouse();// 0xffffff90c89e5000
	void God();// 0xffffff90c89e5000
	void Ghost();// 0xffffff90c89e5000
	void FreezeFrame(float Delay);// 0xffffff90c89e5001
	void Fly();// 0xffffff90c89e5000
	void FlushLog();// 0xffffff90c89e5000
	void EnableDebugCamera();// 0xffffff90c89e5000
	void DumpVoiceMutingState();// 0xffffff90c89e5000
	void DumpPartyState();// 0xffffff90c89e5000
	void DumpOnlineSessionState();// 0xffffff90c89e5000
	void DumpChatState();// 0xffffff90c89e5000
	void DisableDebugCamera();// 0xffffff90c89e5000
	void DestroyTarget();// 0xffffff90c89e5000
	void DestroyServerStatReplicator();// 0xffffff90c89e5000
	void DestroyPawns(class Pawn aClass);// 0xffffff90c89e5001
	void DestroyAllPawnsExceptTarget();// 0xffffff90c89e5000
	void DestroyAll(class Actor aClass);// 0xffffff90c89e5001
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0xffffff90c89e5002
	void DebugCapsuleSweepPawn();// 0xffffff90c89e5000
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0xffffff90c89e5001
	void DebugCapsuleSweepClear();// 0xffffff90c89e5000
	void DebugCapsuleSweepChannel(byte Channel);// 0xffffff90c89e5001
	void DebugCapsuleSweepCapture();// 0xffffff90c89e5000
	void DebugCapsuleSweep();// 0xffffff90c89e5000
	void DamageTarget(float DamageAmount);// 0xffffff90c89e5001
	void CheatScript(FString ScriptName);// 0xffffff90c89e5001
	void ChangeSize(float F);// 0xffffff90c89e5001
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0xffffff90c89e5004
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0xffffff90c89e5006
	void BugIt(FString ScreenShotDescription);// 0xffffff90c89e5001

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x842, Size: 0x1]
	bool e726617685;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x842, Size: 0x1]
	bool e310f77284;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x842, Size: 0x1]
	bool a12c997e67;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x842, Size: 0x1]
	bool 0bf8a4ad0e;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x842, Size: 0x1]
	bool 28f6f3fc11;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x842, Size: 0x1]
	bool 80db77f499;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x842, Size: 0x1]
	bool 4424840c83;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x842, Size: 0x1]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x848, Size: 0x8]
	float InitialAccel;//[Offset: 0x850, Size: 0x4]
	float SpeedScale;//[Offset: 0x858, Size: 0x4]
	PlayerController* 110b7fab04;//[Offset: 0x868, Size: 0x8]
	Player* c01c5fbdab;//[Offset: 0x870, Size: 0x8]
	HitResult ad251893ad;//[Offset: 0x884, Size: 0xd4]
	float InitialDecel;//[Offset: 0x958, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x95c, Size: 0x4]
	DrawFrustumComponent* 5c6184437f;//[Offset: 0x980, Size: 0x8]
	Actor* e18ed76877;//[Offset: 0x988, Size: 0x8]
	void ToggleDisplay();// 0xffffff90c89e5000
	void ShowDebugSelectedInfo();// 0xffffff90c89e5000
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0xffffff90c89e5001
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xffffff90c89e5001
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0xffffff90c89e5004
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xffffff90c89e5001
	Actor* GetSelectedActor();// 0xffffff90c89e5001

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float FrustumStartDist;//[Offset: 0x55c, Size: 0x4]
	float FrustumAngle;//[Offset: 0x560, Size: 0x4]
	Texture* Texture;//[Offset: 0x568, Size: 0x8]
	float FrustumEndDist;//[Offset: 0x570, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x574, Size: 0x4]
	Color FrustumColor;//[Offset: 0x578, Size: 0x4]

--------------------------------
Class: 15e99d5b7f
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TouchInterface.Object
	0f75773c71[] Controls;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: 0f75773c71
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D 807ccfc4b0;//[Offset: 0x18, Size: 0x8]
	Vector2D 0805eb44a3;//[Offset: 0x20, Size: 0x8]
	Vector2D ceda6e9f11;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key a10086d9ce;//[Offset: 0x38, Size: 0x18]
	Key c4b48530e3;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: ee291b1e71.4866c69594.Object
	Actor* 02c5d98e58;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	3a3edb4d9d 776dc247ec;//[Offset: 0x290, Size: 0x50]
	Actor* ChildActor;//[Offset: 0x2e0, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x2e8, Size: 0x8]
	class Actor* ChildActorClass;//[Offset: 0x2f0, Size: 0x8]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2f8, Size: 0x10]
	void SetChildActorClass(class Actor InClass);// 0xffffff90c89e5001

--------------------------------
Class: 9e70421366.7a1a2c8098

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x2ac, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x2b0, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x2b4, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x2b8, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x2bc, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2c0, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x2c4, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x2c8, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	bool 3e5b40b47d;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2d0, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2d4, Size: 0x4]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2e8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2f0, Size: 0x4]
	float MoveRepSize;//[Offset: 0x2f4, Size: 0x4]
	float StandbyRxCheatTime;//[Offset: 0x2f8, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x2fc, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x300, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x308, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x310, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	int SeverePingThreshold;//[Offset: 0x318, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x31c, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x320, Size: 0x4]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x324, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x328, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x32c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x330, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	int MaxDynamicBandwidth;//[Offset: 0x338, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x33c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x340, Size: 0x4]
	float BadPacketLossThreshold;//[Offset: 0x344, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x348, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x34c, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x350, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x354, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x358, Size: 0x4]

--------------------------------
Class: Interface.Object

--------------------------------
Class: MatineeActor.Actor.Object
	FName 06b95271e6;//[Offset: 0x2a8, Size: 0x8]
	byte 8b9a5d6568;//[Offset: 0x2b4, Size: 0x1]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b5, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b5, Size: 0x1]
	9dac0cd357[] 988dfbe982;//[Offset: 0x2b8, Size: 0x10]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c8, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c8, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c8, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c8, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c8, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2d0, Size: 0x10]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 0x1]
	float InterpPosition;//[Offset: 0x2e4, Size: 0x4]
	bool c3bb9ec50c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	delegate OnStop;//[Offset: 0x2f0, Size: 0x10]
	delegate OnPause;//[Offset: 0x300, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]
	bool e1e4d1d66d;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1]
	bool 7c94609b60;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 0x1]
	bool 9c879d7ba7;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x314, Size: 0x4]
	InterpData* MatineeData;//[Offset: 0x318, Size: 0x8]
	float PlayRate;//[Offset: 0x320, Size: 0x4]
	int PreferredSplitScreenNum;//[Offset: 0x330, Size: 0x4]
	9113c1b736[] GroupActorInfos;//[Offset: 0x338, Size: 0x10]
	6d4676e0fb*[] 921f46a87f;//[Offset: 0x348, Size: 0x10]
	void Stop();// 0xffffff90c89e5000
	void SetPosition(float NewPosition, bool bJump);// 0xffffff90c89e5002
	void SetLoopingState(bool bNewLooping);// 0xffffff90c89e5001
	void Reverse();// 0xffffff90c89e5000
	void Play();// 0xffffff90c89e5000
	void Pause();// 0xffffff90c89e5000
	void EnableGroupByName(FString GroupName, bool bEnable);// 0xffffff90c89e5002
	void ChangePlaybackDirection();// 0xffffff90c89e5000

--------------------------------
Class: 9dac0cd357
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: InterpData.Object
	InterpGroup*[] InterpGroups;//[Offset: 0x68, Size: 0x10]
	FName[] 0db9d72068;//[Offset: 0x78, Size: 0x10]
	float InterpLength;//[Offset: 0x8c, Size: 0x4]
	InterpCurveEdSetup* 47b771eeaa;//[Offset: 0x98, Size: 0x8]
	bool a8a480bf0c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	dfd28374d2* 13b67af099;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: dfd28374d2.InterpGroup.Object

--------------------------------
Class: 9113c1b736
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool 712bea001c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool 0bd72fe400;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum b3ed872062;//[Offset: 0x31, Size: 0x1]
	enum 4c4f97c689;//[Offset: 0x32, Size: 0x1]
	enum 1acc49b87e;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: de7d081164
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName bcd1801e2e;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: NavigationSystemConfig.Object
	FName DefaultAgentName;//[Offset: 0x64, Size: 0x8]
	SoftClassPath 8eb5794899;//[Offset: 0x70, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x88, Size: 0x4]
	bool b0273a413a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	class Pawn* DefaultPawnClass;//[Offset: 0x2a8, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x2b0, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x2b8, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x2c0, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x2f0, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x2f8, Size: 0x8]
	class GameSession* GameSessionClass;//[Offset: 0x300, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x308, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x310, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x318, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x320, Size: 0x8]
	FString OptionsString;//[Offset: 0x328, Size: 0x10]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x340, Size: 0x8]
	void StartPlay();// 0xffffff90c89e5000
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0xffffff90c89e5003
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xffffff90c89e5003
	bool ShouldReset(Actor* ActorToReset);// 0xffffff90c89e5002
	void ReturnToMainMenuHost();// 0xffffff90c89e5000
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xffffff90c89e5002
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0xffffff90c89e5002
	void RestartPlayer(Controller* NewPlayer);// 0xffffff90c89e5001
	void ResetLevel();// 0xffffff90c89e5000
	bool PlayerCanRestart(PlayerController* Player);// 0xffffff90c89e5002
	bool MustSpectate(PlayerController* NewPlayerController);// 0xffffff90c89e5002
	void K2_PostLogin(PlayerController* NewPlayer);// 0xffffff90c89e5001
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xffffff90c89e5002
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xffffff90c89e5001
	void K2_OnLogout(Controller* ExitingController);// 0xffffff90c89e5001
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xffffff90c89e5003
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0xffffff90c89e5003
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0xffffff90c89e5002
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0xffffff90c89e5001
	bool HasMatchStarted();// 0xffffff90c89e5001
	bool HasMatchEnded();// 0xffffff90c89e5001
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0xffffff90c89e5001
	int GetNumSpectators();// 0xffffff90c89e5001
	int GetNumPlayers();// 0xffffff90c89e5001
	class Object GetDefaultPawnClassForController(Controller* InController);// 0xffffff90c89e5002
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0xffffff90c89e5003
	Actor* ChoosePlayerStart(Controller* Player);// 0xffffff90c89e5002
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0xffffff90c89e5003
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0xffffff90c89e5003

--------------------------------
Class: GameStateBase.Info.Actor.Object
	float 55a69ff90d;//[Offset: 0x2ac, Size: 0x4]
	bool 81c9a0fb4c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2b8, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x2c8, Size: 0x10]
	float 2b3415a8b0;//[Offset: 0x2e8, Size: 0x4]
	class GameModeBase* GameModeClass;//[Offset: 0x2f0, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2f8, Size: 0x8]
	void OnRep_SpectatorClass();// 0xffffff90c89e5000
	void OnRep_ReplicatedWorldTimeSeconds();// 0xffffff90c89e5000
	void OnRep_ReplicatedHasBegunPlay();// 0xffffff90c89e5000
	void OnRep_GameModeClass();// 0xffffff90c89e5000
	bool HasMatchStarted();// 0xffffff90c89e5001
	bool HasMatchEnded();// 0xffffff90c89e5001
	bool HasBegunPlay();// 0xffffff90c89e5001
	float GetServerWorldTimeSeconds();// 0xffffff90c89e5001
	float GetPlayerStartTime(Controller* Controller);// 0xffffff90c89e5002
	float GetPlayerRespawnDelay(Controller* Controller);// 0xffffff90c89e5002

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	uint32 InPacketsClientMin;//[Offset: 0x2a8, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x2ac, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x2b8, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x2bc, Size: 0x4]
	uint32 c0073179f7;//[Offset: 0x2c0, Size: 0x4]
	uint32 Channels;//[Offset: 0x2c4, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x2c8, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2d4, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2d8, Size: 0x4]
	uint32 0bee40a904;//[Offset: 0x2dc, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2e0, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x2e4, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x2e8, Size: 0x4]
	uint32 df37f2f2b8;//[Offset: 0x2ec, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x2f0, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2f4, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2fc, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x300, Size: 0x4]
	uint32 OutRate;//[Offset: 0x304, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x308, Size: 0x4]
	uint32 ff4d2dce8d;//[Offset: 0x30c, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x310, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x314, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x318, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x31c, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x320, Size: 0x4]
	uint32 a3f4eddff6;//[Offset: 0x324, Size: 0x4]
	uint32 c7bed2c79c;//[Offset: 0x328, Size: 0x4]
	uint32 InLoss;//[Offset: 0x32c, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x330, Size: 0x4]
	uint32 InPackets;//[Offset: 0x334, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x338, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x33c, Size: 0x4]
	uint32 InRate;//[Offset: 0x340, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x344, Size: 0x4]
	uint32 b27357ab7a;//[Offset: 0x348, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x34c, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x354, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x358, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x35c, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x360, Size: 0x4]
	uint32 InBunches;//[Offset: 0x364, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x368, Size: 0x4]
	uint32 2f142cdc9e;//[Offset: 0x36c, Size: 0x4]

--------------------------------
Class: GameSession.Info.Actor.Object
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	int MaxPlayers;//[Offset: 0x2ac, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2b0, Size: 0x1]
	int MaxSpectators;//[Offset: 0x2b8, Size: 0x4]
	FName SessionName;//[Offset: 0x2bc, Size: 0x8]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: 9359741f93
	FName MaterialInstanceName;//[Offset: 0x0, Size: 0x8]
	FName VectorParamName;//[Offset: 0x8, Size: 0x8]
	LinearColor Color;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	float MBPOuterBoundsExpandSize;//[Offset: 0x20, Size: 0x4]
	uint32 MBPNumSubdivs;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: 0f9b668026
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* 1a553f0642;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x64, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x68, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: 0c32194791
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: Level.Object
	ModelComponent*[] bd40143534;//[Offset: 0xa8, Size: 0x10]
	NavigationObjectBase* 8a7cf6bba0;//[Offset: 0x108, Size: 0x8]
	NavigationObjectBase* 65f7de1136;//[Offset: 0x178, Size: 0x8]
	3bcd64d245* ActorCluster;//[Offset: 0x180, Size: 0x8]
	XtrmGrassRemoverManager* GrassRemoverManager;//[Offset: 0x188, Size: 0x8]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x240, Size: 0x8]
	bffacd2636[] 2d7d474556;//[Offset: 0x250, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x260, Size: 0x10]
	Model* Model;//[Offset: 0x270, Size: 0x8]
	bool d788076ed6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	bool c1cefc2ab0;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f8, Size: 0x1]
	bool d452822177;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f8, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f8, Size: 0x1]
	LevelScriptActor* LevelScriptActor;//[Offset: 0x300, Size: 0x8]
	World* OwningWorld;//[Offset: 0x318, Size: 0x8]
	WorldSettings* WorldSettings;//[Offset: 0x330, Size: 0x8]
	79b29f43fb*[] 39be532e0f;//[Offset: 0x370, Size: 0x10]
	Guid[] f241419b84;//[Offset: 0x398, Size: 0x10]
	Vector[] b2464c056b;//[Offset: 0x3c0, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* 7766b4e2c0;//[Offset: 0x570, Size: 0x8]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	BillboardComponent* a010e07d2e;//[Offset: 0x2b0, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2b8, Size: 0x8]
	BillboardComponent* 391b3f1141;//[Offset: 0x2c0, Size: 0x8]
	bool 8df1afe3fc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x560, Size: 0x1]
	float V;//[Offset: 0x564, Size: 0x4]
	float ScreenSize;//[Offset: 0x568, Size: 0x4]
	float UL;//[Offset: 0x56c, Size: 0x4]
	float VL;//[Offset: 0x570, Size: 0x4]
	float U;//[Offset: 0x574, Size: 0x4]
	Texture2D* Sprite;//[Offset: 0x578, Size: 0x8]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0xffffff90c89e5004
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0xffffff90c89e5005
	void SetSprite(Texture2D* NewSprite);// 0xffffff90c89e5001
	void SetColor(Color ApplyColor, bool bDirty);// 0xffffff90c89e5002

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x574, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x578, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0xffffff90c89e5003
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0xffffff90c89e5002
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0xffffff90c89e5002
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xffffff90c89e5002
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xffffff90c89e5002
	float GetUnscaledCapsuleRadius();// 0xffffff90c89e5001
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0xffffff90c89e5001
	float GetUnscaledCapsuleHalfHeight();// 0xffffff90c89e5001
	float GetShapeScale();// 0xffffff90c89e5001
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xffffff90c89e5002
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xffffff90c89e5002
	float GetScaledCapsuleRadius();// 0xffffff90c89e5001
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0xffffff90c89e5001
	float GetScaledCapsuleHalfHeight();// 0xffffff90c89e5001

--------------------------------
Class: 3bcd64d245.Object
	Actor*[] Actors;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: XtrmGrassRemoverManager.Actor.Object
	Vector4[] ExplodePositionTime;//[Offset: 0x308, Size: 0x10]
	BoxComponent* BoxComponent;//[Offset: 0x338, Size: 0x8]
	void OnRep_ExplodePos(out const Vector4[] OldPositions);// 0xffffff90c89e5001

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x574, Size: 0xc]
	float LineThickness;//[Offset: 0x580, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0xffffff90c89e5002
	Vector GetUnscaledBoxExtent();// 0xffffff90c89e5001
	Vector GetScaledBoxExtent();// 0xffffff90c89e5001

--------------------------------
Class: MapBuildDataRegistry.Object

--------------------------------
Class: bffacd2636
	class Object* ObjClass;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool 9bb1803b99;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xffffff90c89e5002
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xffffff90c89e5005
	bool RemoteEvent(FName EventName);// 0xffffff90c89e5002
	void LevelReset();// 0xffffff90c89e5000

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 79b29f43fb.Object
	FName 07fef54bef;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName d64a4b47c8;//[Offset: 0x78, Size: 0x8]
	delegate OnLevelLoaded;//[Offset: 0x80, Size: 0x10]
	LevelStreamingVolume*[] 171df8ca7f;//[Offset: 0x90, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0xa0, Size: 0x10]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	FName[] 0ed9f804b4;//[Offset: 0xc8, Size: 0x10]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1]
	bool ca068d4bc9;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1]
	bool ce2fa1113b;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd9, Size: 0x1]
	World* WorldAsset;//[Offset: 0xe0, Size: 0x40]
	delegate OnLevelUnloaded;//[Offset: 0x120, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x138, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x160, Size: 0x30]
	Level* 26a6546907;//[Offset: 0x190, Size: 0x8]
	int StreamingPriority;//[Offset: 0x198, Size: 0x4]
	Level* 77878d5caa;//[Offset: 0x1a0, Size: 0x8]
	bool ShouldBeLoaded();// 0xffffff90c89e5001
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0xffffff90c89e5001
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0xffffff90c89e5001
	void SetPriority(int NewPriority);// 0xffffff90c89e5001
	void SetLevelLODIndex(int LODIndex);// 0xffffff90c89e5001
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0xffffff90c89e5001
	bool IsStreamingStatePending();// 0xffffff90c89e5001
	bool IsLevelVisible();// 0xffffff90c89e5001
	bool IsLevelLoaded();// 0xffffff90c89e5001
	FName GetWorldAssetPackageFName();// 0xffffff90c89e5001
	Level* GetLoadedLevel();// 0xffffff90c89e5001
	LevelScriptActor* GetLevelScriptActor();// 0xffffff90c89e5001
	bool GetIsRequestingUnloadAndRemoval();// 0xffffff90c89e5001
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0xffffff90c89e5002

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2e0, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x2f1, Size: 0x1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x974, Size: 0x4]
	<FString,0fd4b8e98d> 6a4f7748fd;//[Offset: 0x998, Size: 0x50]
	PlayerController*[] 42d7186e4e;//[Offset: 0xa60, Size: 0x10]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xaa0, Size: 0x10]

--------------------------------
Class: 0fd4b8e98d
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] 5771b0f3ed;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString 1c0399abe9;//[Offset: 0x0, Size: 0x10]
	bool f694c6d6c1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool e229084447;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: 0119241da4
	LevelStreaming*[] 4852361e31;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	FName AISystemModuleName;//[Offset: 0x64, Size: 0x8]
	SoftClassPath AISystemClassName;//[Offset: 0x78, Size: 0x18]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DeltaTimeToPredict;//[Offset: 0x70, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0xc8, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x110, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x114, Size: 0x4]
	float DefaultTimeToLive;//[Offset: 0x118, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x11c, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0xffffff90c89e5003
	int GetObjectCount();// 0xffffff90c89e5001
	int GetNewAvoidanceUID();// 0xffffff90c89e5001
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0xffffff90c89e5002

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: 18bae0abd4.Object
	MaterialParameterCollection* Collection;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: Canvas.Object
	Texture2D* GradientTexture0;//[Offset: 0x70, Size: 0x8]
	bool 974cc7da9e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool 440bf0a666;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool ddcfe6b0a0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	a73a699a3a* a73a699a3a;//[Offset: 0x2e0, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2e8, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0xffffff90c89e5004
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0xffffff90c89e5003
	Vector K2_Project(Vector WorldLocation);// 0xffffff90c89e5002
	void K2_DrawTriangle(Texture* RenderTexture, c545d78b7f[] Triangles);// 0xffffff90c89e5002
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0xffffff90c89e5009
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0xffffff90c89e500c
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0xffffff90c89e5005
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, c545d78b7f[] Triangles);// 0xffffff90c89e5002
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0xffffff90c89e5007
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0xffffff90c89e5004
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0xffffff90c89e5004
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0xffffff90c89e5010
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0xffffff90c89e5003

--------------------------------
Class: c545d78b7f
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: a73a699a3a.ddd6d896cd.Object

--------------------------------
Class: ddd6d896cd.Object

--------------------------------
Class: WorldComposition.Object
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	LevelStreaming*[] 915d90bc85;//[Offset: 0xa8, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0xb8, Size: 0x8]
	float RebaseOriginDistance;//[Offset: 0xc0, Size: 0x4]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,e29ff28561> 59b9b9ce1a;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: e29ff28561
	d8ccea0c38[] 284ed353c7;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] c400d93b30;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] 6cf410ad8a;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: d8ccea0c38
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: XtrmWorldSettings.WorldSettings.Info.Actor.Object
	<enum,f4aba2a783> WorldGridLayerInfos;//[Offset: 0x5f8, Size: 0x50]
	enum MapType;//[Offset: 0x648, Size: 0x1]
	int NumOfGrid;//[Offset: 0x64c, Size: 0x4]
	bool f0083fa82d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x650, Size: 0x1]
	float[] 95a8c26e7e;//[Offset: 0x660, Size: 0x10]
	58da15e916[] 0a245e9982;//[Offset: 0x678, Size: 0x10]
	XtrmPreloadManager* PreloadManager;//[Offset: 0x688, Size: 0x8]
	float[] e738fb841b;//[Offset: 0x690, Size: 0x10]
	d09075eb0b* 599a71407b;//[Offset: 0x6a0, Size: 0x8]
	MaterialInterface* MapImageMaterial;//[Offset: 0x6a8, Size: 0x40]
	bool ac46810627;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ed, Size: 0x1]
	bool e636c93b1d;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ed, Size: 0x1]
	FName df1d97142a;//[Offset: 0x6f0, Size: 0x8]
	Box2D MapRect2D;//[Offset: 0x6f8, Size: 0x14]
	class XtrmPreloadManager* 67fb796b58;//[Offset: 0x710, Size: 0x8]
	class d09075eb0b* f67ef0b6b3;//[Offset: 0x718, Size: 0x8]
	enum Climate;//[Offset: 0x720, Size: 0x1]
	ff86e94b0a*[] da16ac75e9;//[Offset: 0x728, Size: 0x10]
	int NumMapBlock;//[Offset: 0x738, Size: 0x4]
	FName LevelName;//[Offset: 0x73c, Size: 0x8]
	VolumeMinimapData[] VolumeMinimapDatas;//[Offset: 0x748, Size: 0x10]
	Box2D[] WhitezoneCenterRects;//[Offset: 0x758, Size: 0x10]
	float MinimapViewSize_Override;//[Offset: 0x768, Size: 0x4]
	bool bActivateVolumeMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	bool IsClimateCold();// 0xffffff90c89e5001

--------------------------------
Class: f4aba2a783
	float WorldMaxLocationX;//[Offset: 0x0, Size: 0x4]
	int WorldGridSizeCellsY;//[Offset: 0x4, Size: 0x4]
	float WorldMaxLocationY;//[Offset: 0x8, Size: 0x4]
	float CellSizeX;//[Offset: 0xc, Size: 0x4]
	float a9c6aa3be3;//[Offset: 0x10, Size: 0x4]
	float WorldMinLocationX;//[Offset: 0x14, Size: 0x4]
	int WorldGridSizeCellsX;//[Offset: 0x18, Size: 0x4]
	float WorldMinLocationY;//[Offset: 0x1c, Size: 0x4]
	float CellSizeY;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: 58da15e916
	float Ratio;//[Offset: 0x0, Size: 0x4]
	FName ede5f66827;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: XtrmPreloadManager.Object
	<FName,22f75142b1> 6dceb9a751;//[Offset: 0xe8, Size: 0x50]

--------------------------------
Class: 22f75142b1
	SoftClassPath[] Classes;//[Offset: 0x0, Size: 0x10]
	enum LoadType;//[Offset: 0x10, Size: 0x1]
	SoftObjectPath[] Objects;//[Offset: 0x18, Size: 0x10]
	int Priority;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: d09075eb0b.Object
	FName b75dd4fcbb;//[Offset: 0x74, Size: 0x8]
	UILocationNameDataAsset* UILocationNameDataAsset;//[Offset: 0xb8, Size: 0x8]
	void OnUnLoadRegionNameLevelFinished();// 0xffffff90c89e5000
	void OnLoadRegionNameLevelFinished();// 0xffffff90c89e5000

--------------------------------
Class: UILocationNameDataAsset.DataAsset.Object
	4134f02a2b[] fbd29f7a85;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: 4134f02a2b
	FString MapName;//[Offset: 0x0, Size: 0x10]
	be479d6ffc fe23485a78;//[Offset: 0x10, Size: 0x70]
	4d007649ef[] b9805a7c8f;//[Offset: 0x80, Size: 0x10]
	<enum,be479d6ffc> cbc7456e2d;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: be479d6ffc
	LinearColor ShadowColor;//[Offset: 0x0, Size: 0x10]
	SlateFontInfo SlateFontInfo;//[Offset: 0x10, Size: 0x58]
	Vector2D ShadowOffset;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: 4d007649ef
	Vector2D Location;//[Offset: 0x0, Size: 0x8]
	enum Importance;//[Offset: 0x8, Size: 0x1]
	FText LocationName;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: ff86e94b0a.Object

--------------------------------
Class: VolumeMinimapData
	MaterialInterface* MapImageMaterial;//[Offset: 0x0, Size: 0x40]
	uint32 VolumeMinimapID;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	int VirtualTextureNumLods;//[Offset: 0x2ac, Size: 0x4]
	<Texture2D*,403ed7eb0c*> 60ee99de65;//[Offset: 0x2b0, Size: 0x50]
	f28c6334fd LightmassSettings;//[Offset: 0x300, Size: 0x18]
	int CustomDepthStencilValue;//[Offset: 0x320, Size: 0x4]
	byte MeshHolesMaxLod;//[Offset: 0x328, Size: 0x1]
	HierarchicalInstancedStaticMeshComponent*[] eab1232cb0;//[Offset: 0x330, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x348, Size: 0x198]
	9914ea4095[] LODDistancesSet;//[Offset: 0x4e8, Size: 0x10]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x500, Size: 0x8]
	fabaea4de9[] LandscapeMaterialsOverride;//[Offset: 0x530, Size: 0x10]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x598, Size: 0x8]
	int VirtualTextureLodBias;//[Offset: 0x5a0, Size: 0x4]
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	enum f7161c7785;//[Offset: 0x5cc, Size: 0x1]
	LandscapeHeightfieldCollisionComponent*[] 0bf1f3c5e3;//[Offset: 0x5d0, Size: 0x10]
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x5e8, Size: 0x8]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f9, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f9, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f9, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f9, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f9, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f9, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5f9, Size: 0x1]
	bool 4c8df66985;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x600, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x600, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x610, Size: 0x1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x618, Size: 0x10]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62d, Size: 0x1]
	bool 24551fa050;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62d, Size: 0x1]
	float LDMaxDrawDistance;//[Offset: 0x630, Size: 0x4]
	PhysicalMaterial* 51b292fd3c;//[Offset: 0x638, Size: 0x8]
	enum CustomDepthStencilWriteMask;//[Offset: 0x640, Size: 0x1]
	bool 907edef2ca;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x641, Size: 0x1]
	bool f454cebfcb;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x641, Size: 0x1]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x648, Size: 0x10]
	LightingChannels LightingChannels;//[Offset: 0x658, Size: 0x1]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0xffffff90c89e5002
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0xffffff90c89e5002
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0xffffff90c89e5002
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0xffffff90c89e5004
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0xffffff90c89e5001
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0xffffff90c89e500c
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0xffffff90c89e5001
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0xffffff90c89e5001
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0xffffff90c89e5001
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0xffffff90c89e5001
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0xffffff90c89e5001

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.638112bfc1.Object
	int SizeX;//[Offset: 0x14c, Size: 0x4]
	byte MipsAddressV;//[Offset: 0x154, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x155, Size: 0x1]
	bool 3f17a6c4b9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x157, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x157, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x157, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0x158, Size: 0x10]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x169, Size: 0x1]
	byte AddressY;//[Offset: 0x16a, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x16b, Size: 0x1]
	byte AddressX;//[Offset: 0x16c, Size: 0x1]
	int SizeY;//[Offset: 0x170, Size: 0x4]

--------------------------------
Class: TextureRenderTarget.Texture.638112bfc1.Object
	float TargetGamma;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 0x1]
	float Duration;//[Offset: 0x560, Size: 0x4]
	cb76d195d2 cb76d195d2;//[Offset: 0x568, Size: 0x70]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5e0, Size: 0x18]
	Vector DefaultUpVector;//[Offset: 0x5fc, Size: 0xc]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	InterpCurveVector SplineInfo;//[Offset: 0x618, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x630, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x648, Size: 0x18]
	void UpdateSpline();// 0xffffff90c89e5000
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0xffffff90c89e5002
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5004
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xffffff90c89e5001
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5005
	void SetTangentColor(out const LinearColor TangentColor);// 0xffffff90c89e5001
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5004
	void SetSplineWorldPoints(out const Vector[] Points);// 0xffffff90c89e5001
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0xffffff90c89e5003
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5003
	void SetSplineLocalPoints(out const Vector[] Points);// 0xffffff90c89e5001
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xffffff90c89e5001
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0xffffff90c89e5003
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5004
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5004
	void SetDrawDebug(bool bShow);// 0xffffff90c89e5001
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0xffffff90c89e5002
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0xffffff90c89e5003
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0xffffff90c89e5002
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0xffffff90c89e5002
	bool IsClosedLoop();// 0xffffff90c89e5001
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0xffffff90c89e5002
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0xffffff90c89e5003
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0xffffff90c89e5002
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0xffffff90c89e5003
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0xffffff90c89e5002
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0xffffff90c89e5002
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0xffffff90c89e5003
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0xffffff90c89e5002
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0xffffff90c89e5003
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xffffff90c89e5003
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff90c89e5004
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff90c89e5003
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0xffffff90c89e5005
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0xffffff90c89e5004
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0xffffff90c89e5004
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0xffffff90c89e5004
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff90c89e5004
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff90c89e5003
	byte GetSplinePointType(int PointIndex);// 0xffffff90c89e5002
	float GetSplineLength();// 0xffffff90c89e5001
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0xffffff90c89e5003
	Vector GetScaleAtSplinePoint(int PointIndex);// 0xffffff90c89e5002
	Vector GetScaleAtSplineInputKey(float InKey);// 0xffffff90c89e5002
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0xffffff90c89e5002
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff90c89e5004
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xffffff90c89e5003
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff90c89e5003
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff90c89e5004
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xffffff90c89e5003
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff90c89e5004
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff90c89e5003
	int GetNumberOfSplineSegments();// 0xffffff90c89e5001
	int GetNumberOfSplinePoints();// 0xffffff90c89e5001
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff90c89e5004
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff90c89e5003
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0xffffff90c89e5004
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0xffffff90c89e5003
	float GetLengthInRange(const int StartIndex, const int EndIndex);// 0xffffff90c89e5003
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0xffffff90c89e5002
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0xffffff90c89e5003
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xffffff90c89e5003
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0xffffff90c89e5002
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0xffffff90c89e5002
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff90c89e5004
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0xffffff90c89e5002
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff90c89e5003
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0xffffff90c89e5004
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0xffffff90c89e5002
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff90c89e5003
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff90c89e5003
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff90c89e5003
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0xffffff90c89e5002
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff90c89e5003
	void ClearSplinePoints(bool bUpdateSpline);// 0xffffff90c89e5001
	void AddSplineWorldPoint(out const Vector Position);// 0xffffff90c89e5001
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5004
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff90c89e5003
	void AddSplineLocalPoint(out const Vector Position);// 0xffffff90c89e5001
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0xffffff90c89e5002
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0xffffff90c89e5002

--------------------------------
Class: cb76d195d2
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat f9cc531f99;//[Offset: 0x48, Size: 0x18]
	19abbabaac* MetaData;//[Offset: 0x60, Size: 0x8]
	uint32 Version;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: 19abbabaac.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x68, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: 403ed7eb0c.Object
	LandscapeComponent* adc9048318;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int8[] 808f812d06;//[Offset: 0x560, Size: 0x10]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x578, Size: 0x8]
	int ForcedLOD;//[Offset: 0x590, Size: 0x4]
	int LODBias;//[Offset: 0x594, Size: 0x4]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x59c, Size: 0x34]
	Texture2D*[] 62dd8fb281;//[Offset: 0x5d8, Size: 0x10]
	LandscapeLODStreamingProxy* 8b79afaede;//[Offset: 0x5e8, Size: 0x8]
	int SectionBaseY;//[Offset: 0x648, Size: 0x4]
	Texture2D*[] 7ff8b6d2cc;//[Offset: 0x650, Size: 0x10]
	Texture2D* d0b6fd1635;//[Offset: 0x660, Size: 0x8]
	MaterialInstanceDynamic*[] 6ff553fe7c;//[Offset: 0x6a0, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x6b0, Size: 0x10]
	Texture2D* HeightmapTexture;//[Offset: 0x6d0, Size: 0x8]
	int8[] ffff436fce;//[Offset: 0x6e0, Size: 0x10]
	cbbed14f8f[] 1fb37e922b;//[Offset: 0x700, Size: 0x10]
	float[] SubSectionLODMultiplier;//[Offset: 0x710, Size: 0x10]
	bool 24d34c1ac4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 0x1]
	MaterialInstanceDynamic*[] e2554c707f;//[Offset: 0x740, Size: 0x10]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x750, Size: 0x10]
	7fae04c12e[] OverrideMaterials;//[Offset: 0x760, Size: 0x10]
	MaterialInterface* OverrideMaterial;//[Offset: 0x778, Size: 0x8]
	bool 4660d273ad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1]
	MaterialInterface*[] 6b4b70f729;//[Offset: 0x788, Size: 0x10]
	byte[] f31b36b3c1;//[Offset: 0x798, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x7a8, Size: 0x8]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x7b0, Size: 0x8]
	int SectionBaseX;//[Offset: 0x7b8, Size: 0x4]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0xffffff90c89e5002
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0xffffff90c89e5003
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0xffffff90c89e5003

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte[] 3f683dad6e;//[Offset: 0x578, Size: 0x10]
	PhysicalMaterial*[] 264ddf96b7;//[Offset: 0x5c8, Size: 0x10]
	LandscapeComponent* RenderComponent;//[Offset: 0x5dc, Size: 0x34]
	LandscapeLayerInfoObject*[] 637bbf748a;//[Offset: 0x610, Size: 0x10]
	LandscapeComponent* GetRenderComponent();// 0xffffff90c89e5001

--------------------------------
Class: LandscapeLODStreamingProxy.638112bfc1.Object

--------------------------------
Class: cbbed14f8f
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte d47de2210e;//[Offset: 0x8, Size: 0x1]
	byte 9ebaf7c349;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x3a8, Size: 0x8]
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xffffff90c89e5002
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xffffff90c89e5002
	float K2_GetScalarParameterValue(FName ParameterName);// 0xffffff90c89e5002

--------------------------------
Class: 7fae04c12e
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] 68ee1b06f1;//[Offset: 0x768, Size: 0x10]
	bool d49de48ebc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x778, Size: 0x1]
	Box[] 946229c506;//[Offset: 0x790, Size: 0x10]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0xffffff90c89e5002

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int InstanceEndCullDistance;//[Offset: 0x664, Size: 0x4]
	int 3114fbbb7b;//[Offset: 0x668, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x66c, Size: 0x4]
	int[] fa772cf4d2;//[Offset: 0x678, Size: 0x10]
	a1a1d91fee[] 3d3ed47bb0;//[Offset: 0x688, Size: 0x10]
	float[] PerInstanceSMCustomData;//[Offset: 0x698, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x6f4, Size: 0x4]
	de0d50ac8d[] PerInstanceSMData;//[Offset: 0x6f8, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xffffff90c89e5006
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0xffffff90c89e5005
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0xffffff90c89e5002
	bool RemoveInstance(int InstanceIndex);// 0xffffff90c89e5002
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0xffffff90c89e5004
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0xffffff90c89e5004
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0xffffff90c89e5003
	int GetInstanceCount();// 0xffffff90c89e5001
	void ClearInstances();// 0xffffff90c89e5000
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xffffff90c89e5006
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xffffff90c89e5007
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0xffffff90c89e5002
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0xffffff90c89e5003
	int AddInstance(out const Transform InstanceTransform);// 0xffffff90c89e5002

--------------------------------
Class: a1a1d91fee

--------------------------------
Class: de0d50ac8d
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: 9914ea4095
	float[] Distances;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: fabaea4de9
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineSegment*[] Segments;//[Offset: 0x560, Size: 0x10]
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x570, Size: 0x10]
	MeshComponent*[] 9ebf74de2c;//[Offset: 0x580, Size: 0x10]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0xffffff90c89e5001

--------------------------------
Class: LandscapeSplineSegment.Object
	213866fed6 Connections;//[Offset: 0x68, Size: 0x18]
	InterpCurveVector SplineInfo;//[Offset: 0x98, Size: 0x18]
	6134f9e6c2[] Points;//[Offset: 0xb0, Size: 0x10]
	Box Bounds;//[Offset: 0xc0, Size: 0x1c]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: 213866fed6
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]
	float ed8455220d;//[Offset: 0x8, Size: 0x4]
	FName SocketName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x64, Size: 0xc]
	Rotator Rotation;//[Offset: 0x70, Size: 0xc]
	float Width;//[Offset: 0x7c, Size: 0x4]
	float b59f9a9c71;//[Offset: 0x80, Size: 0x4]
	float f8f744a56e;//[Offset: 0x84, Size: 0x4]
	float ee4f871c77;//[Offset: 0x88, Size: 0x4]
	float 3a3db28e8f;//[Offset: 0x8c, Size: 0x4]
	float c46281af1e;//[Offset: 0x90, Size: 0x4]
	float 27e4e6cdbd;//[Offset: 0x94, Size: 0x4]
	float 6cef87ece5;//[Offset: 0x98, Size: 0x4]
	fa6248a141[] 36002ff78e;//[Offset: 0xa0, Size: 0x10]
	6134f9e6c2[] Points;//[Offset: 0xb0, Size: 0x10]
	Box Bounds;//[Offset: 0xc0, Size: 0x1c]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: fa6248a141
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: 6134f9e6c2
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Left;//[Offset: 0xc, Size: 0xc]
	Vector Right;//[Offset: 0x18, Size: 0xc]
	Vector 9081d8d4c2;//[Offset: 0x24, Size: 0xc]
	Vector 17235dfd52;//[Offset: 0x30, Size: 0xc]
	Vector cf40e6d526;//[Offset: 0x3c, Size: 0xc]
	Vector 17e73d9953;//[Offset: 0x48, Size: 0xc]
	Vector d3f95151ea;//[Offset: 0x54, Size: 0xc]
	Vector b6ff343754;//[Offset: 0x60, Size: 0xc]
	float 5918c9034a;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool d4f73d91c5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69c, Size: 0x1]
	bool 8041a2a218;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69c, Size: 0x1]
	bool 91ab49bafd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x69c, Size: 0x1]
	28b517d0bb SplineParams;//[Offset: 0x6a0, Size: 0x58]
	BodySetup* BodySetup;//[Offset: 0x6f8, Size: 0x8]
	void UpdateMesh();// 0xffffff90c89e5000
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0xffffff90c89e5005
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0xffffff90c89e5002
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0xffffff90c89e5002
	Vector GetStartTangent();// 0xffffff90c89e5001
	Vector2D GetStartScale();// 0xffffff90c89e5001
	float GetStartRoll();// 0xffffff90c89e5001
	Vector GetStartPosition();// 0xffffff90c89e5001
	Vector2D GetStartOffset();// 0xffffff90c89e5001
	Vector GetSplineUpDir();// 0xffffff90c89e5001
	byte GetForwardAxis();// 0xffffff90c89e5001
	Vector GetEndTangent();// 0xffffff90c89e5001
	Vector2D GetEndScale();// 0xffffff90c89e5001
	float GetEndRoll();// 0xffffff90c89e5001
	Vector GetEndPosition();// 0xffffff90c89e5001
	Vector2D GetEndOffset();// 0xffffff90c89e5001
	float GetBoundaryMin();// 0xffffff90c89e5001
	float GetBoundaryMax();// 0xffffff90c89e5001

--------------------------------
Class: 28b517d0bb
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector 834bfd93f6;//[Offset: 0xc, Size: 0xc]
	Vector2D 7f2e8e98d4;//[Offset: 0x18, Size: 0x8]
	float 62aff4957d;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D f4654033cf;//[Offset: 0x38, Size: 0x8]
	Vector 60771f087e;//[Offset: 0x40, Size: 0xc]
	float 6b452e49e0;//[Offset: 0x4c, Size: 0x4]
	Vector2D dd38d93563;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: XtrmPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bForceSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	enum MatchStartType;//[Offset: 0x2d5, Size: 0x1]
	PlayerController*[] e505b0fd20;//[Offset: 0x2d8, Size: 0x10]
	StartActivationVolume*[] ActivationVolumes;//[Offset: 0x2e8, Size: 0x10]
	float StartRadius;//[Offset: 0x2fc, Size: 0x4]
	int Weight;//[Offset: 0x300, Size: 0x4]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	float GetRandomStartYawRotation();// 0xffffff90c89e5001
	Rotator GetRandomStartRotation();// 0xffffff90c89e5001
	Vector GetRandomStartLocation();// 0xffffff90c89e5001

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x2cc, Size: 0x8]

--------------------------------
Class: StartActivationVolume.Volume.Brush.Actor.Object

--------------------------------
Class: AirborneEjectionArea.Actor.Object
	SphereComponent* SphereComponent;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: BP_BluezoneEffectController_C.BluezoneEffectController.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b8, Size: 0x8]

--------------------------------
Class: BluezoneEffectController.Actor.Object
	BluezoneEffectBase* 59c0c614a3;//[Offset: 0x2a8, Size: 0x8]
	class BluezoneEffectBase* DefaultBlueZoneEffectClass;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: BluezoneEffectBase.Actor.Object

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2e0, Size: 0x4]

--------------------------------
Class: XtrmPassCarePackageAreaRectangle.XtrmPassAreaRectangle.Actor.Object

--------------------------------
Class: XtrmPassAreaRectangle.Actor.Object
	Box 6f830d0827;//[Offset: 0x2a8, Size: 0x1c]
	BoxComponent* BoxComponent;//[Offset: 0x2c8, Size: 0x8]

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x2e8, Size: 0x8]
	void SetAreaClass(class NavArea NewAreaClass);// 0xffffff90c89e5001

--------------------------------
Class: NavArea.2571ea275f.Object
	float DefaultCost;//[Offset: 0x68, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x6c, Size: 0x4]
	Color DrawColor;//[Offset: 0x70, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x74, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x79, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x79, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x79, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x79, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x79, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x79, Size: 0x1]

--------------------------------
Class: XtrmPassBlueZoneAreaRectangle.XtrmPassAreaRectangle.Actor.Object

--------------------------------
Class: XtrmPassRedZoneAreaRectangle.XtrmPassAreaRectangle.Actor.Object

--------------------------------
Class: Africa_Main_C.LevelScriptActor.Actor.Object
	3aeed9dadb UberGraphFrame;//[Offset: 0x2b0, Size: 0x8]
	void ReceiveBeginPlay();// 0xffffff90c89e5000
	void ExecuteUbergraph_Africa_Main(int EntryPoint, bool CallFunc_CreateFarLandscape_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0xffffff90c89e5001

--------------------------------
Class: 3aeed9dadb

--------------------------------
Class: BattleRoyalePlayerController.XtrmPlayerController.PlayerController.Controller.Actor.Object
	BluezoneInOutComponent* BluezoneInOut;//[Offset: 0xf18, Size: 0x8]
	BluezoneInOutSoundEffectComponent* BluezoneInOutSoundEffect;//[Offset: 0xf30, Size: 0x8]
	DeliveryDroneDebugComponent* DeliveryDroneDebugComponent;//[Offset: 0xf60, Size: 0x8]
	void ToggleViewTargetDeliveryDrone();// 0xffffff90c89e5000
	void StartBattleImmediately();// 0xffffff90c89e5000
	void SetDisplayDeliveryDroneRoute(const bool bNextDisplayDeliveryDroneRoute);// 0xffffff90c89e5001
	void SetDeliveryDroneDurability(const float NewDurability);// 0xffffff90c89e5001
	void 0767402d71(XtrmPlayerState* TargetPlayerState);// 0xffffff90c89e5001
	void 8b93e40ac5();// 0xffffff90c89e5000
	void d0d5b49518();// 0xffffff90c89e5000
	void 89ef8aec00(XtrmPlayerState* TargetPlayerState, bool bIsAutoFollow);// 0xffffff90c89e5002
	void 6abe365f59(const float NewDurability);// 0xffffff90c89e5001
	void 57cc108501(XtrmPlayerState* TargetPlayerState);// 0xffffff90c89e5001
	void 95263c71c5();// 0xffffff90c89e5000
	void 34cfeabd7a();// 0xffffff90c89e5000
	void 0b24bfd3ce(const Vector_NetQuantize100 RequestedServerLocation, const ItemInstance[] RequestedItemsInstance);// 0xffffff90c89e5002
	void 3278ac151c(XtrmPlayerState* TargetPlayerState);// 0xffffff90c89e5001
	void Server_ForceStartMatch(const bool bRideAircraftInStart);// 0xffffff90c89e5001
	void 5a080fe0e9();// 0xffffff90c89e5000
	void c96932dbb0(float BlockTime);// 0xffffff90c89e5001
	void a12480c587();// 0xffffff90c89e5000
	void e1fd06f9b2();// 0xffffff90c89e5000
	void RideAircraftImmediately();// 0xffffff90c89e5000
	void ResultMapLogTestData();// 0xffffff90c89e5000
	void RequestRestockItemsToDroneStore();// 0xffffff90c89e5000
	void RequestResetUsableTimeToDroneStore();// 0xffffff90c89e5000
	void DenyTransfer();// 0xffffff90c89e5000
	void DenyInvitation(float InBlockTime);// 0xffffff90c89e5001
	void 60ed435810(XtrmPlayerState* Transferer);// 0xffffff90c89e5001
	void 365410f351();// 0xffffff90c89e5000
	void c70a800a64(XtrmPlayerState* InviterPlayerState);// 0xffffff90c89e5001
	void 1b2f708583(const b77c6a2984 Response);// 0xffffff90c89e5001
	void 12c86d0584();// 0xffffff90c89e5000
	void 4b46319403();// 0xffffff90c89e5000
	void Client_FailedToSelectRebirthTarget();// 0xffffff90c89e5000

--------------------------------
Class: XtrmPlayerController.PlayerController.Controller.Actor.Object
	CurveFloat* 1b6a37aaeb;//[Offset: 0x858, Size: 0x8]
	bool bUseInputCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	6158ab16f2* 6158ab16f2;//[Offset: 0x878, Size: 0x8]
	RecommendUserInfo[] RecommendUserInfo;//[Offset: 0x890, Size: 0x10]
	enum CameraViewBehaviour;//[Offset: 0x8a4, Size: 0x1]
	XtrmDroneHandlingComponent* DroneHandlingComponent;//[Offset: 0xa00, Size: 0x8]
	SoftObjectPath Path_CurveAccelerateRotationX;//[Offset: 0xa08, Size: 0x18]
	float DefaultFOV;//[Offset: 0xacc, Size: 0x4]
	RadioMessageSetting RadioMessageSetting;//[Offset: 0xae0, Size: 0x38]
	SoftObjectPath Path_CurveGyroscopeRotationThresholdX;//[Offset: 0xb28, Size: 0x18]
	float DefaultFPPFOV;//[Offset: 0xb5c, Size: 0x4]
	050742ce9d* 050742ce9d;//[Offset: 0xb88, Size: 0x8]
	CameraComponent* 1e5acf4219;//[Offset: 0xb98, Size: 0x8]
	VoiceInGameComponent* VoiceComponent;//[Offset: 0xba0, Size: 0x8]
	e71fe1ed8a[] NearClippingLevelsOverZ;//[Offset: 0xbc8, Size: 0x10]
	ProjectileCollectComponent* ProjectileCollectComponent;//[Offset: 0xbe0, Size: 0x8]
	CurveFloat* 0d2347f128;//[Offset: 0xbf0, Size: 0x8]
	bool e97c9cd14d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 0x1]
	SoftObjectPath Path_CurveAccelerateRotationY;//[Offset: 0xc38, Size: 0x18]
	float YawInputCorrectionValue;//[Offset: 0xc80, Size: 0x4]
	CurveFloat* 0eea750276;//[Offset: 0xc88, Size: 0x8]
	float NetworkDelayPopupTime;//[Offset: 0xd0c, Size: 0x4]
	enum 5fd57741ef;//[Offset: 0xd28, Size: 0x1]
	ItemPackageRegisterComponent* ItemPackageRegisterComponent;//[Offset: 0xd30, Size: 0x8]
	SphereComponent* 8b0dbf09b1;//[Offset: 0xd50, Size: 0x8]
	RotationInputScaleInfo GyroscopeInputScale;//[Offset: 0xd68, Size: 0x10]
	CurveFloat* ff86e4dae2;//[Offset: 0xd80, Size: 0x8]
	SoftObjectPath Path_CurvePanelRotationThresholdX;//[Offset: 0xde8, Size: 0x18]
	cb17bf3424* cb17bf3424;//[Offset: 0xe28, Size: 0x8]
	CurveFloat* 540fa6c5e8;//[Offset: 0xe30, Size: 0x8]
	RotationInputScaleInfo TouchInputScale;//[Offset: 0xe60, Size: 0x10]
	CurveFloat* 7547e720b4;//[Offset: 0xe70, Size: 0x8]
	SoftObjectPath Path_CurveGyroscopeRotationThresholdY;//[Offset: 0xe88, Size: 0x18]
	Vector_NetQuantizeNormal 5194e801d5;//[Offset: 0xec8, Size: 0xc]
	SoftObjectPath Path_CurvePanelRotationThresholdY;//[Offset: 0xee0, Size: 0x18]
	float PitchInputCorrectionValue;//[Offset: 0xf08, Size: 0x4]
	void WriteServerStats();// 0xffffff90c89e5000
	void WriteLastFrameServerStat();// 0xffffff90c89e5000
	void WeaponRelZShift(float ShiftZ);// 0xffffff90c89e5001
	void VehicleCollisionDisable();// 0xffffff90c89e5000
	void UseOldMovement(uint32 bUse);// 0xffffff90c89e5001
	void ToggleSpectatingMode();// 0xffffff90c89e5000
	void ToggleMustReviveSelf();// 0xffffff90c89e5000
	void ToggleMouseSmoothing();// 0xffffff90c89e5000
	void ToggleGameOver();// 0xffffff90c89e5000
	void ToggleAnimPostProcess();// 0xffffff90c89e5000
	void ToggleAllUI();// 0xffffff90c89e5000
	void ToggleAIActivateBT();// 0xffffff90c89e5000
	void TitanTest(float InScale);// 0xffffff90c89e5001
	void TestUISetVisible(FName WidgetName, byte Mode);// 0xffffff90c89e5002
	void TestSetNearClippingLevel(float InNearClipping);// 0xffffff90c89e5001
	void TestServerEnsureMsg();// 0xffffff90c89e5000
	void TestServerEnsure();// 0xffffff90c89e5000
	void TestServerCrash();// 0xffffff90c89e5000
	void Test_ShowKillfeed();// 0xffffff90c89e5000
	void TeleportToWorld(float X, float Y);// 0xffffff90c89e5002
	void StopStat();// 0xffffff90c89e5000
	void StopRecordServerStat(bool bWriteFile);// 0xffffff90c89e5001
	void StopBluezone(int IsStopBluezone);// 0xffffff90c89e5001
	void StopAutoHPRecovery();// 0xffffff90c89e5000
	void StartStat(int Loop);// 0xffffff90c89e5001
	void StartRecordServerStat();// 0xffffff90c89e5000
	void StartNet(int Loop);// 0xffffff90c89e5001
	void StartFreefall(float XPos, float YPos, float ZPos, uint32 InBagItemID);// 0xffffff90c89e5004
	void SpawnVehicle(const FName VehicleRefPath);// 0xffffff90c89e5001
	void SpawnRedzoneOnPlayer();// 0xffffff90c89e5000
	void SpawnDeathBox(uint32 NumItem, uint32 ItemId, uint16 InStackCount);// 0xffffff90c89e5003
	void SpawnCustomAircraftCarePackage(byte Mode);// 0xffffff90c89e5001
	void SpawnAircraftCarePackage(byte Mode, float Height);// 0xffffff90c89e5002
	void SpawnAI(int SpawnCount);// 0xffffff90c89e5001
	void ShowBoostGauge();// 0xffffff90c89e5000
	void ShowAllUI();// 0xffffff90c89e5000
	void SetWorldOriginLocation(int X, int Y, int Z);// 0xffffff90c89e5003
	void SetWorldOrigin();// 0xffffff90c89e5000
	void SetWeather(FName WeatherName);// 0xffffff90c89e5001
	void SetVehicleHealth(float NewHealth);// 0xffffff90c89e5001
	void SetUpgradeGunPartsCount(byte InCount);// 0xffffff90c89e5001
	void SetTimeSpeed(float Rate);// 0xffffff90c89e5001
	void SetSpeed(float Modifier);// 0xffffff90c89e5001
	void SetSnipingCount(byte InCount);// 0xffffff90c89e5001
	void SetShieldGauge(float NewShieldGauge);// 0xffffff90c89e5001
	void SetShieldDepolyCount(byte InCount);// 0xffffff90c89e5001
	void SetSendWeaponFireReliability(bool bReliable);// 0xffffff90c89e5001
	void SetReviveCount(byte InCount);// 0xffffff90c89e5001
	void SetRemodelGunCount(byte InCount);// 0xffffff90c89e5001
	void SetRedzoneLocation(float X, float Y);// 0xffffff90c89e5002
	void SetRedzoneLifeTime(float InRedZoneLifeTime);// 0xffffff90c89e5001
	void SetRedeployCount(byte InCount);// 0xffffff90c89e5001
	void SetLootBoxGetCount(byte InCount);// 0xffffff90c89e5001
	void SetLensFlareIntensity(float Value);// 0xffffff90c89e5001
	void SetKillCount(byte InCount);// 0xffffff90c89e5001
	void SetInputScale(float Up, float Down, float Left, float Right);// 0xffffff90c89e5004
	void SetHPFull();// 0xffffff90c89e5000
	void SetHeight(float Z);// 0xffffff90c89e5001
	void SetHealth(float NewHealth);// 0xffffff90c89e5001
	void SetHealAmount(float InAmount);// 0xffffff90c89e5001
	void SetHeadShotCount(byte InCount);// 0xffffff90c89e5001
	void SetGyroscopeInputScale(float Up, float Down, float Left, float Right);// 0xffffff90c89e5004
	void SetFrontWheelSteerAngle(const float Angle);// 0xffffff90c89e5001
	void SetDroneFuel(const float NewFuel);// 0xffffff90c89e5001
	void SetDroneDurability(const float NewDurability);// 0xffffff90c89e5001
	void SetDroneDestroyCount(byte InCount);// 0xffffff90c89e5001
	void SetDamageAmount(float InAmount);// 0xffffff90c89e5001
	void SetCountryCode(FString InCountry);// 0xffffff90c89e5001
	void SetCheatSkydivingCameraRatio(out const float InHorizontalRatio, out const float InVerticalRatio);// 0xffffff90c89e5002
	void SetCheatFreeCameraRatio(out const float InHorizontalRatio, out const float InVerticalRatio);// 0xffffff90c89e5002
	void SetCharacterType(FName TypeName);// 0xffffff90c89e5001
	void SetCarePackageGetCount(byte InCount);// 0xffffff90c89e5001
	void SetBoostGauge(float NewBoostGauge);// 0xffffff90c89e5001
	void SetAssistCount(byte InCount);// 0xffffff90c89e5001
	void SetAppearance(int ItemId);// 0xffffff90c89e5001
	void SetActiveCharacterMovementTick(bool bActive);// 0xffffff90c89e5001
	void ServerVoicechatTeamChangeForObserver(XtrmCharacter* TargetCharacter);// 0xffffff90c89e5001
	void ServerVerifyNearestFollowingTarget();// 0xffffff90c89e5000
	void ServerUpdateVoicechatUserIdList(const int TeamNumber);// 0xffffff90c89e5001
	void ServerSystemInfo(const SystemInfo InSystemInfo);// 0xffffff90c89e5001
	void d20db898e1(Rotator DeltaRotation, bool bUseInterp);// 0xffffff90c89e5002
	void ServerStat(enum StatType, FString Password, int LoopCount);// 0xffffff90c89e5003
	void 555aacbddd();// 0xffffff90c89e5000
	void 351221a5f7(Rotator Current);// 0xffffff90c89e5001
	void a3775d1ee3(const FName VehicleRefPath);// 0xffffff90c89e5001
	void ServerSpawnReport();// 0xffffff90c89e5000
	void 8638d88b2c(const TeamMemberInfo ViewTargetMemberInfo);// 0xffffff90c89e5001
	void 8aa8ba6b39(Actor* NewViewTarget);// 0xffffff90c89e5001
	void 402b245c05(bool bNewThirdPerson);// 0xffffff90c89e5001
	void ServerSetClientFps(const ClientPlayerStat InClientPlayerStat);// 0xffffff90c89e5001
	void 1d1361a933(const Vector_NetQuantizeNormal InAccumViewRotation);// 0xffffff90c89e5001
	void 2b06440d60(VehicleTrunkComponent* InTrunkComponent);// 0xffffff90c89e5001
	void ServerRequestNearestFollowingTarget(const Vector_NetQuantize100 InServerLocation);// 0xffffff90c89e5001
	void 3e434e80fb(const float InRadius, const 37bc153bb7[] InDebugDatas);// 0xffffff90c89e5002
	void b6e1910ff5(int InMessageIndex, int InMessageVoiceTextIndex, FString MessageText);// 0xffffff90c89e5003
	void ServerRadioMessageShareItemCount(int InMessageIndex, int InMessageVoiceTextIndex, int InItemID, int InItemCount);// 0xffffff90c89e5004
	void ServerRadioMessageReviveInfo(int InMessageIndex, int InMessageVoiceTextIndex);// 0xffffff90c89e5002
	void 2043371b5e(int InMessageIndex, int InMessageVoiceTextIndex, const int[] InSlotIndexList);// 0xffffff90c89e5003
	void 27eb1ddb86(int InMessageIndex, int InMessageVoiceTextIndex, const int InItemID, const bool InIsLock);// 0xffffff90c89e5004
	void f982511b95(int InMessageIndex, int InMessageVoiceTextIndex, const Vector_NetQuantize InServerLocation);// 0xffffff90c89e5003
	void b83dd837ac(int InMessageIndex, int InMessageVoiceTextIndex, const Vector_NetQuantize InServerLocation, const int InItemID, int InItemCount, const bool InIsLock, enum MarkerType);// 0xffffff90c89e5007
	void ServerRadioMessageEnemySpottedWithName(int InMessageIndex, int InMessageVoiceTextIndex, const Vector_NetQuantize InServerLocation, FString InTargetName, enum MarkerType);// 0xffffff90c89e5005
	void 84e0a9906a(int InMessageIndex, int InMessageVoiceTextIndex, const Vector_NetQuantize InServerLocation, enum MarkerType);// 0xffffff90c89e5004
	void 045cebbb04(int InMessageIndex, int InMessageVoiceTextIndex);// 0xffffff90c89e5002
	void ServerParamTest();// 0xffffff90c89e5000
	void 06cb16232d(bool bIsPrev);// 0xffffff90c89e5001
	void ServerNetworkFailureAddCount(int InClusterPing, int InDediPing, float InDisconnectTimeDuration);// 0xffffff90c89e5003
	void ServerMilosSendReport(const byte[] InDataArray);// 0xffffff90c89e5001
	void 0e0cfc5a6c(GraveyardCrowController* InCrowController, const int InInternalId);// 0xffffff90c89e5002
	void 92e117976e();// 0xffffff90c89e5000
	void 81960025b9(const FName InClassName, const FName InItemName, const float InCullDistance, const Vector InCenterLocation);// 0xffffff90c89e5004
	void 44149b5654(FString Cmd);// 0xffffff90c89e5001
	void ServerCMD(FString Cmd);// 0xffffff90c89e5001
	void b0348c861a();// 0xffffff90c89e5000
	void 9424bd9909(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);// 0xffffff90c89e5003
	void ServerAuthMove(float Duration);// 0xffffff90c89e5001
	void 667dc5bbe2(int Code, FString Info);// 0xffffff90c89e5002
	void 59eb53d0b8(FString Cookie);// 0xffffff90c89e5001
	void Server_UnreliablePong(int SeqID, int64 DateTimeTickFromServer, int ClientPingMsec);// 0xffffff90c89e5003
	void Server_StopWeaponInspection(const enum InInspectionStopReason);// 0xffffff90c89e5001
	void Server_StopListeningItemPackage(ItemPackage* InItemPackage);// 0xffffff90c89e5001
	void Server_StartWeaponInspection();// 0xffffff90c89e5000
	void Server_StartListeningItemPackage(ItemPackage* InItemPackage);// 0xffffff90c89e5001
	void a60d016b1b(int MicOptionType);// 0xffffff90c89e5001
	void Server_ReviveSelfDecided(const bool bDoReviveSelf);// 0xffffff90c89e5001
	void Server_RequestUserRecommend(FString InRecommendeeAccountId);// 0xffffff90c89e5001
	void Server_RequestTeamKillReport(const FString[] InTeamKillerNickNames);// 0xffffff90c89e5001
	void 0886b57fd6(FString Text, FString InTargetNickName, int BitReason, int BitCheatCategory);// 0xffffff90c89e5004
	void 416757388a(const enum ReportType, FString Text);// 0xffffff90c89e5002
	void f4c63cf567(AutomaticDoorControlComponent* AutomaticDoorControl);// 0xffffff90c89e5001
	void 9f15451778(SpeedGateComponent* SpeedGate);// 0xffffff90c89e5001
	void 649802bc0b(SecurityGateComponent* SecurityGate);// 0xffffff90c89e5001
	void 5dfe135129(HologramPostController* HologramPostController, const int Index);// 0xffffff90c89e5002
	void d9870813cf(HologramPostController* HologramPostController, const int Index);// 0xffffff90c89e5002
	void Server_ReportCharacterLocation();// 0xffffff90c89e5000
	void Server_ReliablePong(int SeqID, int64 DateTimeTickFromServer, int ClientPingMsec);// 0xffffff90c89e5003
	void Server_PSOSetActorLocation(Vector Pos);// 0xffffff90c89e5001
	void Server_NotifyUserPlatform(FString InUserPlatformString);// 0xffffff90c89e5001
	void SendTokenMessage(float WarningMessageTime, int PassToken, int SurvivePhase);// 0xffffff90c89e5003
	void SendSystemMessage(enum MessageType, const int MsgType, FString AdditionalString);// 0xffffff90c89e5003
	void 234989838d(const 53655e6021 RotationParam);// 0xffffff90c89e5001
	void RingSecurityGateAlarm();// 0xffffff90c89e5000
	void RingGraveyardBell();// 0xffffff90c89e5000
	void RestoreBrokenWindow(float Radius);// 0xffffff90c89e5001
	void RespawnFromGroggy();// 0xffffff90c89e5000
	void RespawnFromDeath();// 0xffffff90c89e5000
	void ResetOtherCharacterMeshCollision();// 0xffffff90c89e5000
	void ResetInputScale();// 0xffffff90c89e5000
	void RequestServerMemReport();// 0xffffff90c89e5000
	void ReportWindowsCount(const float InRadius);// 0xffffff90c89e5001
	void ReportCharacterLocation();// 0xffffff90c89e5000
	void RelZShift(float ShiftZ);// 0xffffff90c89e5001
	void PrintRotationStats();// 0xffffff90c89e5000
	void PrintParticlesList();// 0xffffff90c89e5000
	void PrintCharacterMovementStats();// 0xffffff90c89e5000
	void PreventIgnoreWall(bool bEnable);// 0xffffff90c89e5001
	void PostInputAmmoSim(bool bEnable);// 0xffffff90c89e5001
	void PasteDebugInfo();// 0xffffff90c89e5000
	void ParaCutoff();// 0xffffff90c89e5000
	void OverrideMovementMode(bool bEnbable, int NewMode, int NewCustmomMode);// 0xffffff90c89e5003
	void OnToggleObserverAmmoSim();// 0xffffff90c89e5000
	void OnToggleMap();// 0xffffff90c89e5000
	void OnToggleCamera();// 0xffffff90c89e5000
	void OnStopHoldEmoteWheel();// 0xffffff90c89e5000
	void OnStartHoldEmoteWheel();// 0xffffff90c89e5000
	void OnRep_ObserverAuthorityType();// 0xffffff90c89e5000
	void OnRep_CameraViewBehaviour();// 0xffffff90c89e5000
	void OnBackButtonPressed();// 0xffffff90c89e5000
	void NoVehicleSpawn(byte IsNoVehicle);// 0xffffff90c89e5001
	void c4b9e5d1da(FName ServerStateName);// 0xffffff90c89e5001
	void dcdbdebf1f(Rotator ServerConRot);// 0xffffff90c89e5001
	void MoveTo(float X, float Y, float Z);// 0xffffff90c89e5003
	void MovePlayer(float X, float Y, float Z, float RP, float RY, float RR);// 0xffffff90c89e5006
	void MoveAIToOutsideWorldBounds();// 0xffffff90c89e5000
	void LocalSetSpeed(float Modifier);// 0xffffff90c89e5001
	void LocalMoveTo(float X, float Y, float Z);// 0xffffff90c89e5003
	void LimitPitchCorrectionValue(float Value);// 0xffffff90c89e5001
	void KillSelf(float Delay);// 0xffffff90c89e5001
	void KickPlayer(FString PlayerName);// 0xffffff90c89e5001
	void KickMe();// 0xffffff90c89e5000
	void KickAccountSelf(bool bLogOutUser);// 0xffffff90c89e5001
	bool IsSpectatorState();// 0xffffff90c89e5001
	bool IsSpectating();// 0xffffff90c89e5001
	bool IsSameObservingCameraMode(const enum InObserverCameraMode);// 0xffffff90c89e5002
	bool IsReplaying();// 0xffffff90c89e5001
	bool IsObserving();// 0xffffff90c89e5001
	bool IsGameInputAllowed();// 0xffffff90c89e5001
	void InvalidGunOrigin();// 0xffffff90c89e5000
	void InputCorrectionValue(float Value);// 0xffffff90c89e5001
	void InitMeshRotAll();// 0xffffff90c89e5000
	void InitMeshRot();// 0xffffff90c89e5000
	void InitCharacterMeshLocation();// 0xffffff90c89e5000
	void InfinityAmmo(bool bEnable);// 0xffffff90c89e5001
	void IgnoreWall(bool bEnable);// 0xffffff90c89e5001
	void HideAllUI();// 0xffffff90c89e5000
	void HandleClipboard();// 0xffffff90c89e5000
	void GravityControl(bool bEnable, float Gravity);// 0xffffff90c89e5002
	void GodMode(byte Mode);// 0xffffff90c89e5001
	void FreeMoveMode();// 0xffffff90c89e5000
	void ForceXignCodeFail();// 0xffffff90c89e5000
	void ForceSpawnAI(int SpawnCount);// 0xffffff90c89e5001
	void FlashFront();// 0xffffff90c89e5000
	void ExitSpectatingGame();// 0xffffff90c89e5000
	void ExitGame();// 0xffffff90c89e5000
	void EndMatch();// 0xffffff90c89e5000
	void EnablePlayerStartRestrictArea(int InDebugginValue);// 0xffffff90c89e5001
	void EnableMasterVolume(bool bEnable);// 0xffffff90c89e5001
	void EnableInputCorrection(bool IsEnable);// 0xffffff90c89e5001
	void EnableDeathBox(bool InFlag);// 0xffffff90c89e5001
	void DisplayPossibleBlockzoneCenter(int InMode);// 0xffffff90c89e5001
	void DisconnectToPVD();// 0xffffff90c89e5000
	void DisableSoundTracker(bool bDisable);// 0xffffff90c89e5001
	void DisableInputScale();// 0xffffff90c89e5000
	void DestroyBrokenVehicle(float Radius);// 0xffffff90c89e5001
	void DecreaseBoostGaugeByAction(float DecreaseAmount);// 0xffffff90c89e5001
	void DebugServerStateName();// 0xffffff90c89e5000
	void DebugServerControlRot();// 0xffffff90c89e5000
	void DamageScale(float Scale);// 0xffffff90c89e5001
	void CopyDebugInfoRotation();// 0xffffff90c89e5000
	void CopyDebugInfoLocation();// 0xffffff90c89e5000
	void CopyDebugInfo();// 0xffffff90c89e5000
	void ConnectToPVD();// 0xffffff90c89e5000
	void 01640eff2d(VehicleTrunkComponent* InTrunkComponent);// 0xffffff90c89e5001
	void 2daa2e284b(VehicleTrunkComponent* InTrunkComponent, const 12aa3af638 InItemContainer, const 280f5be7aa InEventContainer);// 0xffffff90c89e5003
	void ClientWasKickedForInvalidMatch(const FText KickReason);// 0xffffff90c89e5001
	void b7750c76f0();// 0xffffff90c89e5000
	void ff49a441f2(enum Result);// 0xffffff90c89e5001
	void f19019066c(const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantizeNormal ServerRotationVec);// 0xffffff90c89e5002
	void ClientSetRadioMessageSetting(const RadioMessageSetting InRadioMessageSetting);// 0xffffff90c89e5001
	void ClientResponseNearestFollowingTarget(Actor* InFollowingTarget);// 0xffffff90c89e5001
	void 97a0bf1507(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InMessageIndex, int InMessageVoiceTextIndex, FString MessageText);// 0xffffff90c89e5005
	void ClientRadioMessageShareItemCount(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InMessageIndex, int IMessageVoiceTextNum, int InItemID, int InItemCount);// 0xffffff90c89e5006
	void ClientRadioMessageReviveInfo(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InMessageIndex, int IMessageVoiceTextNum, byte InReviveInfoType);// 0xffffff90c89e5005
	void b4597786ef(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InMessageIndex, int IMessageVoiceTextNum, const int[] InSlotIndexList);// 0xffffff90c89e5005
	void cfd4787ad5(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InMessageIndex, int IMessageVoiceTextNum, const int InItemID, const bool InIsLock);// 0xffffff90c89e5006
	void 91dc22f374(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InSenderPlayerID, int InMessageIndex, int InMessageVoiceTextIndex, const Vector_NetQuantize InServerLocation);// 0xffffff90c89e5006
	void e18b09be3c(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InMessageIndex, int IMessageVoiceTextNum, const int InItemID, int InItemCount, const bool InIsLock);// 0xffffff90c89e5007
	void ClientRadioMessageEnemySpottedWithName(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InSenderPlayerID, int InMessageIndex, int InMessageVoiceTextIndex, const Vector_NetQuantize InServerLocation, FString InTargetName);// 0xffffff90c89e5007
	void 14f396d4ca(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InSenderPlayerID, int InMessageIndex, int InMessageVoiceTextIndex, const Vector_NetQuantize InServerLocation);// 0xffffff90c89e5006
	void 154dcda1fb(FString InSenderName, const TeamMemberInfo InSenderMemberInfo, int InMessageIndex, int InMessageVoiceTextIndex);// 0xffffff90c89e5004
	void ClientNotifyStartBuff(FName BuffName, bool bStart);// 0xffffff90c89e5002
	void ClientNotifyNextGasIn(Vector_NetQuantize PoisonGasWarningPosition, float PoisonGasWarningRadius);// 0xffffff90c89e5002
	void ClientNotifyHitObserver(const ObserverTakeHitInfo InTakeHitInfo);// 0xffffff90c89e5001
	void ClientNotifyFireObserver(XtrmWeapon_Gun* InWeapon, const float InYaw, const float InPitch);// 0xffffff90c89e5003
	void 62349b84fe();// 0xffffff90c89e5000
	void 3d289319f6();// 0xffffff90c89e5000
	void 9c627cbbad(FString Seed);// 0xffffff90c89e5001
	void ClientDropRestricedArea(const Box2D[] InAreas);// 0xffffff90c89e5001
	void 7bd52f2b80(const DisplayActorNames[] InDisplayActors);// 0xffffff90c89e5001
	void 7ba8059b08(const c6e2e723af Mission);// 0xffffff90c89e5001
	void Client_UnreliablePing(int SeqID, int64 DateTimeTick);// 0xffffff90c89e5002
	void Client_StopWeaponInspection(const enum InInspectionStopReason);// 0xffffff90c89e5001
	void Client_StartWeaponInspection();// 0xffffff90c89e5000
	void Client_SendNewBRSpectatorMessage(const bool bShowMakingDecisionPopup, XtrmPlayerState* InPlayerState);// 0xffffff90c89e5002
	void Client_SendNewBRReviveSelfFailMessage(const enum InResult);// 0xffffff90c89e5001
	void 6dd364422a();// 0xffffff90c89e5000
	void Client_ReportCharacterLocation(const float InServerX, const float InServerY, const float InServerZ);// 0xffffff90c89e5003
	void Client_ReliablePing(int SeqID, int64 DateTimeTick);// 0xffffff90c89e5002
	void Client_NotifyUserRecommend(FString InRecommendeeAccountId, FString InRecommenderName);// 0xffffff90c89e5002
	void Client_NotifyRadialDamageTraininig(float InDamageAmount, const 292ff89a88 InDamageEvent, Actor* InDamagedTarget, Actor* InDamageCauser);// 0xffffff90c89e5004
	void Client_NotifyPointDamageTraininig(float InDamageAmount, const 4616e87b73 InDamageEvent, Actor* InDamagedTarget, Actor* InDamageCauser);// 0xffffff90c89e5004
	void Client_NotifyDelayDamageTraining(float InDamageAmount, const ef56ffaf87 InDamageEvent, Actor* InDamagedTarget, Actor* InDamageCauser);// 0xffffff90c89e5004
	void Client_ItemPackagePickedUp(ItemPackage* InItemPackage, const ItemPackagePickUpEvent InEvent);// 0xffffff90c89e5002
	void Client_ItemPackageInitialItem(ItemPackage* InItemPackage, const a1349ffbe6 InContainer);// 0xffffff90c89e5002
	void Client_FinishReviveSelf(const bool bDidReviveSelf);// 0xffffff90c89e5001
	void CheckHeight(float X, float Y);// 0xffffff90c89e5002
	void CheatLogEnable(bool bEnable);// 0xffffff90c89e5001
	void CheatInitialSpawnCarePackage();// 0xffffff90c89e5000
	void CheatDrawDropRestrictedArea();// 0xffffff90c89e5000
	void 796df1b67e(FString PlayerName, bool IsRunning, bool IsSprinting, bool IsWalking, bool IsGroggying, bool IsSwimming, bool IsCasting, bool IsScoping, bool IsTargeting, bool IsInWaterVolume, bool IsVaulting, enum Stance, float MaxSpeed, bool IsUnderWater, uint32 BitContainerSkipOwnerValue, uint32 MovementMode, bool IsPeekLeft, bool IsPeekRight, bool IsMoving, bool IsAiming, bool IsFiring, bool IsReloading, bool IsArming, bool IsUnArming, bool IsFireDeferredTime, bool bCanSprintWhileAiming, float VaultingTimer, bool IsMovementCompDisabled, bool IsSkydiving, bool IsInAirboneProcess, bool IsPreparingLedgeGrab);// 0xffffff90c89e501f
	void ChangeScopeMIDsToDefault();// 0xffffff90c89e5000
	void ChangeLOD(byte InLOD);// 0xffffff90c89e5001
	void ChangeClothStyle(int Type);// 0xffffff90c89e5001
	void ChangeCarePackageStyle(int InStyle);// 0xffffff90c89e5001
	void BotSleepToggle();// 0xffffff90c89e5000
	void BluezoneSimulReport(int RepeatCount);// 0xffffff90c89e5001
	void BlackHoleTest();// 0xffffff90c89e5000
	void BanMeByAntiCheat();// 0xffffff90c89e5000
	void BanMe();// 0xffffff90c89e5000
	void AutoHPRecovery(float Seconds, float Recovery);// 0xffffff90c89e5002
	void ApplyCustomCheat();// 0xffffff90c89e5000
	void AntiCheatEnableCameraAimBot(const bool bEnable);// 0xffffff90c89e5001
	void AIGodMode(byte Mode);// 0xffffff90c89e5001
	void AdjustOtherCharacterMeshCollision(const float InOffsetX, const float InOffsetY, const float InOffsetZ);// 0xffffff90c89e5003
	void AddSkinID(const int InSkinID);// 0xffffff90c89e5001
	void AddItemByRowName(out const FName RowName, byte Count);// 0xffffff90c89e5002
	void AddItem(uint32 ItemId, int Count);// 0xffffff90c89e5002
	void AddBackpackAccessory(const int InBackpackID, const int AID, const int BID, const int CID);// 0xffffff90c89e5004

--------------------------------
Class: XtrmCharacter.Character.Pawn.Actor.Object
	CurveFloat* 7fa8f02e46;//[Offset: 0x650, Size: 0x8]
	XtrmEmoteComponent* EmoteComponent;//[Offset: 0x658, Size: 0x8]
	float 82acd3158e;//[Offset: 0x668, Size: 0x4]
	TslViewTargetTempComponent* 0808385490;//[Offset: 0x670, Size: 0x8]
	ParticleSystem* d7b2d20877;//[Offset: 0x690, Size: 0x8]
	float 6cfc0f83f2;//[Offset: 0x6a8, Size: 0x4]
	bool 2a1dfc3598;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 0x1]
	XtrmPlayerState* 568c06a883;//[Offset: 0x6c8, Size: 0x20]
	class XtrmHeadDestructEffect* 031d29a8e8;//[Offset: 0x6f8, Size: 0x8]
	CurveFloat* cffa6ef730;//[Offset: 0x700, Size: 0x8]
	float GroggyDamageWeight;//[Offset: 0x708, Size: 0x4]
	UpdateCameraComponent* UpdateCameraComponent;//[Offset: 0x740, Size: 0x8]
	CurveFloat* 2a75a6628a;//[Offset: 0x748, Size: 0x8]
	SkydiveComponent* 189bbc2c21;//[Offset: 0x760, Size: 0x8]
	CurveFloat* 0d476d00d8;//[Offset: 0x770, Size: 0x8]
	FName 78a4b65e6f;//[Offset: 0x77c, Size: 0x8]
	ParticleSystem* ShieldImpactEffect;//[Offset: 0x788, Size: 0x8]
	CurveFloat* 05d41a1aca;//[Offset: 0x798, Size: 0x8]
	FName 94ed8b34c0;//[Offset: 0x7d8, Size: 0x8]
	ParticleSystem* ShieldExplosionEffectClass;//[Offset: 0x7e0, Size: 0x40]
	FName 4671001142;//[Offset: 0x848, Size: 0x8]
	SoftClassPath ccb5768ae4;//[Offset: 0x850, Size: 0x18]
	AkAudioEvent* 6c87352e93;//[Offset: 0x880, Size: 0x8]
	bool bIsCameraUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 0x1]
	enum 64ad28bde6;//[Offset: 0x88d, Size: 0x1]
	Vector LandPredictedLocation_CP;//[Offset: 0x8ac, Size: 0xc]
	FName 974df68c17;//[Offset: 0x8b8, Size: 0x8]
	Actor* 844e65e2b9;//[Offset: 0x8c0, Size: 0x8]
	XtrmPlayerState*[] 466702c27f;//[Offset: 0x8d0, Size: 0x10]
	bool 8cc4f0975f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e4, Size: 0x1]
	CurveFloat* def766cc9d;//[Offset: 0x938, Size: 0x8]
	float NormalSensitivity;//[Offset: 0x998, Size: 0x4]
	BuffWithBoostGauge[] BuffWithBoostGauge;//[Offset: 0x9a0, Size: 0x10]
	float VaultingDirection_CP;//[Offset: 0xa08, Size: 0x4]
	AkAudioEvent* cd0b999f50;//[Offset: 0xa80, Size: 0x8]
	f02d4d992a* 6e3fc11b23;//[Offset: 0xaf8, Size: 0x8]
	CurveFloat* ffd96d505b;//[Offset: 0xb10, Size: 0x8]
	float DecreaseGroggyHealthPerSecond;//[Offset: 0xb34, Size: 0x4]
	FName WeaponAttachPoint;//[Offset: 0xb38, Size: 0x8]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0xb48, Size: 0x8]
	class DamageType* GroggyDamageType;//[Offset: 0xb50, Size: 0x8]
	bool 5c8b5a3b74;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 0x1]
	AkAudioEvent* ShieldDestroySound;//[Offset: 0xbb8, Size: 0x8]
	float DecreaseTimerSecond;//[Offset: 0xbc0, Size: 0x4]
	CurveFloat* 1aa77140d7;//[Offset: 0xbd8, Size: 0x8]
	bool bServerFinishedVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 0x1]
	AkAudioEvent* NakedHit;//[Offset: 0xc00, Size: 0x8]
	FName f658ff3b1d;//[Offset: 0xc18, Size: 0x8]
	EquippedEmoteInfo[] 246294ea70;//[Offset: 0xc50, Size: 0x10]
	float DecreaseBoostGaugeByTime;//[Offset: 0xc60, Size: 0x4]
	c835d7a808* 94db8e924f;//[Offset: 0xc68, Size: 0x8]
	13285a8dd9 ParachutingSoundDisplayData;//[Offset: 0xc78, Size: 0xa8]
	float 1b88dbbfac;//[Offset: 0xd20, Size: 0x4]
	PrimitiveComponent* 862f6c856b;//[Offset: 0xd50, Size: 0x8]
	float HealthMax;//[Offset: 0xd58, Size: 0x4]
	enum 3dfa520318;//[Offset: 0xdb0, Size: 0x1]
	enum 4383b77261;//[Offset: 0xdb1, Size: 0x1]
	bool 7053ec63cb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde1, Size: 0x1]
	AkAudioEvent* e8e5aae6ba;//[Offset: 0xde8, Size: 0x8]
	class XtrmParticle* 4aea5df012;//[Offset: 0xdf8, Size: 0x8]
	13285a8dd9 0fcdaf6031;//[Offset: 0xe00, Size: 0xa8]
	AimAssistantComponent* AimAssistantComp;//[Offset: 0xf18, Size: 0x8]
	AkAudioEvent* 34ff849220;//[Offset: 0xf20, Size: 0x8]
	996d1675d6 996d1675d6;//[Offset: 0xf40, Size: 0xb0]
	byte e9eacd791d;//[Offset: 0xff0, Size: 0x1]
	CurveFloat* 5556e28e4d;//[Offset: 0x1010, Size: 0x8]
	VehicleSkinInfoRep[] VehicleSkinData;//[Offset: 0x1048, Size: 0x10]
	float RecoveryBoostGaugeAmount;//[Offset: 0x1060, Size: 0x4]
	class DamageType* 06d02a0c26;//[Offset: 0x1068, Size: 0x8]
	FName 2547ccb310;//[Offset: 0x108c, Size: 0x8]
	ReplicatedCarryState FiremansCarryState;//[Offset: 0x10d0, Size: 0x18]
	enum ShoesSoundType;//[Offset: 0x10ec, Size: 0x1]
	AkAudioBank*[] Banks;//[Offset: 0x10f0, Size: 0x10]
	float Health;//[Offset: 0x1104, Size: 0x4]
	CharacterCustomizeComponent* CustomizeComponent;//[Offset: 0x1108, Size: 0x8]
	eeae703230* 69917d8e6d;//[Offset: 0x1178, Size: 0x8]
	ParticleSystem* ShieldExplosionEffect;//[Offset: 0x1180, Size: 0x8]
	Vector e252517390;//[Offset: 0x11b0, Size: 0xc]
	CurveFloat* 86637c287e;//[Offset: 0x11c0, Size: 0x8]
	AkAudioEvent* ShieldHitSound;//[Offset: 0x11c8, Size: 0x8]
	MeshComponent* a60e2c0115;//[Offset: 0x11d8, Size: 0x8]
	SphereComponent* BulletEffect_Sphere;//[Offset: 0x1200, Size: 0x8]
	int[] e9fb41bfc5;//[Offset: 0x1208, Size: 0x10]
	float 5079d2afcf;//[Offset: 0x121c, Size: 0x4]
	CharacterShieldConfig ShieldConfig;//[Offset: 0x1220, Size: 0x80]
	CurveFloat* 4e7e29fbff;//[Offset: 0x12a0, Size: 0x8]
	AkAudioEvent* ArmorHit;//[Offset: 0x12b0, Size: 0x8]
	XtrmParticle*[] 59ffcfdc7c;//[Offset: 0x12b8, Size: 0x10]
	Vector JumpStartLocation_CP;//[Offset: 0x12cc, Size: 0xc]
	float FootSoundObstructionCheckMaxDistance;//[Offset: 0x12dc, Size: 0x4]
	CurveFloat* 6ef7766c8c;//[Offset: 0x12e0, Size: 0x8]
	class ItemPackage* e0f014ea63;//[Offset: 0x12f0, Size: 0x8]
	CurveFloat* b819e2b419;//[Offset: 0x1308, Size: 0x8]
	SpringArmComponent* FirstPersonSpringArm;//[Offset: 0x1320, Size: 0x8]
	TslCameraComponent* FirstPersonCamera;//[Offset: 0x1328, Size: 0x8]
	TslCharacterSpringArmComponent* ThirdPersonSpringArm;//[Offset: 0x1330, Size: 0x8]
	CameraComponent* ThirdPersonCamera;//[Offset: 0x1338, Size: 0x8]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x1340, Size: 0x8]
	TslCameraComponent* ScopingCamera;//[Offset: 0x1348, Size: 0x8]
	SpringArmComponent* FirstPersonSpringArmInVehicle;//[Offset: 0x1350, Size: 0x8]
	TslCameraComponent* FirstPersonCameraInVehicle;//[Offset: 0x1358, Size: 0x8]
	SpringArmComponent* ThirdPersonSpringArmInVehicle;//[Offset: 0x1360, Size: 0x8]
	TslCameraComponent* ThirdPersonCameraInVehicle;//[Offset: 0x1368, Size: 0x8]
	float VaultEndVelocityVectorClamp;//[Offset: 0x1374, Size: 0x4]
	AutoPickUpComponent* AutoPickUpComponent;//[Offset: 0x1378, Size: 0x8]
	class XtrmParticle* ef8bd2c536;//[Offset: 0x13b0, Size: 0x8]
	CurveFloat* 920bae0c2f;//[Offset: 0x13b8, Size: 0x8]
	AkAudioEvent* 49ec69a104;//[Offset: 0x13d0, Size: 0x8]
	float RecoveryTimerSecond;//[Offset: 0x13e0, Size: 0x4]
	af8c01cac6* 8013523938;//[Offset: 0x13f8, Size: 0x8]
	2e3fe0002d 54ad7fd712;//[Offset: 0x1428, Size: 0xc0]
	class SkydiveCloudEffect* SoftSkydiveCloudEffectClass;//[Offset: 0x14f0, Size: 0x40]
	class XtrmParticle* 62c3b0ab2e;//[Offset: 0x1550, Size: 0x8]
	AkAudioEvent* ShieldHitSoundClass;//[Offset: 0x15b0, Size: 0x40]
	VehicleRiderComponent* VehicleRiderComponent;//[Offset: 0x1640, Size: 0x8]
	float ScopeSensitivity;//[Offset: 0x1648, Size: 0x4]
	float FallHeight_CP;//[Offset: 0x1668, Size: 0x4]
	float ShieldGauge;//[Offset: 0x166c, Size: 0x4]
	Rotator BlendTargetViewRotation;//[Offset: 0x167c, Size: 0xc]
	SkydiveCloudEffect* SkydiveCloudEffect;//[Offset: 0x16a8, Size: 0x8]
	909a45ab89* CurrentVaultData_CP;//[Offset: 0x16c0, Size: 0x8]
	CurveFloat* b554ac055a;//[Offset: 0x1730, Size: 0x8]
	FName 8031e978a1;//[Offset: 0x1760, Size: 0x8]
	ParticleSystem* ShieldImpactEffectClass;//[Offset: 0x1770, Size: 0x40]
	float ExpectedBlockzoneDamageSeconds;//[Offset: 0x17c8, Size: 0x4]
	float c8f7fcbefa;//[Offset: 0x17f0, Size: 0x4]
	CurveFloat* 83c23e2e85;//[Offset: 0x1800, Size: 0x8]
	AkAudioEvent* 32618a2a9f;//[Offset: 0x1808, Size: 0x8]
	AkAudioEvent* d924c1fba0;//[Offset: 0x1810, Size: 0x8]
	bool 220f7fa9f0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1818, Size: 0x1]
	2a93a2b933 6c661dbbc6;//[Offset: 0x1828, Size: 0x88]
	CurveFloat* b9dd4b6051;//[Offset: 0x18b8, Size: 0x8]
	AkAudioEvent* DyneemaHit;//[Offset: 0x18e0, Size: 0x8]
	c835d7a808* bd46bd2f98;//[Offset: 0x1900, Size: 0x8]
	WeaponProcessorComponent* d5b401000d;//[Offset: 0x1910, Size: 0x8]
	class XtrmParticle* 927b8a56b4;//[Offset: 0x1920, Size: 0x8]
	InteractorComponent* InteractorComponent;//[Offset: 0x1940, Size: 0x8]
	MultiInteractableChangeData MultiCastingData;//[Offset: 0x1948, Size: 0x3]
	98f8084266 fc2270e9fa;//[Offset: 0x1958, Size: 0x40]
	XtrmCharactersPrivateActor* PrivateActor;//[Offset: 0x1998, Size: 0x8]
	CurveFloat* 9964752221;//[Offset: 0x19b0, Size: 0x8]
	InventoryComponent* InventoryComponent;//[Offset: 0x1a00, Size: 0x8]
	CurveFloat* 53dcf69485;//[Offset: 0x1a08, Size: 0x8]
	<enum,MovementDisableSetting> MovementDisableSettingOfWeapons;//[Offset: 0x1a18, Size: 0x50]
	AkAudioEvent* ShieldDestroySoundClass;//[Offset: 0x1ab0, Size: 0x40]
	int 59b2518ad0;//[Offset: 0x1af0, Size: 0x4]
	AkAudioEvent* a87cfe143d;//[Offset: 0x1af8, Size: 0x8]
	b9964f7d6d 012cfff7c4;//[Offset: 0x1b24, Size: 0x8]
	FString 0ee43410c4;//[Offset: 0x1b30, Size: 0x10]
	FString 457ccf2fb4;//[Offset: 0x1b40, Size: 0x10]
	float RemoveInvincibleTimeInGroggy;//[Offset: 0x1b58, Size: 0x4]
	FName b06f6118d0;//[Offset: 0x1b68, Size: 0x8]
	class XtrmParticle* cfaf85447a;//[Offset: 0x1b70, Size: 0x8]
	CurveFloat* 30928b0fb6;//[Offset: 0x1b88, Size: 0x8]
	bool bIsColdWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b90, Size: 0x1]
	Vector VaultEndVelocityVectorMutliplier;//[Offset: 0x1b94, Size: 0xc]
	bool 7af09dd872;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb0, Size: 0x1]
	4910149af6 CustomizeData;//[Offset: 0x1bbc, Size: 0x10]
	enum HitStateReason;//[Offset: 0x1bcc, Size: 0x1]
	CurveFloat* f6343a073c;//[Offset: 0x1be0, Size: 0x8]
	bool bIsHoldingBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c08, Size: 0x1]
	float FootSoundObstructionCheckInterval;//[Offset: 0x1c14, Size: 0x4]
	AutoFireComponent* AutoFireComponent;//[Offset: 0x1c28, Size: 0x8]
	XtrmBuffComponent* cb30b5e4d3;//[Offset: 0x1c48, Size: 0x8]
	CurveFloat* da2cbf5724;//[Offset: 0x1c50, Size: 0x8]
	c835d7a808* 847c321510;//[Offset: 0x1c78, Size: 0x8]
	class DamageType* RejectDamageType;//[Offset: 0x1cc0, Size: 0x8]
	ArrowComponent* AudioListener;//[Offset: 0x1cd8, Size: 0x8]
	class DamageType* 813205c5b8;//[Offset: 0x1d10, Size: 0x8]
	822123bb88 822123bb88;//[Offset: 0x1d30, Size: 0xd0]
	XtrmPawnNoiseEmitterComponent* NoiseEmitterComponent;//[Offset: 0x1e18, Size: 0x8]
	Vector 74006cb3df;//[Offset: 0x1e74, Size: 0xc]
	FName SeatTag;//[Offset: 0x1ea0, Size: 0x8]
	bool bIsVaultingSystemEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f81, Size: 0x1]
	EquipmentComponent* EquipmentComponent;//[Offset: 0x1fa0, Size: 0x8]
	enum af75550f1a;//[Offset: 0x2010, Size: 0x1]
	CurveFloat* 637012eae6;//[Offset: 0x2020, Size: 0x8]
	uint32 BitContainerSkipOwnerValue;//[Offset: 0x2028, Size: 0x4]
	Rotator AimOffsets;//[Offset: 0x2060, Size: 0xc]
	FName 337c86fb8d;//[Offset: 0x2070, Size: 0x8]
	enum c463d693ae;//[Offset: 0x207c, Size: 0x1]
	float BoostGauge;//[Offset: 0x2090, Size: 0x4]
	enum CastAnim;//[Offset: 0x20b1, Size: 0x1]
	bool 44f01cbc61;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d8, Size: 0x1]
	int[] d0cdf095b4;//[Offset: 0x2100, Size: 0x10]
	class Object[] DestroyBlockingClasses;//[Offset: 0x2128, Size: 0x10]
	uint32 e334ea7a94;//[Offset: 0x2138, Size: 0x4]
	bool bIsInRiver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213c, Size: 0x1]
	byte 23f867eb3d;//[Offset: 0x2158, Size: 0x1]
	CurveFloat* ee8d12b34c;//[Offset: 0x2168, Size: 0x8]
	FName 0d37fe456e;//[Offset: 0x2174, Size: 0x8]
	FName 6cdb4b51fe;//[Offset: 0x217c, Size: 0x8]
	FiremansCarryBehaviour FiremansCarryBehaviour;//[Offset: 0x2190, Size: 0x180]
	FName 5335771f07;//[Offset: 0x2388, Size: 0x8]
	<enum,MovementDisableSetting> JumpingDisableSettingOfWeapons;//[Offset: 0x2398, Size: 0x50]
	uint32 ShieldID;//[Offset: 0x23e8, Size: 0x4]
	FName 898717eeb9;//[Offset: 0x23f0, Size: 0x8]
	TeamMemberInfo MemberInfo;//[Offset: 0x2400, Size: 0x8]
	TslVaultingHelper* VaultingHelperRef;//[Offset: 0x2410, Size: 0x8]
	void WeaponModeChanged(XtrmWeapon* TargetWeapon, enum NewMode);// 0xffffff90c89e5002
	void UseItem(int ItemIndex);// 0xffffff90c89e5001
	void UnEquipWeapon_Test(enum WeaponSlot);// 0xffffff90c89e5001
	void UnEquipAttachment_Test(enum WeaponSlot, enum AttachmentSlot, bool ToInventory);// 0xffffff90c89e5003
	void Timer_StartSkydivingTraining();// 0xffffff90c89e5000
	void TickCameraWaterCheck();// 0xffffff90c89e5000
	void TestSkydiveWithFollowing(float Height);// 0xffffff90c89e5001
	void e32d42afbf();// 0xffffff90c89e5000
	void TestSaveOption();// 0xffffff90c89e5000
	void TestResetScope();// 0xffffff90c89e5000
	void TestJoinEmote();// 0xffffff90c89e5000
	void TestFreeMoveMode();// 0xffffff90c89e5000
	void TestEquipAttachment(int Index);// 0xffffff90c89e5001
	void 1680f3bf68(float MaxSpeed, float MaxAccel, float Deccel);// 0xffffff90c89e5003
	void 6f1022bc40(Vector_NetQuantize InLocation, Vector_NetQuantizeNormal InRotation);// 0xffffff90c89e5002
	void SpawnPunchImpact(Vector InLocation, Rotator InRotation);// 0xffffff90c89e5002
	void SpawnBulletPassByEffect(Vector Location, float BulletVelocity);// 0xffffff90c89e5002
	void SetServerVaultFinished(bool InFinished);// 0xffffff90c89e5001
	void SetMovementEnabled(bool IsEnabled);// 0xffffff90c89e5001
	void SetJumpStartLocationAndFallheight(Vector JumpStartLoc, float FallHeight);// 0xffffff90c89e5002
	void SetIsOutsideBluezone(bool bOutsize);// 0xffffff90c89e5001
	void SetGunSkinEffectIndex(uint32 InGunSkinID, int InOldCategoryID, int InNewCategoryID);// 0xffffff90c89e5003
	void b35e2a90f5(float Scale);// 0xffffff90c89e5001
	void 58e2021f87(float NewModifier);// 0xffffff90c89e5001
	void SetBulletSpawnOverride(bool InOverride);// 0xffffff90c89e5001
	void SetAnimationAkSwitch(FString SwitchGroup, FString SwitchState);// 0xffffff90c89e5002
	void SetAnimationAkRTPC(FString RTPCName, float RTPCValue);// 0xffffff90c89e5002
	void SetAimStateActive(bool IsActive);// 0xffffff90c89e5001
	void SetADSSocketOffset(out const Vector NewOffset);// 0xffffff90c89e5001
	void d72f69da40(VehicleTrunkComponent* TrunkComponent, const enum EquipSlot, int ItemToEquipID);// 0xffffff90c89e5003
	void ServerSetWaitOutStandingUp(bool bWaiting);// 0xffffff90c89e5001
	void 0a9eb1f648(bool bNewSprinting);// 0xffffff90c89e5001
	void e55a5cd4e3(bool bNewRunning);// 0xffffff90c89e5001
	void efb723c67b(float Rate);// 0xffffff90c89e5001
	void ServerSetAimOffsets2(Rotator NewAimOffsets, Vector_NetQuantize Rel);// 0xffffff90c89e5002
	void b5a3510007(Rotator NewAimOffsets);// 0xffffff90c89e5001
	void ac58bc81ab(XtrmGlassWindowComponent* GlassWindowComponent);// 0xffffff90c89e5001
	void ServerResetBodyCarryRequest();// 0xffffff90c89e5000
	void 1e51dcff37(VehicleTrunkComponent* TrunkComponent, const enum AccessorySlot);// 0xffffff90c89e5002
	void 8aaf609b70(VehicleTrunkComponent* TrunkComponent, const enum AccessorySlot, const enum AttachmentSlot);// 0xffffff90c89e5003
	void fca656e4ba(VehicleTrunkComponent* TrunkComponent, const int ItemId, const int StackCount);// 0xffffff90c89e5003
	void 4af36dfe77(VehicleTrunkComponent* TrunkComponent, const enum EquipSlot);// 0xffffff90c89e5002
	void 1d9cea8981(VehicleTrunkComponent* TrunkComponent, int IndexInServer);// 0xffffff90c89e5002
	void 79b4cb8215(const 65d872f472 InItem, ItemPackage* Package, uint32 PickupCount);// 0xffffff90c89e5003
	void ServerPickUpDBNOCharacter(XtrmCharacter* TargetCharacter);// 0xffffff90c89e5001
	void aa681bacca(XtrmGlassWindowComponent* GlassWindowComponent);// 0xffffff90c89e5001
	void 6135a64ac7(uint32 NewBitContainer);// 0xffffff90c89e5001
	void ServerMoveToVehicleSeat(const FName InNameTag);// 0xffffff90c89e5001
	void ServerDropDBNOCharacter();// 0xffffff90c89e5000
	void f38517158e(Vector InSpawnRelativeLocation, Rotator SpawnRotation);// 0xffffff90c89e5002
	void ServerCheckCharacterGroggyStance(const bool bClientIsGroggy);// 0xffffff90c89e5001
	void 3d0f8c5a42(enum ToStance, bool c2, uint32 c6, const uint32 P, const uint32 flag);// 0xffffff90c89e5005
	void 84226c1d03(e1dc9fce5a Hit, enum PunchDamageType, byte IntValue1, const Vector_NetQuantize Location, const Vector_NetQuantize Location2, bool boolValue, float ServerTimeSec);// 0xffffff90c89e5007
	void 94dd5fbfcd(float InTarget);// 0xffffff90c89e5001
	void Server_SpawnVehicleInStardIsland();// 0xffffff90c89e5000
	void 6fd03525c5(float Height);// 0xffffff90c89e5001
	void b5808b6837(bool B);// 0xffffff90c89e5001
	void Server_SetBreakFallActive(const bool bNewBreakFallActive);// 0xffffff90c89e5001
	void dfb1771031(bool bEnable);// 0xffffff90c89e5001
	void fcda7ba3fa(const 996d1675d6 InRollingTask);// 0xffffff90c89e5001
	void d35f4e31c0(byte AnimationIndex, byte InPunchId);// 0xffffff90c89e5002
	void 2afc10a7c1(int AnimationIndex);// 0xffffff90c89e5001
	void d707da1abe(const a9e0e1d115 InVaultTask, bool bIInIsClimb, const Vector InJumpStartPos, const Vector InImpactPos, const FName InObjectName);// 0xffffff90c89e5005
	void 538d0deb52();// 0xffffff90c89e5000
	void 99866a3c0a(enum InMeleeThrowState);// 0xffffff90c89e5001
	void 332b1d85f9(const Vector Loc);// 0xffffff90c89e5001
	void ResetUnarmedAttack();// 0xffffff90c89e5000
	void ResetMeleeThrow();// 0xffffff90c89e5000
	void ResetMeleeAttack();// 0xffffff90c89e5000
	void ResetIsDeployingShield();// 0xffffff90c89e5000
	void ResetInventory();// 0xffffff90c89e5000
	void RemoveInvincibleInGroggy();// 0xffffff90c89e5000
	void RecoveryShieldGauge();// 0xffffff90c89e5000
	void RecoveryBoostGauge();// 0xffffff90c89e5000
	void OnWeapon();// 0xffffff90c89e5000
	void OnWeapon();// 0xffffff90c89e5000
	void OnWeapon();// 0xffffff90c89e5000
	void OnWeapon();// 0xffffff90c89e5000
	void OnWeapon();// 0xffffff90c89e5000
	void OnToggleUnarm();// 0xffffff90c89e5000
	void OnToggleProne();// 0xffffff90c89e5000
	void OnTogglePeekRight();// 0xffffff90c89e5000
	void OnTogglePeekLeft();// 0xffffff90c89e5000
	void OnToggleCrouch();// 0xffffff90c89e5000
	void OnSkydiveCloudEffectLoaded();// 0xffffff90c89e5000
	void OnSkydiveCloudEffectActorDestroyed(Actor* InDestroyed);// 0xffffff90c89e5001
	void OnRep_VehicleSkinData();// 0xffffff90c89e5000
	void OnRep_UpdateHeadHitEffect();// 0xffffff90c89e5000
	void OnRep_SpectatedCount();// 0xffffff90c89e5000
	void OnRep_SkydiveComponent();// 0xffffff90c89e5000
	void OnRep_ShoesSoundType();// 0xffffff90c89e5000
	void OnRep_ShieldID();// 0xffffff90c89e5000
	void OnRep_ShieldGauge();// 0xffffff90c89e5000
	void OnRep_MultiInteractableChanged(out const MultiInteractableChangeData OldData);// 0xffffff90c89e5001
	void OnRep_MemberInfo();// 0xffffff90c89e5000
	void OnRep_MeleeThrowState();// 0xffffff90c89e5000
	void OnRep_LastTakeHitInfo();// 0xffffff90c89e5000
	void OnRep_IsSelfReviving();// 0xffffff90c89e5000
	void OnRep_IsScopingRemote();// 0xffffff90c89e5000
	void OnRep_IsPeekRightRemote();// 0xffffff90c89e5000
	void OnRep_IsPeekLeftRemote();// 0xffffff90c89e5000
	void OnRep_IsOutsideBluezone();// 0xffffff90c89e5000
	void OnRep_IsOutsideBlockZone();// 0xffffff90c89e5000
	void OnRep_IsGroggying();// 0xffffff90c89e5000
	void OnRep_IsControlDrone();// 0xffffff90c89e5000
	void OnRep_IsAimingRemote();// 0xffffff90c89e5000
	void OnRep_InvincibleEndTime();// 0xffffff90c89e5000
	void OnRep_Health(float LastHealth);// 0xffffff90c89e5001
	void OnRep_FiremansCarryState();// 0xffffff90c89e5000
	void OnRep_ExpectedBlockzoneDamageSeconds();// 0xffffff90c89e5000
	void OnRep_EmoteIds();// 0xffffff90c89e5000
	void OnRep_CurrentWeaponZoomLevel();// 0xffffff90c89e5000
	void OnRep_CurrentStanceMode();// 0xffffff90c89e5000
	void OnRep_CharacterState();// 0xffffff90c89e5000
	void OnRep_CharacterDataAsset();// 0xffffff90c89e5000
	void OnRep_CharacterCustomize();// 0xffffff90c89e5000
	void OnRep_CastAnim();// 0xffffff90c89e5000
	void OnRep_BreathValue(b9964f7d6d OldValue);// 0xffffff90c89e5001
	void OnRep_BoostGauge();// 0xffffff90c89e5000
	void OnRep_BitContainerSkipOwner(uint32 OldValue);// 0xffffff90c89e5001
	void OnRep_BitContainerNormal(uint32 OldValue);// 0xffffff90c89e5001
	void OnRep_Angled();// 0xffffff90c89e5000
	void OnRep_AimStateActive();// 0xffffff90c89e5000
	void OnRep_AimOffsets(Rotator PrevAimOffsets);// 0xffffff90c89e5001
	void OnPrepareThrowable(enum ThrowWeaponType);// 0xffffff90c89e5001
	void OnHoldAngledPressed();// 0xffffff90c89e5000
	void OnCookingThrowable(enum ThrowWeaponType);// 0xffffff90c89e5001
	void OnChangeBreath(enum BreathType, float Breath, float LastBreath, float BreathMax);// 0xffffff90c89e5004
	void cd36c914af(enum Type);// 0xffffff90c89e5001
	void c65f054c72(const cb7a3350f7 InSharedParam);// 0xffffff90c89e5001
	void f75801a8a2(const bbeca58c7a InSharedParam);// 0xffffff90c89e5001
	void 36b1643c31(const bool bIsForward);// 0xffffff90c89e5001
	void da42cdca6a(const 996d1675d6 InRollingTask);// 0xffffff90c89e5001
	void 78212f86d7(const a9e0e1d115 InVaultTask);// 0xffffff90c89e5001
	void 6adc95b652(int Type);// 0xffffff90c89e5001
	void aa82fae569(const Vector ServerWorldHitLocation, const Vector HitDirection, int EquipmentLevel);// 0xffffff90c89e5003
	void 964416db8d(int ShieldLevel);// 0xffffff90c89e5001
	void 41075bfa21(float InTarget);// 0xffffff90c89e5001
	void fe1ea8710e();// 0xffffff90c89e5000
	void Multi_SpawnShieldImpactEffect(const Vector InSpawnLocation, const Vector InImpactNormal, int DamageCauserOwnerID, float InRemainShieldGauge);// 0xffffff90c89e5004
	void Multi_SpawnShieldExplosionEffect(const Vector InSpawnLocation, const Vector InImpactNormal, float InRemainShieldGauge);// 0xffffff90c89e5003
	void Multi_PlayPickUpAnimation(const Vector_NetQuantize InteractionObject, FName PickUpAnimName, uint32 ItemId);// 0xffffff90c89e5003
	bool IsZooming();// 0xffffff90c89e5001
	bool IsVaultingEnabled();// 0xffffff90c89e5001
	bool IsVaultingDebugEnabled();// 0xffffff90c89e5001
	bool IsVaultCancelled();// 0xffffff90c89e5001
	bool IsUnderRoof();// 0xffffff90c89e5001
	bool IsSprinting();// 0xffffff90c89e5001
	bool IsSkydiving();// 0xffffff90c89e5001
	bool IsScoping();// 0xffffff90c89e5001
	bool IsRunning();// 0xffffff90c89e5001
	bool IsQuitter();// 0xffffff90c89e5001
	bool IsQuickThrowHigh();// 0xffffff90c89e5001
	bool IsPeekRight();// 0xffffff90c89e5001
	bool IsPeekLeft();// 0xffffff90c89e5001
	bool IsMoving();// 0xffffff90c89e5001
	bool IsMeleeAttacking();// 0xffffff90c89e5001
	bool IsLookingThroughScope();// 0xffffff90c89e5001
	bool IsLocalOrSpectating();// 0xffffff90c89e5001
	bool IsInVehicle();// 0xffffff90c89e5001
	bool IsInteracting();// 0xffffff90c89e5001
	bool IsInParachute();// 0xffffff90c89e5001
	bool IsIndoor();// 0xffffff90c89e5001
	bool IsInAircraft();// 0xffffff90c89e5001
	bool IsImmuneBlueZone();// 0xffffff90c89e5001
	bool IsHoldingBreath();// 0xffffff90c89e5001
	bool IsHitted();// 0xffffff90c89e5001
	bool IsGroggying();// 0xffffff90c89e5001
	bool IsFreelooking();// 0xffffff90c89e5001
	bool IsForcingFall();// 0xffffff90c89e5001
	bool IsForceRotation();// 0xffffff90c89e5001
	bool IsForcedProneAfterFall();// 0xffffff90c89e5001
	bool IsFirstPerson();// 0xffffff90c89e5001
	bool IsFallingLong();// 0xffffff90c89e5001
	bool IsFallingFromHighAltitude();// 0xffffff90c89e5001
	bool IsFallingFor(float Seconds);// 0xffffff90c89e5002
	bool IsDying();// 0xffffff90c89e5001
	bool IsDriver();// 0xffffff90c89e5001
	bool IsCycleAnimActive();// 0xffffff90c89e5001
	bool IsCastInteractionName(const FName InName);// 0xffffff90c89e5002
	bool IsCasting();// 0xffffff90c89e5001
	bool IsAudioTestEnabled();// 0xffffff90c89e5001
	void InitilizeServerSkydiveComp(float Height);// 0xffffff90c89e5001
	bool HasActiveScopeType(enum ScopeType);// 0xffffff90c89e5002
	void HandleCapsuleCollision(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5005
	XtrmPlayerState* GetXtrmPlayerState();// 0xffffff90c89e5001
	XtrmPlayerController* GetXtrmPlayerController();// 0xffffff90c89e5001
	enum GetWeaponSlotEnum();// 0xffffff90c89e5001
	bool GetWeaponObstructionRemote();// 0xffffff90c89e5001
	Rotator GetWeaponInertiaRecoil();// 0xffffff90c89e5001
	Rotator GetWeaponInertia();// 0xffffff90c89e5001
	float GetWeaponGunCollisionAlpha();// 0xffffff90c89e5001
	float GetWeaponADSTimeModifier();// 0xffffff90c89e5001
	XtrmWeapon* GetWeapon();// 0xffffff90c89e5001
	bool GetWantsToSprintingAuto();// 0xffffff90c89e5001
	Pawn* GetVehiclePawn();// 0xffffff90c89e5001
	float GetVaultTimer();// 0xffffff90c89e5001
	int GetVaultingDebugType();// 0xffffff90c89e5001
	909a45ab89* GetVaultingDataByEnum(enum InVaultType);// 0xffffff90c89e5002
	XtrmPlayerController* GetTslPlayerController();// 0xffffff90c89e5001
	float GetTppSpringarmOffset();// 0xffffff90c89e5001
	float GetTargetingSpeedModifier();// 0xffffff90c89e5001
	enum GetStance();// 0xffffff90c89e5001
	float GetSprintingSpeedModifier_Stand();// 0xffffff90c89e5001
	float GetSprintingSpeedModifier_Prone();// 0xffffff90c89e5001
	float GetSprintingSpeedModifier_Crouch();// 0xffffff90c89e5001
	FString GetShortPlayerName();// 0xffffff90c89e5001
	bool GetServerVaultFinished();// 0xffffff90c89e5001
	float GetRunningSpeedModifier_Stand();// 0xffffff90c89e5001
	float GetRunningSpeedModifier_Prone();// 0xffffff90c89e5001
	float GetRunningSpeedModifier_Crouch();// 0xffffff90c89e5001
	int GetPlayerID();// 0xffffff90c89e5001
	float GetMaxSprintSpeed();// 0xffffff90c89e5001
	float GetMaxGroundSpeedOnSlope();// 0xffffff90c89e5001
	float GetMaxBoostGauge();// 0xffffff90c89e5001
	float GetLeanRightAlpha();// 0xffffff90c89e5001
	float GetLeanLeftAlpha();// 0xffffff90c89e5001
	Rotator GetLastMoveRotation();// 0xffffff90c89e5001
	float GetLastBoostActionGauge();// 0xffffff90c89e5001
	Rotator GetFixedAimOffsetsByFreelooking();// 0xffffff90c89e5001
	enum GetFiringMode();// 0xffffff90c89e5001
	class ItemPackage GetDropPackageType();// 0xffffff90c89e5001
	float GetDirectionalSpeedModifier(byte StanceType);// 0xffffff90c89e5002
	Rotator GetCurrentSway();// 0xffffff90c89e5001
	bool GetBulletSpawnOverride();// 0xffffff90c89e5001
	float GetBreathRatio(enum BreathType);// 0xffffff90c89e5002
	float GetBreathMax(enum BreathType);// 0xffffff90c89e5002
	float GetBreath(enum BreathType);// 0xffffff90c89e5002
	float GetBoostGauge();// 0xffffff90c89e5001
	enum GetAnimStance();// 0xffffff90c89e5001
	float GetAimStateAlpha();// 0xffffff90c89e5001
	Rotator GetAimOffsets();// 0xffffff90c89e5001
	Vector GetADSSocketOffset();// 0xffffff90c89e5001
	XtrmPlayerController* GetActiveTslPlayerController();// 0xffffff90c89e5001
	CameraComponent* GetActiveCamera();// 0xffffff90c89e5001
	void FixupCamera(SceneComponent* NewComponent);// 0xffffff90c89e5001
	void DropItem(int ItemIndex, int DropCount);// 0xffffff90c89e5002
	void DeployShieldAfterUnProne();// 0xffffff90c89e5000
	void DecreaseBoostGauge();// 0xffffff90c89e5000
	void ClientTorsoShotSoundPlay(const enum SoundType);// 0xffffff90c89e5001
	void ClientStopInitiateCarry();// 0xffffff90c89e5000
	void ClientSoundPlay(AkAudioEvent* SoundAk);// 0xffffff90c89e5001
	void ClientResetPendingCarry();// 0xffffff90c89e5000
	void ClientResetBodyCarryRequest();// 0xffffff90c89e5000
	void ClientPlayTrunkSound(AkAudioEvent* SoundAk);// 0xffffff90c89e5001
	void ClientPlayShieldExplosionSound();// 0xffffff90c89e5000
	void a5a45949e5(uint32 ItemId);// 0xffffff90c89e5001
	void 513d97c470(uint32 ItemId);// 0xffffff90c89e5001
	void d47f407eef(uint32 ItemId);// 0xffffff90c89e5001
	void f7742f750f(uint32 ItemId);// 0xffffff90c89e5001
	void e6b17b5cc2(uint32 ItemId);// 0xffffff90c89e5001
	void e93f7028a2(Vector_NetQuantize LocationRelative, float BulletVelocity);// 0xffffff90c89e5002
	void 3327cb0514(enum ToStance, bool bForce);// 0xffffff90c89e5002
	void ClientHeadShotSoundPlay(const enum SoundType);// 0xffffff90c89e5001
	void ClientForceAdjustPosition(const Vector_NetQuantize100 InServerPosition);// 0xffffff90c89e5001
	void b9772cc66b();// 0xffffff90c89e5000
	void a515c304a7(const bool bIsForward);// 0xffffff90c89e5001
	void 8c0bded9a1(float Value);// 0xffffff90c89e5001
	void c0bd23bd16(int MemberNumber);// 0xffffff90c89e5001
	void 9a6419f62d(byte AnimationIndex);// 0xffffff90c89e5001
	void 1461ecc611(int AnimationIndex);// 0xffffff90c89e5001
	void ebe1334fd1(float PredictHealedHealth, bool bIsByBuff);// 0xffffff90c89e5002
	void Client_NotifyHit(const 2a93a2b933 TakeHitInfo);// 0xffffff90c89e5001
	void Client_InventoryDropItemShareMarker(const enum InMarkerType, const Vector InLoaction, const float InResetTime);// 0xffffff90c89e5003
	void Client_FinishDropDBNO(PrimitiveComponent* InMovingBase, Vector InRelativeLocation);// 0xffffff90c89e5002
	void Client_DrawDeployLocation(Vector InCharacterLoc, Vector InSpawnedLocation, Rotator InSpawnedRotation);// 0xffffff90c89e5003
	void 0bfa8df152();// 0xffffff90c89e5000
	void Client_ChangeVoiceChatTeam(int TeamID);// 0xffffff90c89e5001
	void 8a1102f216();// 0xffffff90c89e5000
	void ClearPickUpAnimTimer();// 0xffffff90c89e5000
	void ClearCantMoveMessageHandle();// 0xffffff90c89e5000
	void CheckScopePP();// 0xffffff90c89e5000
	void CheckMuzzleBulletSpawn();// 0xffffff90c89e5000
	void ChangeToMeleeThrowAiming();// 0xffffff90c89e5000
	void BP_ChangeClothStyle(int Type);// 0xffffff90c89e5001
	void AutoReloadBlock(float BlockTime);// 0xffffff90c89e5001
	void AddVehicleSkinEffect(const uint32 InVehicleSkinID, const FString InVehicleEffectID);// 0xffffff90c89e5002
	void AddGunSkinParts(const uint32 InGunSkinID, const FString TableKey);// 0xffffff90c89e5002
	void AddGunSkinEffect(const uint32 InGunSkinID, const FString TableKey);// 0xffffff90c89e5002
	void AddBreath(enum BreathType, float Value);// 0xffffff90c89e5002

--------------------------------
Class: Character.Pawn.Actor.Object
	XigPtrProperty Mesh;//[Offset: 0x358, Size: 0x20]
	XigPtrProperty CharacterMovement;//[Offset: 0x378, Size: 0x20]
	XigPtrProperty CapsuleComponent;//[Offset: 0x398, Size: 0x20]
	float CrouchedEyeHeight;//[Offset: 0x3b8, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x3c0, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3e0, Size: 0x38]
	delegate OnCharacterMovementUpdated;//[Offset: 0x428, Size: 0x10]
	float ProxyJumpForceStartedTime;//[Offset: 0x438, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x43c, Size: 0x4]
	f4613347d4[] ad99677162;//[Offset: 0x440, Size: 0x10]
	byte 9858231e07;//[Offset: 0x450, Size: 0x1]
	float 521c94bada;//[Offset: 0x454, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool aa1a9af05a;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool 6355be956a;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	bool 1589cc921b;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	bool bb38804d37;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 0x1]
	bool ce39916ab7;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x458, Size: 0x1]
	bool b7060bcf03;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x458, Size: 0x1]
	bool 0bfd2f8144;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	bool 2620e5dfd5;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x459, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x459, Size: 0x1]
	4aa4dbdad7 995ca5357d;//[Offset: 0x460, Size: 0x30]
	4aa4dbdad7 4d6c5595a0;//[Offset: 0x498, Size: 0x30]
	63b106e4a8 048a5e9b24;//[Offset: 0x4d0, Size: 0x40]
	int JumpMaxCount;//[Offset: 0x510, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x514, Size: 0x4]
	float JumpKeyHoldTime;//[Offset: 0x518, Size: 0x4]
	delegate MovementModeChangedDelegate;//[Offset: 0x520, Size: 0x10]
	float JumpForceTimeRemaining;//[Offset: 0x530, Size: 0x4]
	7220e74c05 ee169b50e5;//[Offset: 0x550, Size: 0x98]
	float 398a6e9efd;//[Offset: 0x5ec, Size: 0x4]
	float 8368d86bad;//[Offset: 0x5f0, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x5f4, Size: 0x4]
	void UnCrouch(bool bClientSimulation);// 0xffffff90c89e5001
	void StopJumping();// 0xffffff90c89e5000
	void StopAnimMontage(AnimMontage* AnimMontage);// 0xffffff90c89e5001
	void 571fa1989a(const 52470bc256 PackedBits);// 0xffffff90c89e5001
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0xffffff90c89e5003
	void bc06c3d8c5(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xffffff90c89e5007
	void a911063282(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xffffff90c89e500b
	void c44c86deff(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xffffff90c89e500d
	void eaacff0858(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xffffff90c89e500d
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xffffff90c89e5009
	void 82e7a78978(FString inString);// 0xffffff90c89e5001
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xffffff90c89e5004
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0xffffff90c89e5004
	void OnRep_RootMotion();// 0xffffff90c89e5000
	void OnRep_ReplicatedBasedMovement();// 0xffffff90c89e5000
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0xffffff90c89e5000
	void OnRep_IsCrouched();// 0xffffff90c89e5000
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff90c89e5003
	void OnLanded(out const HitResult Hit);// 0xffffff90c89e5001
	void OnJumped();// 0xffffff90c89e5000
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff90c89e5003
	void K2_UpdateCustomMovement(float DeltaTime);// 0xffffff90c89e5001
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff90c89e5002
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xffffff90c89e5004
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff90c89e5002
	void Jump();// 0xffffff90c89e5000
	bool IsPlayingRootMotion();// 0xffffff90c89e5001
	bool IsPlayingNetworkedRootMotionMontage();// 0xffffff90c89e5001
	bool IsJumpProvidingForce();// 0xffffff90c89e5001
	bool HasAnyRootMotion();// 0xffffff90c89e5001
	AnimMontage* GetCurrentMontage();// 0xffffff90c89e5001
	Vector GetBaseTranslationOffset();// 0xffffff90c89e5001
	Rotator GetBaseRotationOffsetRotator();// 0xffffff90c89e5001
	float GetAnimRootMotionTranslationScale();// 0xffffff90c89e5001
	void Crouch(bool bClientSimulation);// 0xffffff90c89e5001
	void a3e50308d2(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff90c89e5007
	void 75a8e58f51(const 8813c0a987 PackedBits);// 0xffffff90c89e5001
	void b63049bc7f();// 0xffffff90c89e5000
	void c2bdf300d2();// 0xffffff90c89e5000
	void f25e47c1b4();// 0xffffff90c89e5000
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff90c89e500c
	void 01bbdcc658(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff90c89e500a
	void 32e360edf2(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff90c89e5008
	void ClientAckGoodMove(float Timestamp);// 0xffffff90c89e5001
	bool CanJumpInternal();// 0xffffff90c89e5001
	bool CanJump();// 0xffffff90c89e5001
	bool CanCrouch();// 0xffffff90c89e5001
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0xffffff90c89e5002

--------------------------------
Class: RootMotionSourceGroup
	bool 9ca8e0e554;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool 7a6736b053;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool 1b9dde0a79;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool 72f5cdb59e;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	948dba8849 ee204a06ce;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: 948dba8849
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: f4613347d4
	float Time;//[Offset: 0x0, Size: 0x4]
	7220e74c05 RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: 7220e74c05
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName 739803cf1c;//[Offset: 0x38, Size: 0x8]
	bool d10627b750;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool b750d11271;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup 5064f28326;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: 4aa4dbdad7
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool 60b6ad9b1d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool b750d11271;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool 532d750bf1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: 63b106e4a8
	bool 55390d6ab1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: XtrmWeapon.Actor.Object
	bool bNoConsumeAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	AkComponent* AkComponent;//[Offset: 0x2f0, Size: 0x8]
	FName WeaponMeshName;//[Offset: 0x2f8, Size: 0x8]
	enum 5e5612e8f4;//[Offset: 0x300, Size: 0x1]
	AttachableWeaponComponent* 96e8f024f7;//[Offset: 0x310, Size: 0x8]
	ParticleSystem* 88463c1352;//[Offset: 0x318, Size: 0x8]
	Texture2D* IconTexture;//[Offset: 0x3e0, Size: 0x8]
	ParticleSystem* 97c8c30594;//[Offset: 0x3e8, Size: 0x8]
	MeshComponent* 4eb4190259;//[Offset: 0x418, Size: 0x8]
	FName WeaponTag;//[Offset: 0x420, Size: 0x8]
	class XtrmMuzzleLightFx* 6dfc01356a;//[Offset: 0x430, Size: 0x8]
	0ff84afa2c* 5cda319da8;//[Offset: 0x438, Size: 0x8]
	<enum> e54fb4837f;//[Offset: 0x498, Size: 0x50]
	enum 1e3a191b5f;//[Offset: 0x4ec, Size: 0x1]
	SkinID e570383faa;//[Offset: 0x4f0, Size: 0x4]
	enum fefdb3dd45;//[Offset: 0x514, Size: 0x1]
	WeaponStaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x518, Size: 0x8]
	int d728905f73;//[Offset: 0x528, Size: 0x4]
	a4bbd37918[] 4aa72fe230;//[Offset: 0x530, Size: 0x10]
	ParticleSystemComponent* 2c53dd1793;//[Offset: 0x548, Size: 0x8]
	FName 3d5999eaca;//[Offset: 0x570, Size: 0x8]
	class XtrmImpactEffect* ImpactTemplate;//[Offset: 0x590, Size: 0x8]
	<enum,b657cbe858> 8ec89dcc39;//[Offset: 0x5c8, Size: 0x50]
	e732b7e652* e732b7e652;//[Offset: 0x620, Size: 0x8]
	<enum> b214eb32f0;//[Offset: 0x650, Size: 0x50]
	delegate OnUpdatedAttachment;//[Offset: 0x6b8, Size: 0x10]
	<enum,31f67737bd> bece314b19;//[Offset: 0x6c8, Size: 0x50]
	<enum> 2a13180d23;//[Offset: 0x728, Size: 0x50]
	void 44fbb07827(AttackId AttackId);// 0xffffff90c89e5001
	void OnRep_SkinID();// 0xffffff90c89e5000
	void OnRep_AttachedItemClasses(out const a4bbd37918[] OldVal);// 0xffffff90c89e5001
	void OnAnimationNotify(SkeletalMeshComponent* MeshComp, out const FName NotifyName);// 0xffffff90c89e5002
	b8cd1598a6 GetWeaponAttachmentData(enum SlotID);// 0xffffff90c89e5002
	enum GetWeaponAnimClassEnum();// 0xffffff90c89e5001
	float GetStanceSwayModifier(enum Stance);// 0xffffff90c89e5002
	AnimMontage* GetRecoilMontage();// 0xffffff90c89e5001
	void GetHideDefaultAttachedSlots(out <enum> Out);// 0xffffff90c89e5001
	void GetCurrentAttachmentSlots(out <enum> Out);// 0xffffff90c89e5001
	void GetAttachedItems(out a4bbd37918[] Out);// 0xffffff90c89e5001
	enum GetAnimWeaponType();// 0xffffff90c89e5001
	b8cd1598a6[] GetAllWeaponAttachmentData();// 0xffffff90c89e5001

--------------------------------
Class: AttackId
	int ID;//[Offset: 0x0, Size: 0x4]
	bool bFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: a4bbd37918
	uint32 ItemId;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: b8cd1598a6
	FName MuzzleAttachPoint;//[Offset: 0x0, Size: 0x8]
	AnimMontage* WeaponReloadCharge;//[Offset: 0x8, Size: 0x8]
	<int,MaterialInstance*> 1a14cbfdd0;//[Offset: 0x10, Size: 0x50]
	float c1b34fc846;//[Offset: 0x60, Size: 0x4]
	float DeviationMultiplier;//[Offset: 0x64, Size: 0x4]
	float DecreaseRecoilPatternScale;//[Offset: 0x68, Size: 0x4]
	Rotator IKHandRotation;//[Offset: 0x6c, Size: 0xc]
	AnimMontage* WeaponReloadTactical;//[Offset: 0x78, Size: 0x8]
	bool bUseViewpointLODInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bDynamicScope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bHasSecondarySight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	float BarrelLengthAdditive;//[Offset: 0x84, Size: 0x4]
	bool bIsEnableBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	int 82cfa5495c;//[Offset: 0x8c, Size: 0x4]
	FName 4a5ca61641;//[Offset: 0x90, Size: 0x8]
	AnimMontage* CharacterReloadTactical;//[Offset: 0x98, Size: 0x8]
	float ADSSpeedMultiplier;//[Offset: 0xa0, Size: 0x4]
	c92de2fbb3* ae95a1ea35;//[Offset: 0xa8, Size: 0x8]
	<int,ReticleSettings*> bbc9bc321a;//[Offset: 0xb0, Size: 0x50]
	SkeletalMesh* SkeletalMeshAsset;//[Offset: 0x100, Size: 0x8]
	float CantedWeaponRotation;//[Offset: 0x108, Size: 0x4]
	float MagnificationFOV;//[Offset: 0x10c, Size: 0x4]
	bool bUseCustomADSAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float RecoilEarlyExitScale;//[Offset: 0x114, Size: 0x4]
	float SwayMultiplier;//[Offset: 0x118, Size: 0x4]
	float RecoilMultiplierVertical;//[Offset: 0x11c, Size: 0x4]
	FName Name;//[Offset: 0x120, Size: 0x8]
	<int,Texture2D*> 80231b27fd;//[Offset: 0x128, Size: 0x50]
	AnimMontage* CharacterReloadCharge;//[Offset: 0x178, Size: 0x8]
	float 9020e52628;//[Offset: 0x180, Size: 0x4]
	float BallisticCurveOffset;//[Offset: 0x184, Size: 0x4]
	FText MinMagnificationText;//[Offset: 0x188, Size: 0x18]
	float MultipleFiringSpreadBase;//[Offset: 0x1a0, Size: 0x4]
	float 231beb8775;//[Offset: 0x1a4, Size: 0x4]
	float ReloadDurationCharge;//[Offset: 0x1a8, Size: 0x4]
	int AmmoPerClip;//[Offset: 0x1ac, Size: 0x4]
	float 82e06477f0;//[Offset: 0x1b0, Size: 0x4]
	cce09e6373 ReticleBrightnessConfig;//[Offset: 0x1b8, Size: 0x20]
	float 1f56395de6;//[Offset: 0x1d8, Size: 0x4]
	bool bIsFlashHider;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	enum ForceInitChangeFiringMode;//[Offset: 0x1dd, Size: 0x1]
	ScopeGlintConfig ScopeGlintConfig;//[Offset: 0x1e0, Size: 0x3c]
	float MinMagnificationFOV;//[Offset: 0x21c, Size: 0x4]
	float ReloadDurationTactical;//[Offset: 0x220, Size: 0x4]
	float BurstDelayMultiplier;//[Offset: 0x224, Size: 0x4]
	FText ScopeTextForObserverUI;//[Offset: 0x228, Size: 0x18]
	SoftClassPath 803bbc04c8;//[Offset: 0x240, Size: 0x18]
	AkAudioEvent* MuzzleSound;//[Offset: 0x258, Size: 0x8]
	float b7c487a708;//[Offset: 0x260, Size: 0x4]
	float SecondaryMagnificationFOV;//[Offset: 0x264, Size: 0x4]
	bool bUsePelletGridOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	Vector MuzzleFxScaleFlashHider;//[Offset: 0x26c, Size: 0xc]
	int 061e1d4e79;//[Offset: 0x278, Size: 0x4]
	int GripType_MN;//[Offset: 0x27c, Size: 0x4]
	float 228e6cc8ce;//[Offset: 0x280, Size: 0x4]
	FText MaxMagnificationText;//[Offset: 0x288, Size: 0x18]
	bool bIsSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	FName AttachmentTag;//[Offset: 0x2a4, Size: 0x8]
	float MaxMagnificationFOV;//[Offset: 0x2ac, Size: 0x4]
	AnimMontage* CharacterSpeedReloadTactical;//[Offset: 0x2b0, Size: 0x8]
	enum ScopeTypeForObserverUI;//[Offset: 0x2b8, Size: 0x1]
	float RecoilMultiplierHorizontal;//[Offset: 0x2bc, Size: 0x4]
	c835d7a808* ADSAlphaVectorCurve;//[Offset: 0x2c0, Size: 0x8]
	float ReloadAnimationPlayRate;//[Offset: 0x2c8, Size: 0x4]
	bool c05d1af0bc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	int OverrideAmmoItemID;//[Offset: 0x2d0, Size: 0x4]
	Vector FPPSocketOffset;//[Offset: 0x2d4, Size: 0xc]
	enum WeaponGripLeft;//[Offset: 0x2e0, Size: 0x1]
	enum SkinMeshTarget;//[Offset: 0x2e1, Size: 0x1]
	float ffb6123691;//[Offset: 0x2e4, Size: 0x4]
	float FireCycleAnimPlayRate;//[Offset: 0x2e8, Size: 0x4]
	enum[] AdditionalFiremode;//[Offset: 0x2f0, Size: 0x10]
	bool bUseReticleTypeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float StabilityMinForceAdditive;//[Offset: 0x304, Size: 0x4]
	AnimMontage* WeaponSpeedReloadCharge;//[Offset: 0x308, Size: 0x8]
	float MultipleAmmoSpeed;//[Offset: 0x310, Size: 0x4]
	283338a947[] ReticleTextureDataArray;//[Offset: 0x318, Size: 0x10]
	ParticleSystem* MuzzleFx;//[Offset: 0x328, Size: 0x8]
	float DynamicScopeButtonClickDelayTime;//[Offset: 0x330, Size: 0x4]
	bool bChangeFiringModes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	AnimMontage* CharacterSpeedReloadCharge;//[Offset: 0x338, Size: 0x8]
	AnimMontage* WeaponSpeedReloadTactical;//[Offset: 0x340, Size: 0x8]
	bool bThermalScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	Vector IKHandOffset;//[Offset: 0x34c, Size: 0xc]
	enum AttachmentSlotID;//[Offset: 0x358, Size: 0x1]
	float AnimationKickMultiplier;//[Offset: 0x35c, Size: 0x4]
	int MagnificationFOVSteps;//[Offset: 0x360, Size: 0x4]
	enum[] FiringModes;//[Offset: 0x368, Size: 0x10]
	float MultipleFiringBulletsSpread;//[Offset: 0x378, Size: 0x4]
	float DamageAdditive;//[Offset: 0x37c, Size: 0x4]
	float 1584b3437c;//[Offset: 0x380, Size: 0x4]
	float MagnificationFOVMaxIncrement;//[Offset: 0x384, Size: 0x4]
	float RecoilRecoveryMultiplier;//[Offset: 0x388, Size: 0x4]
	float[] 8913f0dd94;//[Offset: 0x390, Size: 0x10]
	66b032d675 ReplaceMuzzleAttachPoint;//[Offset: 0x3a0, Size: 0x14]
	<int,Vector2D> c996d7189a;//[Offset: 0x3b8, Size: 0x50]
	StaticMesh* StaticMeshAsset;//[Offset: 0x408, Size: 0x40]
	FName MouseSensitiveName;//[Offset: 0x448, Size: 0x8]
	bool bUseDefaultReticleCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	float StabilitySpeedScalar;//[Offset: 0x454, Size: 0x4]
	float 1cedff0ef5;//[Offset: 0x458, Size: 0x4]
	float fea4c9e001;//[Offset: 0x45c, Size: 0x4]

--------------------------------
Class: c92de2fbb3.DataAsset.Object
	2e3fe0002d f0a7c19629;//[Offset: 0x70, Size: 0xc0]
	2e3fe0002d Get();// 0xffffff90c89e5001

--------------------------------
Class: 2e3fe0002d
	LinearColor ScopeLensTint;//[Offset: 0x0, Size: 0x10]
	ReticleSettings* ReticleSettings;//[Offset: 0x10, Size: 0x8]
	float ParallaxMovementScale;//[Offset: 0x18, Size: 0x4]
	float BloomIntensity;//[Offset: 0x1c, Size: 0x4]
	float DepthBlurBlackPoint;//[Offset: 0x20, Size: 0x4]
	Vector WeaponCycleCameraOffset;//[Offset: 0x24, Size: 0xc]
	ReticleDirectingData ReticleDirectingData;//[Offset: 0x30, Size: 0x18]
	LinearColor ReticleTint;//[Offset: 0x48, Size: 0x10]
	Vector2D ReticleRect;//[Offset: 0x58, Size: 0x8]
	float ScopeOuterBrightness;//[Offset: 0x60, Size: 0x4]
	bool bReticleExtendTextureBorder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	d5de9f8df5 BrightSceneVisibility;//[Offset: 0x68, Size: 0xc]
	float ReticleAngularSize;//[Offset: 0x74, Size: 0x4]
	float NearClipMinClamp;//[Offset: 0x78, Size: 0x4]
	float ParallaxRadiusScale;//[Offset: 0x7c, Size: 0x4]
	float ReticleGamma;//[Offset: 0x80, Size: 0x4]
	float ScopeLensDistortion;//[Offset: 0x84, Size: 0x4]
	Vector2D RelativeOffsetMap;//[Offset: 0x88, Size: 0x8]
	float ScopeRadiusFar;//[Offset: 0x90, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x94, Size: 0x4]
	float ScopeRadiusNear;//[Offset: 0x98, Size: 0x4]
	Texture* ReticleTexture;//[Offset: 0xa0, Size: 0x8]
	float ScopeLensCA;//[Offset: 0xa8, Size: 0x4]
	float DepthBlurWhitePoint;//[Offset: 0xac, Size: 0x4]
	float BlurLevel;//[Offset: 0xb0, Size: 0x4]
	float DepthBlurPower;//[Offset: 0xb4, Size: 0x4]
	float NearClipStaticOffset;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: ReticleSettings.DataAsset.Object
	CustomReticleData* CustomReticleData;//[Offset: 0x70, Size: 0x8]
	Vector2D ReticleCenter;//[Offset: 0x78, Size: 0x8]
	Texture2D* ReticleTexture;//[Offset: 0x80, Size: 0x8]
	bool bUseReticleTextureOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	283338a947[] ReticleTextureDataArray;//[Offset: 0x90, Size: 0x10]
	float ReticleAngularSize;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CustomReticleData.DataAsset.Object
	CustomReticleTextureData[] CustomReticleTextureDataArray;//[Offset: 0x70, Size: 0x10]
	CustomReticleColorData[] CustomReticleColorDataArray;//[Offset: 0x80, Size: 0x10]
	float CustomColorBrightness;//[Offset: 0x90, Size: 0x4]
	enum ReticleType;//[Offset: 0x94, Size: 0x1]

--------------------------------
Class: CustomReticleTextureData
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Texture2D* ReticleTexture;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CustomReticleColorData
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector ReticleColor;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: 283338a947
	Texture2D* ReticleTexture;//[Offset: 0x0, Size: 0x8]
	Vector2D ReticleCenter;//[Offset: 0x8, Size: 0x8]
	float ReticleScale;//[Offset: 0x10, Size: 0x4]
	bool bUseHaloTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float BrightSceneOpacityMultiplier;//[Offset: 0x18, Size: 0x4]
	float ReticleAngularSize;//[Offset: 0x1c, Size: 0x4]
	float HaloTextureScale;//[Offset: 0x20, Size: 0x4]
	float BrightSceneOpacityMultiplierLowResolution;//[Offset: 0x24, Size: 0x4]
	Vector ReticleColor;//[Offset: 0x28, Size: 0xc]
	float BrightSceneLuminanceMultiplier;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ReticleDirectingData
	CurveFloat* ReticleDirectingAlpha;//[Offset: 0x0, Size: 0x8]
	FName ReticleMaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ReticleMaterialParamName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: d5de9f8df5
	float LuminanceMultiplier;//[Offset: 0x0, Size: 0x4]
	float OpacityMultiplier;//[Offset: 0x4, Size: 0x4]
	float OpacityMultiplierLowResolution;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: cce09e6373
	FName ReticleBrightnessParamZ;//[Offset: 0x0, Size: 0x8]
	c835d7a808* ReticleBrightnessSettingsCurve;//[Offset: 0x8, Size: 0x8]
	FName ReticleBrightnessParamX;//[Offset: 0x10, Size: 0x8]
	FName ReticleBrightnessParamY;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ScopeGlintConfig
	bool GlintEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D GlintStartFade;//[Offset: 0x4, Size: 0x8]
	Vector ScopeEndPositionLS;//[Offset: 0xc, Size: 0xc]
	float GlintRadiusScreen;//[Offset: 0x18, Size: 0x4]
	float ScopeRadiusScreen;//[Offset: 0x1c, Size: 0x4]
	float ScopeRadiusLS;//[Offset: 0x20, Size: 0x4]
	LinearColor GlintColor;//[Offset: 0x24, Size: 0x10]
	Vector2D GlintVisibilityArcLength;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: AkAudioEvent.Object
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	AkAudioBank* RequiredBank;//[Offset: 0x80, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0x88, Size: 0x4]
	float MaximumDuration;//[Offset: 0x8c, Size: 0x4]
	float MinimumDuration;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: 66b032d675
	096544c0ed d922374df4;//[Offset: 0x0, Size: 0xc]
	FName f2230d373b;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: 096544c0ed
	FName AttachmentTag;//[Offset: 0x0, Size: 0x8]
	enum Slot;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	double 0833317ec0;//[Offset: 0x290, Size: 0x8]
	byte OcclusionCollisionChannel;//[Offset: 0x298, Size: 0x1]
	float EarlyReflectionBusSendGain;//[Offset: 0x29c, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2a0, Size: 0x8]
	bool bOcclusionRefreshWhenPostAkEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	FString EventName;//[Offset: 0x2b0, Size: 0x10]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	float OcclusionRefreshInterval;//[Offset: 0x2c8, Size: 0x4]
	int EarlyReflectionOrder;//[Offset: 0x2dc, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 0x1]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	float 674df81109;//[Offset: 0x2e4, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2e8, Size: 0x8]
	float diffractionMaxPathLength;//[Offset: 0x40c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x410, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x468, Size: 0x4]
	float AttenuationScalingFactor;//[Offset: 0x46c, Size: 0x4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x478, Size: 0x10]
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	int diffractionMaxPaths;//[Offset: 0x48c, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x490, Size: 0x4]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0xffffff90c89e5001
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0xffffff90c89e5006
	void StopPlayingID(int PlayingID);// 0xffffff90c89e5001
	void Stop();// 0xffffff90c89e5000
	void SetUseSpatialAudio(const bool bNewValue);// 0xffffff90c89e5001
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0xffffff90c89e5002
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0xffffff90c89e5001
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0xffffff90c89e5003
	void SetReverbVolumes(bool bValue);// 0xffffff90c89e5001
	void SetOutputBusVolume(float BusVolume);// 0xffffff90c89e5001
	void SetOcclusionRefreshWhenPostAkEvent(bool Value);// 0xffffff90c89e5001
	void SetOcclusionRefreshInterval(float Value);// 0xffffff90c89e5001
	void SetListeners(out const AkComponent*[] Listeners);// 0xffffff90c89e5001
	void SetAttenuationScalingFactor(float Value);// 0xffffff90c89e5001
	void PostTrigger(FString Trigger);// 0xffffff90c89e5001
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, 17018ede23 LatentInfo);// 0xffffff90c89e5003
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0xffffff90c89e5004
	int PostAkEventByName(FString in_EventName);// 0xffffff90c89e5002
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, 17018ede23 LatentInfo);// 0xffffff90c89e5005
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0xffffff90c89e5006
	void GetRTPCValue(FString RTPC, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType);// 0xffffff90c89e5005
	float GetAttenuationRadius();// 0xffffff90c89e5001

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AttachableWeaponComponent.ActorComponent.Object
	bool bNoConsumeAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	bool 84d4e6fea1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 0x1]
	4a1a42bf9a* 9b22646f93;//[Offset: 0x140, Size: 0x8]
	AsyncStaticMeshComponent* 7ec1639016;//[Offset: 0x190, Size: 0x8]
	int 0782aa8805;//[Offset: 0x198, Size: 0x4]
	void OnRep_Expired();// 0xffffff90c89e5000
	void 0d3b1950a1(enum CancelReason);// 0xffffff90c89e5001
	void 2ccb1d5a7d(enum CancelReason);// 0xffffff90c89e5001

--------------------------------
Class: 4a1a42bf9a.DataAsset.Object
	eed576452f eed576452f;//[Offset: 0x70, Size: 0xf8]

--------------------------------
Class: eed576452f
	bool 915d9337a9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName cd892064f0;//[Offset: 0x4, Size: 0x8]
	FName c33ef2e0df;//[Offset: 0xc, Size: 0x8]
	float Damage;//[Offset: 0x14, Size: 0x4]
	StaticMesh* 4b17bec3dc;//[Offset: 0x18, Size: 0x40]
	float 250fcac934;//[Offset: 0x58, Size: 0x4]
	int 4953b8b732;//[Offset: 0x5c, Size: 0x4]
	class MatineeCameraShake* 4c99b946ed;//[Offset: 0x60, Size: 0x8]
	FName 8f5856b7bd;//[Offset: 0x68, Size: 0x8]
	bool bChangeFiringModes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	AkAudioEvent* 1053529b86;//[Offset: 0x78, Size: 0x8]
	AnimMontage* 1f8fb27efb;//[Offset: 0x80, Size: 0x8]
	enum 1e64aaf40e;//[Offset: 0x88, Size: 0x1]
	StaticMesh* 8fe427e2d7;//[Offset: 0x90, Size: 0x40]
	bool 43e77c93ac;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float TimeBetweenShots;//[Offset: 0xd4, Size: 0x4]
	AnimMontage* FireAnim;//[Offset: 0xd8, Size: 0x8]
	bool bUseGripOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	class MatineeCameraShake* 7931983e1f;//[Offset: 0xe8, Size: 0x8]
	enum WeaponClass;//[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: AsyncStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	54e348b603[] 54e348b603;//[Offset: 0x678, Size: 0x10]
	StaticMesh* b4ce8873a5;//[Offset: 0x690, Size: 0x8]
	StaticMesh* 217b1a33eb;//[Offset: 0x698, Size: 0x8]
	StaticMesh* StaticMeshAsset;//[Offset: 0x6a0, Size: 0x40]
	StaticMesh* d87b8949cb;//[Offset: 0x6e8, Size: 0x40]
	FName c9dc432e94;//[Offset: 0x728, Size: 0x8]
	delegate OnStaticMeshLoaded;//[Offset: 0x730, Size: 0x10]
	void SetStaticMeshAsset(StaticMesh* Asset);// 0xffffff90c89e5001
	bool IsSameMesh(out const StaticMesh* Asset);// 0xffffff90c89e5002
	bool IsLoading();// 0xffffff90c89e5001
	bool IsLoaded();// 0xffffff90c89e5001
	StaticMesh* GetStaticMeshAsset();// 0xffffff90c89e5001
	void ClearStaticMeshAsset();// 0xffffff90c89e5000

--------------------------------
Class: 54e348b603
	byte Channel;//[Offset: 0x0, Size: 0x1]
	byte Response;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: XtrmMuzzleLightFx.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x2d0, Size: 0x8]
	void OnParticleFinish(ParticleSystemComponent* PSystem);// 0xffffff90c89e5001

--------------------------------
Class: 0ff84afa2c.DataAsset.Object
	37bc982935[] cffd3f8ae1;//[Offset: 0x70, Size: 0x10]
	b8cd1598a6 AttachmentData;//[Offset: 0x80, Size: 0x460]
	<int,37bc982935> cbb89bd1e8;//[Offset: 0x4e0, Size: 0x50]
	AkAudioEvent* AttachedSoundAk;//[Offset: 0x530, Size: 0x8]
	AkAudioEvent* DetachedSoundAk;//[Offset: 0x538, Size: 0x8]

--------------------------------
Class: 37bc982935
	b8cd1598a6 AttachmentData;//[Offset: 0x0, Size: 0x460]

--------------------------------
Class: SkinID
	uint32 SkinID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	<enum,StaticMeshComponent*> ShieldPartCompMap;//[Offset: 0x6a8, Size: 0x50]
	<enum,WeaponMeshPartInfo> CachedShieldParts;//[Offset: 0x6f8, Size: 0x50]

--------------------------------
Class: WeaponMeshPartInfo
	MaterialInterface*[] LoadedOverrideMaterials;//[Offset: 0x60, Size: 0x10]
	638112bfc1* LoadedMesh;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: XtrmImpactEffect.Actor.Object
	ParticleSystem* 035bff5549;//[Offset: 0x2c8, Size: 0x8]
	ParticleSystem* 0e3f14bbe4;//[Offset: 0x2d0, Size: 0x8]
	ParticleSystem* 6b44d26ea2;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystem* c797e4e77e;//[Offset: 0x2e8, Size: 0x8]
	ParticleSystem* d139a0fa6f;//[Offset: 0x2f0, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x2f8, Size: 0x8]
	ParticleSystem* e1c516171d;//[Offset: 0x300, Size: 0x8]
	HitResult 6d9479b160;//[Offset: 0x308, Size: 0xd4]
	ParticleSystem* 2349f6c338;//[Offset: 0x3e0, Size: 0x8]
	ParticleSystem* 62a4b67574;//[Offset: 0x3f0, Size: 0x8]
	ParticleSystem* 0cd75507af;//[Offset: 0x400, Size: 0x8]
	ParticleSystem* HologramFX;//[Offset: 0x408, Size: 0x8]
	ParticleSystem* 38de296587;//[Offset: 0x410, Size: 0x8]
	ParticleSystem* 12dbd2217c;//[Offset: 0x418, Size: 0x8]
	ParticleSystem* 8bf8e54c8b;//[Offset: 0x420, Size: 0x8]
	ParticleSystem* 86b176253f;//[Offset: 0x428, Size: 0x8]
	ParticleSystem* 9f68fb07de;//[Offset: 0x430, Size: 0x8]
	1152538a88* 1152538a88;//[Offset: 0x438, Size: 0x8]
	ParticleSystem* f2ee06eeb1;//[Offset: 0x440, Size: 0x8]
	ParticleSystem* 0e092eb457;//[Offset: 0x448, Size: 0x8]
	ParticleSystem* ff17c1e9c6;//[Offset: 0x450, Size: 0x8]
	ParticleSystem* 97293ed865;//[Offset: 0x458, Size: 0x8]
	ParticleSystem* 2797996ab3;//[Offset: 0x460, Size: 0x8]
	ParticleSystem* 657493e42e;//[Offset: 0x468, Size: 0x8]
	ParticleSystem* 00f7e96bcd;//[Offset: 0x480, Size: 0x8]
	ParticleSystem* 28d4ce2239;//[Offset: 0x488, Size: 0x8]
	CurveFloat* cc06436cc4;//[Offset: 0x490, Size: 0x8]
	ParticleSystem* 48935edf5f;//[Offset: 0x4a0, Size: 0x8]
	ParticleSystem* 0148d42d15;//[Offset: 0x4a8, Size: 0x8]
	ParticleSystem* 2ebb0a1237;//[Offset: 0x4b0, Size: 0x8]
	AkAudioEvent* DefaultImpactSound;//[Offset: 0x4d8, Size: 0x8]
	ParticleSystem* 5fe68c8a3c;//[Offset: 0x4e0, Size: 0x8]
	CurveFloat* 1fb7e16177;//[Offset: 0x4e8, Size: 0x8]
	ParticleSystem* 203d03182c;//[Offset: 0x4f0, Size: 0x8]
	ParticleSystem* 0942b468d3;//[Offset: 0x4f8, Size: 0x8]
	ParticleSystem* 88f9f489cb;//[Offset: 0x500, Size: 0x8]
	ParticleSystem* 0e0ef7edc9;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* f09a5c58e4;//[Offset: 0x518, Size: 0x8]
	ParticleSystemComponent* ParticleComp;//[Offset: 0x520, Size: 0x8]
	void OnImpactEffectFinished(ParticleSystemComponent* InPSystem);// 0xffffff90c89e5001

--------------------------------
Class: 1152538a88.DataAsset.Object
	<enum,ParticleSystem*> 6406e9edfd;//[Offset: 0x70, Size: 0x50]

--------------------------------
Class: b657cbe858
	de9b927211[] a6d7c2f3b1;//[Offset: 0x0, Size: 0x10]
	31f67737bd a92082dd47;//[Offset: 0x10, Size: 0x48]
	e63bbf9c41[] 8a846e8622;//[Offset: 0x58, Size: 0x10]
	bool DefaultAttachmentPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool 6cf0332e82;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: de9b927211
	FName e8569ec5cf;//[Offset: 0x0, Size: 0x8]
	FName AttachmentTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: 31f67737bd
	StaticMesh* AttachmentMeshAsset;//[Offset: 0x0, Size: 0x40]
	FName AttachmentTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: e63bbf9c41
	096544c0ed d922374df4;//[Offset: 0x0, Size: 0xc]
	de9b927211[] ed32427511;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: e732b7e652.DataAsset.Object
	fc1661c4bd fc1661c4bd;//[Offset: 0x70, Size: 0x248]
	3bd7230e71 3bd7230e71;//[Offset: 0x2b8, Size: 0x70]

--------------------------------
Class: fc1661c4bd
	Vector e0c1fa8da5;//[Offset: 0x0, Size: 0xc]
	float 3047d6c654;//[Offset: 0xc, Size: 0x4]
	Vector c661adba2d;//[Offset: 0x10, Size: 0xc]
	uint32 ItemId;//[Offset: 0x1c, Size: 0x4]
	enum 35d4fce923;//[Offset: 0x20, Size: 0x1]
	<enum,b657cbe858> 8ec89dcc39;//[Offset: 0x28, Size: 0x50]
	bool 2fd5fa4b2e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FName WeaponTag;//[Offset: 0x7c, Size: 0x8]
	float 5a024f209d;//[Offset: 0x84, Size: 0x4]
	enum 5e5612e8f4;//[Offset: 0x88, Size: 0x1]
	bool 70117e5aea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	float IconRatio;//[Offset: 0x8c, Size: 0x4]
	float 709a8bb05e;//[Offset: 0x90, Size: 0x4]
	float WeaponEquipDurationMultiplier;//[Offset: 0x94, Size: 0x4]
	FName WeaponMeshName;//[Offset: 0x98, Size: 0x8]
	AnimMontage* c827e682fa;//[Offset: 0xa0, Size: 0x8]
	float 264167c3fe;//[Offset: 0xa8, Size: 0x4]
	enum 1e3a191b5f;//[Offset: 0xac, Size: 0x1]
	float 44c4bdb0a4;//[Offset: 0xb0, Size: 0x4]
	bool bUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool cea549d13b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	float f8263da032;//[Offset: 0xb8, Size: 0x4]
	float cb091c3210;//[Offset: 0xbc, Size: 0x4]
	FName d5b412ac56;//[Offset: 0xc0, Size: 0x8]
	float WeaponUnequipDurationMultiplier;//[Offset: 0xc8, Size: 0x4]
	float 436525f51e;//[Offset: 0xcc, Size: 0x4]
	float a030a6859f;//[Offset: 0xd0, Size: 0x4]
	Texture2D* IconTexture;//[Offset: 0xd8, Size: 0x8]
	float 04ffaaf4ed;//[Offset: 0xe0, Size: 0x4]
	float 30bed4ad09;//[Offset: 0xe4, Size: 0x4]
	bool 47a0c8d496;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool a2f0b6d38e;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bUseDefaultScoreMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool e3e6372a12;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	class XtrmImpactEffect* ImpactTemplate;//[Offset: 0xf0, Size: 0x8]
	float edfaf15486;//[Offset: 0xf8, Size: 0x4]
	float 2c0b9d2d64;//[Offset: 0xfc, Size: 0x4]
	bool ebb5f7e21f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float[] dbb8174263;//[Offset: 0x108, Size: 0x10]
	float 3d776b3325;//[Offset: 0x118, Size: 0x4]
	FName f8b99f9ca3;//[Offset: 0x11c, Size: 0x8]
	enum a8a0f9e2a3;//[Offset: 0x124, Size: 0x1]
	<enum> 062f60cbc0;//[Offset: 0x128, Size: 0x50]
	<enum,31f67737bd> bece314b19;//[Offset: 0x178, Size: 0x50]
	float 701585b910;//[Offset: 0x1c8, Size: 0x4]
	0ff84afa2c* 5cda319da8;//[Offset: 0x1d0, Size: 0x8]
	enum WeaponClass;//[Offset: 0x228, Size: 0x1]
	float 65f82a8bd4;//[Offset: 0x22c, Size: 0x4]
	float 6ee92ad56c;//[Offset: 0x230, Size: 0x4]
	enum WeaponGripLeft;//[Offset: 0x234, Size: 0x1]
	float 75d23b0366;//[Offset: 0x238, Size: 0x4]
	bool DestructibleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	int d728905f73;//[Offset: 0x240, Size: 0x4]
	float 84cf718964;//[Offset: 0x244, Size: 0x4]

--------------------------------
Class: 3bd7230e71
	AkAudioEvent* 8e4d1df121;//[Offset: 0x0, Size: 0x8]
	bool e0e3ec34bd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	AkAudioEvent* aba630a7a9;//[Offset: 0x10, Size: 0x8]
	AkAudioEvent* b2031c0ce6;//[Offset: 0x18, Size: 0x8]
	AkAudioEvent* 3adea72069;//[Offset: 0x20, Size: 0x8]
	AkAudioEvent* 5d99342bff;//[Offset: 0x28, Size: 0x8]
	AkAudioEvent* 0068bfb2f8;//[Offset: 0x30, Size: 0x8]
	AkAudioEvent* 5e1f907377;//[Offset: 0x38, Size: 0x8]
	AkAudioEvent* 17b10dbe4e;//[Offset: 0x40, Size: 0x8]
	AkAudioEvent* a40b3ccfd3;//[Offset: 0x48, Size: 0x8]
	AkAudioEvent* 7ec8784fac;//[Offset: 0x50, Size: 0x8]
	AkAudioEvent* 78a04d29d4;//[Offset: 0x58, Size: 0x8]
	AkAudioEvent* 64f0b402aa;//[Offset: 0x60, Size: 0x8]
	AkAudioEvent* d6e63e0dc4;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: VehicleTrunkComponent.ActorComponent.Object
	bbd57461f8[] 1ac588a82c;//[Offset: 0x130, Size: 0x10]
	bbd57461f8[] 37232c0492;//[Offset: 0x140, Size: 0x10]
	bool bShareTrunkWithOtherTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	12aa3af638 7adc3b09f9;//[Offset: 0x158, Size: 0x30]
	280f5be7aa 428989f76f;//[Offset: 0x190, Size: 0x30]
	AkAudioEvent* TrunkPickUpSoundAk;//[Offset: 0x1d8, Size: 0x8]
	AkAudioEvent* TrunkDropSoundAk;//[Offset: 0x200, Size: 0x8]
	XtrmPlayerController*[] 8b17955ef8;//[Offset: 0x210, Size: 0x10]
	void CheckListeners();// 0xffffff90c89e5000

--------------------------------
Class: bbd57461f8.65d872f472.EquipmentBaseData
	bool bIsFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int16 ServerIndex;//[Offset: 0x32, Size: 0x2]

--------------------------------
Class: 65d872f472.EquipmentBaseData
	ItemInstance Item;//[Offset: 0x4, Size: 0x8]
	3dd3ee565e[] 034db47c60;//[Offset: 0x10, Size: 0x10]
	float 8fd575515c;//[Offset: 0x20, Size: 0x4]
	int AmmoCount;//[Offset: 0x24, Size: 0x4]
	103f37913b 7df712b49e;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: EquipmentBaseData
	int OwnerPlayerID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ItemInstance
	uint32 ItemId;//[Offset: 0x0, Size: 0x4]
	uint16 StackCount;//[Offset: 0x4, Size: 0x2]

--------------------------------
Class: 3dd3ee565e
	enum Slot;//[Offset: 0x0, Size: 0x1]
	int AttachmentID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 103f37913b
	int da8301b054;//[Offset: 0x0, Size: 0x4]
	int f8894af124;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 12aa3af638
	5ac1fda6d7[] 318a013545;//[Offset: 0x0, Size: 0x10]
	247d26c63a[] EquipItemList;//[Offset: 0x10, Size: 0x10]
	885eb072c8[] WeaponItemList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: 5ac1fda6d7.EquipmentBaseData
	ItemInstance Item;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: 247d26c63a.5ac1fda6d7.EquipmentBaseData
	float 8fd575515c;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: 885eb072c8.5ac1fda6d7.EquipmentBaseData
	3dd3ee565e[] 034db47c60;//[Offset: 0x10, Size: 0x10]
	int AmmoCount;//[Offset: 0x20, Size: 0x4]
	103f37913b 7df712b49e;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: 280f5be7aa
	0229ef28a0[] 3416406dc6;//[Offset: 0x0, Size: 0x10]
	0229ef28a0[] 642fccf186;//[Offset: 0x10, Size: 0x10]
	0229ef28a0[] a85c68d0b8;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: 0229ef28a0
	enum EventType;//[Offset: 0x0, Size: 0x1]
	int16 ServerIndex;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: XtrmGlassWindowComponent.XtrmGridCullStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float RespawnTimeSec;//[Offset: 0x698, Size: 0x4]
	2e8eb46dc2 0fcdaf6031;//[Offset: 0x6a0, Size: 0x58]
	AkAudioEvent* DestructSound;//[Offset: 0x718, Size: 0x8]
	Transform 8a99ce1ff6;//[Offset: 0x730, Size: 0x30]
	class XtrmParticle* 79cb54c768;//[Offset: 0x760, Size: 0x8]

--------------------------------
Class: XtrmGridCullStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool 3d56838dc0;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x664, Size: 0x1]
	enum cf179efeab;//[Offset: 0x674, Size: 0x1]

--------------------------------
Class: 2e8eb46dc2
	<enum,fb75b96718> 40585d0a45;//[Offset: 0x0, Size: 0x50]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: fb75b96718.fa72ce9067

--------------------------------
Class: fa72ce9067
	float 132192ec08;//[Offset: 0x0, Size: 0x4]
	float CheckDistance;//[Offset: 0x8, Size: 0x4]
	<int,float> 37d6faf64e;//[Offset: 0x10, Size: 0x50]
	<int,enum> 4a8d4f2982;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: XtrmParticle.Actor.Object
	ParticleParameter[] DefaultParameters;//[Offset: 0x2c8, Size: 0x10]
	enum 27f0a05e4b;//[Offset: 0x2d8, Size: 0x1]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x2e0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x2e8, Size: 0x8]
	AkComponent* ParticleAudio;//[Offset: 0x308, Size: 0x8]
	enum 32106ba5e2;//[Offset: 0x310, Size: 0x1]
	enum 6fe74a6116;//[Offset: 0x311, Size: 0x1]
	enum 851050bf2e;//[Offset: 0x316, Size: 0x1]
	void OnParticleFinish(ParticleSystemComponent* PSystem);// 0xffffff90c89e5001
	void OnParticleCollide(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, FName BoneName, PhysicalMaterial* PhysMat);// 0xffffff90c89e5009
	void OnParameterUpdated();// 0xffffff90c89e5000
	Vector GetParticleVectorParamter(const FName Name, const Vector DefaultValue);// 0xffffff90c89e5003
	float GetParticleParamterByName(const FName Name, const float DefaultValue);// 0xffffff90c89e5003
	float GetParticleParamter(FString Name, float DefaultValue);// 0xffffff90c89e5003
	void AttachToParent();// 0xffffff90c89e5000

--------------------------------
Class: ParticleParameter
	bool bEnableRTPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]
	Vector Value;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ItemPackage.Actor.Object
	int CreatorUniqueId;//[Offset: 0x2c4, Size: 0x4]
	BoxComponent* BoxComponent;//[Offset: 0x2c8, Size: 0x8]
	enum ed4476eab3;//[Offset: 0x2e0, Size: 0x1]
	AsyncStaticMeshComponent* DropStaticMesh;//[Offset: 0x300, Size: 0x8]
	ConveyorBase* 11812689ff;//[Offset: 0x320, Size: 0x20]
	FString CreatorAccountId;//[Offset: 0x348, Size: 0x10]
	int CreatorTeamId;//[Offset: 0x35c, Size: 0x4]
	a1349ffbe6 ItemContainer;//[Offset: 0x360, Size: 0x30]
	StaticMesh* 47b86bb2d2;//[Offset: 0x390, Size: 0x40]
	FString CreatorName;//[Offset: 0x3d0, Size: 0x10]
	void OnRep_ConveyorBase();// 0xffffff90c89e5000

--------------------------------
Class: ConveyorBase.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2b0, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstanceDynamic;//[Offset: 0x2bc, Size: 0x20]
	ConveyorSplineComponent* SplineComponent;//[Offset: 0x2e0, Size: 0x8]
	void OnComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5005

--------------------------------
Class: ConveyorSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: a1349ffbe6
	885eb072c8[] 722b141513;//[Offset: 0x0, Size: 0x10]
	5ac1fda6d7[] 318a013545;//[Offset: 0x10, Size: 0x10]
	247d26c63a[] EquipItemList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: e1dc9fce5a.f1209258c2
	Vector_NetQuantizeNormal Normal;//[Offset: 0x90, Size: 0xc]

--------------------------------
Class: f1209258c2
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0xc, Size: 0xc]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x18, Size: 0x20]
	PrimitiveComponent* Component;//[Offset: 0x38, Size: 0x20]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x58, Size: 0xc]
	Actor* Actor;//[Offset: 0x64, Size: 0x20]
	Vector_NetQuantize Location;//[Offset: 0x84, Size: 0xc]

--------------------------------
Class: 996d1675d6
	enum cd60ef96c4;//[Offset: 0x0, Size: 0x1]
	float 08991de33e;//[Offset: 0x44, Size: 0x4]
	Vector2D e1602838c7;//[Offset: 0x48, Size: 0x8]
	float 383ed67ff1;//[Offset: 0x70, Size: 0x4]
	int8 d7f262a414;//[Offset: 0x94, Size: 0x1]
	float 932c780c25;//[Offset: 0x98, Size: 0x4]
	float 03c846527e;//[Offset: 0x9c, Size: 0x4]
	float 515b250c2b;//[Offset: 0xa0, Size: 0x4]
	int8 768f02dbd1;//[Offset: 0xa4, Size: 0x1]
	float BoostGauge;//[Offset: 0xa8, Size: 0x4]
	bool 49e5a4c0e5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]

--------------------------------
Class: a9e0e1d115
	Rotator BaseWorldDir;//[Offset: 0x0, Size: 0xc]
	enum InVaultType;//[Offset: 0xc, Size: 0x1]
	float AdditiveEndZOffset;//[Offset: 0x10, Size: 0x4]
	float Direction;//[Offset: 0x14, Size: 0x4]
	Vector V_Start;//[Offset: 0x1c, Size: 0xc]
	Vector V_ApexAdditive;//[Offset: 0x28, Size: 0xc]
	float DistanceFromObject;//[Offset: 0x34, Size: 0x4]
	float PlayerSpeed;//[Offset: 0x38, Size: 0x4]
	PrimitiveComponent* BaseComp;//[Offset: 0x3c, Size: 0x20]
	Vector BaseWorldLoc;//[Offset: 0x5c, Size: 0xc]
	Vector V_Apex;//[Offset: 0x68, Size: 0xc]
	Vector V_End;//[Offset: 0x74, Size: 0xc]
	bool bEndToFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: MultiInteractableChangeData
	byte MultiInteractCount;//[Offset: 0x0, Size: 0x1]
	byte InteractType;//[Offset: 0x1, Size: 0x1]
	byte 0152bf270c;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: b9964f7d6d
	float 62f4c71e4c;//[Offset: 0x0, Size: 0x4]
	float c23589fa87;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: cb7a3350f7

--------------------------------
Class: bbeca58c7a

--------------------------------
Class: XtrmPlayerState.PlayerState.Info.Actor.Object
	RadioMessageSetting RadioMessageSetting;//[Offset: 0x3b0, Size: 0x38]
	int LimitSeasonTitleItemID;//[Offset: 0x3e8, Size: 0x4]
	FString FlagId;//[Offset: 0x650, Size: 0x10]
	FString KillerName;//[Offset: 0x660, Size: 0x10]
	int LastSentAttackID;//[Offset: 0x670, Size: 0x4]
	bool bIsWaitingReviveSelfDecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	FString[] ca42fa79ba;//[Offset: 0x6e0, Size: 0x10]
	int[] RebirthPresetList;//[Offset: 0x6f8, Size: 0x10]
	int AssistCount;//[Offset: 0x70c, Size: 0x4]
	690ccc17e7 8db7f171cd;//[Offset: 0x718, Size: 0x430]
	Team* bfa6afc219;//[Offset: 0xb4c, Size: 0x20]
	float TotalGivenDamage;//[Offset: 0xb78, Size: 0x4]
	int ReviveSelfCount;//[Offset: 0xb7c, Size: 0x4]
	WaitingReviveSelfMessage WaitingReviveSelfMessage;//[Offset: 0xba0, Size: 0x10]
	TeamMemberInfo MemberInfo;//[Offset: 0xbe4, Size: 0x8]
	EventInfo[] ReplicatedMissionEventIDs;//[Offset: 0xbf0, Size: 0x10]
	int KillCount;//[Offset: 0xc18, Size: 0x4]
	IssuedID IssuedID;//[Offset: 0xc3c, Size: 0x4]
	void OnRep_WaitingReviveSelfMessage();// 0xffffff90c89e5000
	void OnRep_OutGameSpectator();// 0xffffff90c89e5000
	void OnRep_MemberInfo(out const TeamMemberInfo OldMemberInfo);// 0xffffff90c89e5001
	void OnRep_LimitSeasonTitleItemID();// 0xffffff90c89e5000
	void OnRep_LastSentAttackID();// 0xffffff90c89e5000
	void OnRep_KillCount();// 0xffffff90c89e5000
	void OnRep_EnableMissionEventIDs();// 0xffffff90c89e5000
	void OnRep_ChangeRadioMessageSetting();// 0xffffff90c89e5000
	void OnRep_AssistCount();// 0xffffff90c89e5000
	float GetPing();// 0xffffff90c89e5001
	void 29b2a16c8c(XtrmPlayerState* ScouterPS, XtrmPlayerState* LostedPS, bool bIsToScouterTeam, enum ScoutKillAssistType, int ScoutKillAssistValue);// 0xffffff90c89e5005
	void 0284c9fea8(XtrmPlayerState* SenderPS, XtrmPlayerState* ReceiverPS, enum MessageType);// 0xffffff90c89e5003
	void Client_ShowMannerScorePopup(FString TeamKillerName, FString TeamCauseGroggyUserName);// 0xffffff90c89e5002
	void b3c5ee86b7(XtrmPlayerState* KillerPS, XtrmPlayerState* VictimPS, XtrmPlayerState* GroggyCauserPS, const DamageType* DamageType, enum DamageReason, class Object KillCauserClass, int AlivePlayerNum, int AliveTeamNum, bool bGroggyCauserRealKiller, float KillDistance, bool bIsTeamEliminated, FString DamageCauserName, const uint32 InDamageCauserItemID);// 0xffffff90c89e500d
	void e17b30920e(const XtrmPlayerState* VictimPS, enum DamageReason);// 0xffffff90c89e5002
	void ad57f2e884(XtrmPlayerState* BannedPS, FString BanCode, FString BanType);// 0xffffff90c89e5003
	void BroadcastKickBan();// 0xffffff90c89e5000
	void e16f353f44(XtrmPlayerState* GroggyCauserPS, XtrmPlayerState* VictimPS, const DamageType* DamageType, enum DamageReason, class Object GroggyCauserClass, float GroggyDistance, bool bTeamEliminated, FString DamageCauserName, const uint32 InDamageCauserItemID);// 0xffffff90c89e5009
	void 458484bfb1(XtrmPlayerState* KillerPS, XtrmPlayerState* GroggyCauserPS, const DamageType* DamageType, enum DamageReason, class Object KillCauserClass, int AlivePlayerNum, int AliveTeamNum, bool bGroggyCauserRealKiller, float KillDistance, bool bIsTeamEliminated, FString DamageCauserName, const uint32 InDamageCauserItemID);// 0xffffff90c89e500c

--------------------------------
Class: TeamMemberInfo
	int TeamNumber;//[Offset: 0x0, Size: 0x4]
	int MyNumber;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RadioMessageSetting
	QuickMarkerSetting QuickMarkerSetting;//[Offset: 0x0, Size: 0x10]
	WheelMessageSetting WheelMessageSetting;//[Offset: 0x10, Size: 0x10]
	enum Gender;//[Offset: 0x20, Size: 0x1]
	ListMessageSetting ListMessageSetting;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: QuickMarkerSetting
	RadioMessage[] 07dac295a5;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RadioMessage
	FString MessageId;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WheelMessageSetting
	RadioMessage[] RadioMessages;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ListMessageSetting
	RadioMessage[] RadioMessages;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 690ccc17e7
	float 323e00b764;//[Offset: 0x0, Size: 0x4]
	int 3a39ecfb70;//[Offset: 0x4, Size: 0x4]
	int 1567fae956;//[Offset: 0x8, Size: 0x4]
	float 3d66a4012b;//[Offset: 0xc, Size: 0x4]
	int ce5fe404d4;//[Offset: 0x10, Size: 0x4]
	39dfaad44f[] a26d3f2c87;//[Offset: 0x18, Size: 0x10]
	int 8cc80389ff;//[Offset: 0x28, Size: 0x4]
	int abdd10da9e;//[Offset: 0x2c, Size: 0x4]
	float 5cbd3e7feb;//[Offset: 0x30, Size: 0x4]
	int 71ffbb0995;//[Offset: 0x34, Size: 0x4]
	int d313461548;//[Offset: 0x38, Size: 0x4]
	float 26eb7b1f5b;//[Offset: 0x3c, Size: 0x4]
	int64 LastLogoutTimestamp;//[Offset: 0x40, Size: 0x8]
	int 092f2d8737;//[Offset: 0x58, Size: 0x4]
	float be39cae856;//[Offset: 0x5c, Size: 0x4]
	float 213772968e;//[Offset: 0x60, Size: 0x4]
	float 33a4010e9a;//[Offset: 0x64, Size: 0x4]
	float HealAmount;//[Offset: 0x68, Size: 0x4]
	<FString,8394e89234> e6c6a04599;//[Offset: 0x70, Size: 0x50]
	float 4dd83409b4;//[Offset: 0xc0, Size: 0x4]
	<int,int> KillCountPerTeam;//[Offset: 0xd8, Size: 0x50]
	<enum,2ae80587a3> 112645db19;//[Offset: 0x128, Size: 0x50]
	float 59efc2af17;//[Offset: 0x178, Size: 0x4]
	float a31b5a1bd4;//[Offset: 0x17c, Size: 0x4]
	<FString,8394e89234> 378a7aae80;//[Offset: 0x180, Size: 0x50]
	float 1ce1669bb3;//[Offset: 0x1d0, Size: 0x4]
	<uint32,int> 30e64065fb;//[Offset: 0x1d8, Size: 0x50]
	<int,d1f90cd55e> f52f949699;//[Offset: 0x228, Size: 0x50]
	int bc51ccb27e;//[Offset: 0x278, Size: 0x4]
	float a214e9f40a;//[Offset: 0x27c, Size: 0x4]
	int TeamUpCount;//[Offset: 0x280, Size: 0x4]
	float 566d08f9a4;//[Offset: 0x284, Size: 0x4]
	<int,int> 8fe4e8ac98;//[Offset: 0x288, Size: 0x50]
	UniqueNetIdRepl[] af20cc341c;//[Offset: 0x2d8, Size: 0x10]
	UniqueNetIdRepl[] d60dd17430;//[Offset: 0x2f8, Size: 0x10]
	float TotalLogoutTimeSeconds;//[Offset: 0x308, Size: 0x4]
	float c1a0d85158;//[Offset: 0x30c, Size: 0x4]
	int ae5457f0f3;//[Offset: 0x310, Size: 0x4]
	<FString,int> cd36266662;//[Offset: 0x318, Size: 0x50]
	39dfaad44f[] 9fd04f9043;//[Offset: 0x368, Size: 0x10]
	int RespawnCount;//[Offset: 0x378, Size: 0x4]
	int f50c8f88cd;//[Offset: 0x384, Size: 0x4]
	int ac79505e49;//[Offset: 0x388, Size: 0x4]
	int b4177c1c26;//[Offset: 0x38c, Size: 0x4]
	<FString,float> 1f4eb31be7;//[Offset: 0x390, Size: 0x50]
	<int,int> b5fc6001b2;//[Offset: 0x3e0, Size: 0x50]

--------------------------------
Class: 39dfaad44f
	enum DamageReason;//[Offset: 0x0, Size: 0x1]
	enum DamageTypeCategory;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: 8394e89234
	int Shots;//[Offset: 0x0, Size: 0x4]
	<enum,8880659008> d0b0e5abfd;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: 8880659008
	int Kills;//[Offset: 0x0, Size: 0x4]
	float Damages;//[Offset: 0x4, Size: 0x4]
	int Hits;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 2ae80587a3
	int[] c4c69416a4;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: d1f90cd55e
	int a8e4690be4;//[Offset: 0x0, Size: 0x4]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int[] 9821756a2f;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Team.Actor.Object
	int Ranking;//[Offset: 0x308, Size: 0x4]
	bool 0c62c0ff78;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	TeamMember[] Members;//[Offset: 0x310, Size: 0x10]
	int Number;//[Offset: 0x320, Size: 0x4]
	void OnRep_Ranking(int OldRanking);// 0xffffff90c89e5001
	void OnRep_Members();// 0xffffff90c89e5000

--------------------------------
Class: TeamMember
	int MemberNumber;//[Offset: 0x78, Size: 0x4]
	int TeamNumber;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: WaitingReviveSelfMessage
	float ReviveSelfSeconds;//[Offset: 0x0, Size: 0x4]
	bool bIsInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int RemainReviveSelfCount;//[Offset: 0x8, Size: 0x4]
	int DeathLossPoint;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: EventInfo
	FString EventTypeId;//[Offset: 0x0, Size: 0x10]
	int EventCount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: IssuedID
	int ID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: 909a45ab89.DataAsset.Object
	1ca25afd37 1ca25afd37;//[Offset: 0x70, Size: 0x228]
	bool IsRequirementPassed(out const bool bInIsClimb, out const bool bInIsVault, out const bool bInIsLedgeGrab, out const bool bInIsSlide, out const bool bInIsNarrow, out const float InCharSpeed, out const float InZSpeed, out const int FirstRow, out const float InRelativeZ, out const 0dfc052ba1 InLedgeData);// 0xffffff90c89e500b
	AnimSequenceBase* GetVaultAnimation(const bool bHasRifle, const bool bIsFPP);// 0xffffff90c89e5003
	float GetBlendSpeedByDistance(float InDistance);// 0xffffff90c89e5002
	float GetAnimationLength();// 0xffffff90c89e5001
	CurveFloat* GetAnimationCurve();// 0xffffff90c89e5001

--------------------------------
Class: 1ca25afd37
	bool bIsSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector CharacterPostVaultVelocityScalarVector_ToFall;//[Offset: 0x4, Size: 0xc]
	float MappedDampeningScalar;//[Offset: 0x10, Size: 0x4]
	float ApexAdditiveStartTime;//[Offset: 0x14, Size: 0x4]
	float MinCancelVTimer;//[Offset: 0x18, Size: 0x4]
	float LocationStartNormalScale;//[Offset: 0x1c, Size: 0x4]
	float MappedDampeningVTimerMax;//[Offset: 0x20, Size: 0x4]
	float LocationEndNormalScale;//[Offset: 0x24, Size: 0x4]
	Vector2D PlayrateBySpeed_OutMap_PreApex;//[Offset: 0x28, Size: 0x8]
	AnimSequenceBase* AnimationSequence_Rifle;//[Offset: 0x30, Size: 0x8]
	float PreApexSpeedScale;//[Offset: 0x38, Size: 0x4]
	float PostApexSpeedScale;//[Offset: 0x3c, Size: 0x4]
	float LedgeGrabStartTraceDownDistance;//[Offset: 0x40, Size: 0x4]
	bool bUseStaticVTimerDampening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float VaultInitialTimer;//[Offset: 0x48, Size: 0x4]
	float CharacterPostVaultVelocityScalar;//[Offset: 0x4c, Size: 0x4]
	float VaultEndTimerFall;//[Offset: 0x50, Size: 0x4]
	Vector2D CharLocationInterpSpeedInMap;//[Offset: 0x54, Size: 0x8]
	Vector2D PlayrateBySpeed_InMap_PostApex;//[Offset: 0x5c, Size: 0x8]
	AnimSequenceBase* AnimationSequence_Rifle_FPP;//[Offset: 0x68, Size: 0x8]
	enum VaultAnimType;//[Offset: 0x70, Size: 0x1]
	float AnimBlendOutTime;//[Offset: 0x74, Size: 0x4]
	float StaticDampeningScalar;//[Offset: 0x78, Size: 0x4]
	bool bCanVaultWithWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	float PostVaultTimerProgressionScale;//[Offset: 0x80, Size: 0x4]
	float DBNOExitApexTime;//[Offset: 0x84, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 0x4]
	Vector2D StartCutoffBySpeed_OutMap;//[Offset: 0x8c, Size: 0x8]
	bool bIsClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float LocationStartZOffset;//[Offset: 0x98, Size: 0x4]
	bool bUseCustomApexForTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	Vector CharacterPostVaultVelocityScalarVector;//[Offset: 0xa0, Size: 0xc]
	AnimSequenceBase* AnimationSequence_FPP;//[Offset: 0xb0, Size: 0x8]
	Vector2D StartCutoffByDistance_InMap;//[Offset: 0xb8, Size: 0x8]
	Vector2D TimerProgressionByDistanceOutMap;//[Offset: 0xc0, Size: 0x8]
	float StaticDampeningVTimerMax;//[Offset: 0xc8, Size: 0x4]
	Vector2D TimerProgressionByDistanceInMap;//[Offset: 0xcc, Size: 0x8]
	a4af6e1499 604e126177;//[Offset: 0xd8, Size: 0xd8]
	float CustomApex;//[Offset: 0x1b0, Size: 0x4]
	Vector2D PlayrateBySpeed_OutMap_PostApex;//[Offset: 0x1b4, Size: 0x8]
	float DirectionInterpSpeed;//[Offset: 0x1bc, Size: 0x4]
	float TaskEndVTimer;//[Offset: 0x1c0, Size: 0x4]
	AnimSequenceBase* AnimationSequence;//[Offset: 0x1c8, Size: 0x8]
	bool bIsCancellable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	CurveFloat* AnimationCurve;//[Offset: 0x1d8, Size: 0x8]
	float ClimbEndWithApexZEndVTime;//[Offset: 0x1e0, Size: 0x4]
	float MaxCancelVTimer;//[Offset: 0x1e4, Size: 0x4]
	Vector2D PlayrateBySpeed_InMap_PreApex;//[Offset: 0x1e8, Size: 0x8]
	float ApexAdditiveEndTime;//[Offset: 0x1f0, Size: 0x4]
	float VaultEndTimerNormal;//[Offset: 0x1f4, Size: 0x4]
	Vector2D StartCutoffBySpeed_InMap;//[Offset: 0x1f8, Size: 0x8]
	int MoveIndex;//[Offset: 0x200, Size: 0x4]
	bool bUseMappedVTimerDampening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	float AdditiveZOffsetStartVTime;//[Offset: 0x208, Size: 0x4]
	float TimerProgressionVTimerMax;//[Offset: 0x20c, Size: 0x4]
	float VaultEndToFallTimerCutoff;//[Offset: 0x210, Size: 0x4]
	Vector2D CharLocationInterpSpeedOutMap;//[Offset: 0x214, Size: 0x8]
	float LocationEndZOffset;//[Offset: 0x21c, Size: 0x4]
	Vector2D StartCutoffByDistance_OutMap;//[Offset: 0x220, Size: 0x8]

--------------------------------
Class: a4af6e1499
	FloatRange SpeedRange;//[Offset: 0x0, Size: 0x10]
	enum IsSlide;//[Offset: 0x10, Size: 0x1]
	enum IsClimb;//[Offset: 0x11, Size: 0x1]
	FloatRange CapsuleRelativeRange;//[Offset: 0x14, Size: 0x10]
	enum IsVault;//[Offset: 0x24, Size: 0x1]
	enum IsNarrow;//[Offset: 0x25, Size: 0x1]
	Int32Range RowRange;//[Offset: 0x28, Size: 0x10]
	c94998ef10 ExecConfig;//[Offset: 0x38, Size: 0x68]
	Int32Range LedgeRange;//[Offset: 0xa0, Size: 0x10]
	enum IsLedgeGrab;//[Offset: 0xb0, Size: 0x1]
	Int32Range FreeSpaceRange;//[Offset: 0xb4, Size: 0x10]
	FloatRange ZSpeedRange;//[Offset: 0xc4, Size: 0x10]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: c94998ef10
	bool bUse3DDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExecutionDistance;//[Offset: 0x4, Size: 0x4]
	Vector2D AnticipationMapIn;//[Offset: 0x8, Size: 0x8]
	Vector2D AnticipationMapOut;//[Offset: 0x10, Size: 0x8]
	float AnticipationDistance;//[Offset: 0x18, Size: 0x4]
	AnimSequenceBase* AnticipationAnim;//[Offset: 0x20, Size: 0x8]
	CurveFloat* AnticipationAnimCurve;//[Offset: 0x28, Size: 0x8]
	FloatRange ExecutionZRange;//[Offset: 0x30, Size: 0x10]
	bool bUseAnticipationAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bUseAnimStartForDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	float MinExecutionDOT;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: 0dfc052ba1

--------------------------------
Class: 2a93a2b933
	class DamageType* DamageType;//[Offset: 0x0, Size: 0x8]
	Actor* a42c39f83f;//[Offset: 0x8, Size: 0x20]
	XtrmCharacter* 814fa9113d;//[Offset: 0x28, Size: 0x20]
	byte 3eac75538c;//[Offset: 0x48, Size: 0x1]
	bool 8ba00aba6b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	class Object* 6b2162203d;//[Offset: 0x50, Size: 0x8]
	FName BoneName;//[Offset: 0x58, Size: 0x8]
	XtrmPlayerState* e4c98b62fb;//[Offset: 0x60, Size: 0x20]
	float ActualDamage;//[Offset: 0x80, Size: 0x4]
	bool NeedHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: 52470bc256.1d40237701

--------------------------------
Class: 1d40237701

--------------------------------
Class: 8813c0a987.1d40237701

--------------------------------
Class: XtrmEmoteComponent.ActorComponent.Object
	AkAudioEvent* 4695b67b9a;//[Offset: 0x148, Size: 0x8]
	3beac086b4 312b3e1e3d;//[Offset: 0x208, Size: 0x40]
	AnimMontage* dcf13d992b;//[Offset: 0x260, Size: 0x8]
	<enum,c56c0da91d> 0d2a03bb94;//[Offset: 0x270, Size: 0x50]
	ParticleSystemComponent*[] 5cccd3070f;//[Offset: 0x2f0, Size: 0x10]
	AsyncStaticMeshComponent*[] ebad2efeef;//[Offset: 0x378, Size: 0x10]
	<enum,c56c0da91d> 474c0427c8;//[Offset: 0x388, Size: 0x50]
	bool f9b7c50217;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	void 00f6b5367d();// 0xffffff90c89e5000
	void 6e6ea2c68d(const 3f2c0508d2 InEmotePlaySetData);// 0xffffff90c89e5001
	void 508d1af75a(XtrmCharacter* HostChar, const uint32 InEmoteId);// 0xffffff90c89e5002
	void OnStartParachuting();// 0xffffff90c89e5000
	void OnStartFreefall();// 0xffffff90c89e5000
	void OnRep_IsHost();// 0xffffff90c89e5000
	void OnRep_ConcertData();// 0xffffff90c89e5000
	void OnLandParachute();// 0xffffff90c89e5000
	void df6ec2c472(XtrmCharacter* HostChar, const 3f2c0508d2 InEmotePlaySetData, float ServerPlayAt);// 0xffffff90c89e5003
	void 2eed0addcc();// 0xffffff90c89e5000
	void 91839af2e4(const 3f2c0508d2 InEmotePlaySetData);// 0xffffff90c89e5001

--------------------------------
Class: 3f2c0508d2
	uint32 EmoteId;//[Offset: 0x0, Size: 0x4]
	bool 8dde9f7c18;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: 3beac086b4
	uint32 EmoteId;//[Offset: 0x0, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	uint32[] 1724743d19;//[Offset: 0x8, Size: 0x10]
	XtrmCharacter* 616dcfd29b;//[Offset: 0x18, Size: 0x20]
	float a04011dfba;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: c56c0da91d
	24af47b43d[] 256b123ecf;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 24af47b43d
	Rotator 16eef82e51;//[Offset: 0x0, Size: 0xc]
	StaticMesh* ff820c1198;//[Offset: 0x10, Size: 0x40]
	FName AttachPoint;//[Offset: 0x54, Size: 0x8]
	enum 554bb4f8e1;//[Offset: 0x5c, Size: 0x1]
	Vector LocationOffset;//[Offset: 0x60, Size: 0xc]
	enum a315be17ae;//[Offset: 0x6c, Size: 0x1]
	ParticleSystem* ParticleSystem;//[Offset: 0x70, Size: 0x40]
	AkAudioEvent* SoundAk;//[Offset: 0xb0, Size: 0x40]
	SkeletalMesh* 1c0de1ae73;//[Offset: 0xf0, Size: 0x40]
	bool AttachToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	enum ad0cb256f1;//[Offset: 0x131, Size: 0x1]

--------------------------------
Class: TslViewTargetTempComponent.ActorComponent.Object
	5a825489eb[] a63d9b1f6a;//[Offset: 0x120, Size: 0x10]
	void AddTempComponentWithDelegate(SceneComponent* TempComponent, delegate DelegateToCall);// 0xffffff90c89e5002
	void AddTempComponent(SceneComponent* TempComponent);// 0xffffff90c89e5001

--------------------------------
Class: 5a825489eb
	SceneComponent* 40b6b40b72;//[Offset: 0x0, Size: 0x8]
	SceneComponent* dfeb5a3974;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: XtrmHeadDestructEffect.Actor.Object
	3e76a351da[] f319ab7b54;//[Offset: 0x2e0, Size: 0x10]
	StaticMeshComponent*[] StaticMeshComponents;//[Offset: 0x320, Size: 0x10]

--------------------------------
Class: 3e76a351da
	StaticMesh*[] Meshes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UpdateCameraComponent.ActorComponent.Object

--------------------------------
Class: SkydiveComponent.ActorComponent.Object
	205b5c9db4 f0b8689494;//[Offset: 0x138, Size: 0x30]
	XtrmCharacterMovementComponent* 93572c8f1b;//[Offset: 0x1c0, Size: 0x8]
	float 8ba4b02bd9;//[Offset: 0x1c8, Size: 0x4]
	7db5f8c907 6bcedeaa04;//[Offset: 0x4c0, Size: 0x48]
	float 37685ed6b6;//[Offset: 0x514, Size: 0x4]
	float 0045c07494;//[Offset: 0x518, Size: 0x4]
	float 60e1c75c72;//[Offset: 0x51c, Size: 0x4]
	enum SkydiveState;//[Offset: 0x520, Size: 0x1]
	enum f2060bca8e;//[Offset: 0x521, Size: 0x1]
	bool 610f21acb9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x522, Size: 0x1]
	bool b372d22f91;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x522, Size: 0x1]
	float ParachuteFixedPitch;//[Offset: 0x524, Size: 0x4]
	23700d184e 67002dee7d;//[Offset: 0x55c, Size: 0x1c]
	9d768a7da1 d0e69a81d5;//[Offset: 0x578, Size: 0x14]
	587d3ab400 ea446aa292;//[Offset: 0x58c, Size: 0x20]
	FreefallVelocitySettings FreefallVelocitySettings;//[Offset: 0x5ac, Size: 0xc]
	c2c09a19b6 75cb5ac5f7;//[Offset: 0x5b8, Size: 0x30]
	502a85672f InputSettings;//[Offset: 0x5e8, Size: 0x34]
	8b0b9497e1 8b0b9497e1;//[Offset: 0x620, Size: 0xc0]
	493644f9a1 493644f9a1;//[Offset: 0x6e0, Size: 0x40]
	3329c9bf53 3329c9bf53;//[Offset: 0x720, Size: 0x7c]
	float 1c108190dd;//[Offset: 0x79c, Size: 0x4]
	float c95375ae07;//[Offset: 0x7a0, Size: 0x4]
	445ae7a96c 445ae7a96c;//[Offset: 0x7a4, Size: 0xc]
	64e55acb7a 64e55acb7a;//[Offset: 0x7b0, Size: 0x4c]
	d2398569d9 d2398569d9;//[Offset: 0x7fc, Size: 0x20]
	2469ed839b LandSettings;//[Offset: 0x820, Size: 0x18]
	7487330f75 7487330f75;//[Offset: 0x838, Size: 0x28]
	Vector2D 0bcdcd314e;//[Offset: 0x860, Size: 0x8]
	Vector2D 67db54bcf7;//[Offset: 0x868, Size: 0x8]
	ef1ea0d67d ef1ea0d67d;//[Offset: 0x870, Size: 0x58]
	71f89b03ab 71f89b03ab;//[Offset: 0x8c8, Size: 0x78]
	04e4cbe0f4 DamageSettings;//[Offset: 0x940, Size: 0x40]
	int 0f3ffb305d;//[Offset: 0x980, Size: 0x4]
	int 74c2f8da41;//[Offset: 0x984, Size: 0x4]
	float 8b38a5dce5;//[Offset: 0x988, Size: 0x4]
	float 7b29132727;//[Offset: 0x98c, Size: 0x4]
	int be0f420d2d;//[Offset: 0x990, Size: 0x4]
	float 9f531e3241;//[Offset: 0x994, Size: 0x4]
	float c8fc14c64d;//[Offset: 0x998, Size: 0x4]
	float d07eed18d4;//[Offset: 0x99c, Size: 0x4]
	SkeletalMeshComponent* ParachuteSKReference;//[Offset: 0x9a0, Size: 0x8]
	ParticleSystemComponent* FreefallParticleRef;//[Offset: 0x9a8, Size: 0x8]
	ParticleSystemComponent* ParachuteTrailParticleRef;//[Offset: 0x9b0, Size: 0x8]
	AkComponent* AkComponentRef;//[Offset: 0x9b8, Size: 0x8]
	float 27c193531c;//[Offset: 0x9c0, Size: 0x4]
	59a7d11de8 59a7d11de8;//[Offset: 0x9c4, Size: 0x4]
	class MatineeCameraShake* 819c74b84b;//[Offset: 0x9d0, Size: 0x8]
	AnimMontage* 870df31add;//[Offset: 0x9d8, Size: 0x8]
	float c2b6f242e2;//[Offset: 0xa48, Size: 0x4]
	float 5bf81c2887;//[Offset: 0xa4c, Size: 0x4]
	float 1cca70c338;//[Offset: 0xa50, Size: 0x4]
	Rotator 1bb1994663;//[Offset: 0xa54, Size: 0xc]
	bool 4f596e06e2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 0x1]
	SkinID e570383faa;//[Offset: 0xaa8, Size: 0x4]
	void 437757b8e9(const Rotator ControlRotation);// 0xffffff90c89e5001
	void Server_StopParachuting(bool bToFall, int ClientSimStep, const float InStepAlpha);// 0xffffff90c89e5003
	void 79b6864d3a(enum InSkydiveState);// 0xffffff90c89e5001
	void 027a73d98f(enum InState);// 0xffffff90c89e5001
	void Server_SetAnimationInput(float InNewForward, float InNewRight, float InNewHeading);// 0xffffff90c89e5003
	void Server_RequestParachuteOpen();// 0xffffff90c89e5000
	void 7a0b3babba(const 7db5f8c907 InputStep);// 0xffffff90c89e5001
	void 6bf98aea83();// 0xffffff90c89e5000
	void Server_LimitHorzMoves(bool bInLimitHorzMoves);// 0xffffff90c89e5001
	void OnSpectatingChanged(bool bIsSpectating);// 0xffffff90c89e5001
	void OnRep_SkydiveState();// 0xffffff90c89e5000
	void OnRep_ReplicatedSkinID();// 0xffffff90c89e5000
	void OnRep_RemoteSimStepChanged();// 0xffffff90c89e5000
	void OnRep_ParachuteSkinChanged();// 0xffffff90c89e5000
	void OnRep_ParachuteReleased();// 0xffffff90c89e5000
	void OnRep_FollowTargetInputRight();// 0xffffff90c89e5000
	void OnRep_FollowTargetInputForward();// 0xffffff90c89e5000
	void OnRep_FollowTargetHeading();// 0xffffff90c89e5000
	void OnRep_FollowTargetControlRotation();// 0xffffff90c89e5000
	void OnRep_CutoffChanged();// 0xffffff90c89e5000
	void OnManualCutOffComplete();// 0xffffff90c89e5000
	void 5ccdcd03bc(int LandDataIdx);// 0xffffff90c89e5001
	void f349185e8c(const 205b5c9db4 InLandingData);// 0xffffff90c89e5001
	void 352ca1b2f5();// 0xffffff90c89e5000
	bool IsParachuteReleased();// 0xffffff90c89e5001
	void ForceMeshRotationResetStep();// 0xffffff90c89e5000
	void Demo_SetRightInput(float InNewRight);// 0xffffff90c89e5001
	void Demo_SetRemoteState(out const 7db5f8c907 SimStep);// 0xffffff90c89e5001
	void Demo_SetPlayerHeading(float InNewHeading);// 0xffffff90c89e5001
	void Demo_SetForwardInput(float InNewForward);// 0xffffff90c89e5001
	void DelayedStopParachuting();// 0xffffff90c89e5000
	void Client_ReceiveServerCorrection(const 7db5f8c907 CorrectionStep, int ActualServerStep);// 0xffffff90c89e5002
	void 8e11749e74(const 7db5f8c907 CorrectionStep);// 0xffffff90c89e5001
	void 3a5332f18d();// 0xffffff90c89e5000
	void 12bc3786e6(const Vector InLocation, const Vector InPrevLocation, const int InStep);// 0xffffff90c89e5003
	void 7b6d0dea2d(const Vector InPosition, FString inString, const Color InColor, const float InTime, const float InSize);// 0xffffff90c89e5005
	void 2c40a2cf35(const Vector InPosition, const Rotator InRotation);// 0xffffff90c89e5002
	void b236712341(const Vector InStart, const Vector InEnd, const Color InColor, const float InDuration);// 0xffffff90c89e5004

--------------------------------
Class: 7db5f8c907
	Vector_NetQuantize10 Velocity;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	uint16 9b808bec32;//[Offset: 0x18, Size: 0x2]
	Vector_NetQuantize10 Position;//[Offset: 0x1c, Size: 0xc]
	9c084461f6 InputData;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: 9c084461f6
	float 11fff6356a;//[Offset: 0x0, Size: 0x4]
	float 6f92e1f3a6;//[Offset: 0x4, Size: 0x4]
	float 7eac402984;//[Offset: 0x8, Size: 0x4]
	float a3ba04ee59;//[Offset: 0xc, Size: 0x4]
	bool 2135f4ef9a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float 3f41bc6723;//[Offset: 0x14, Size: 0x4]
	float CurrentRoll;//[Offset: 0x18, Size: 0x4]
	float CurrentPitch;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: 205b5c9db4
	bool 271ebe1091;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum cbe2c5fced;//[Offset: 0x1, Size: 0x1]
	AnimMontage* de27ef673c;//[Offset: 0x8, Size: 0x8]
	AnimMontage* a62831011f;//[Offset: 0x10, Size: 0x8]
	AnimMontage* 04b117a12f;//[Offset: 0x18, Size: 0x8]
	float 576850f65c;//[Offset: 0x20, Size: 0x4]
	FName cd04be0dcd;//[Offset: 0x24, Size: 0x8]
	float 0094163be4;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: XtrmCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	a85f62c6b1 e963d56e31;//[Offset: 0xcb0, Size: 0x750]
	float StayingUnderWaterDepthBand;//[Offset: 0x140c, Size: 0x4]
	Vector2D MaxVaultDistanceByVelocityOutMap;//[Offset: 0x1418, Size: 0x8]
	float BrakingDecelerationUnderwaterSwimming;//[Offset: 0x1428, Size: 0x4]
	VaultingSettings* VaultingSettings;//[Offset: 0x1430, Size: 0x8]
	float WalkSpeedModifierUnit;//[Offset: 0x1454, Size: 0x4]
	float WaveRidingModifier;//[Offset: 0x146c, Size: 0x4]
	d689d194af* d689d194af;//[Offset: 0x1478, Size: 0x8]
	float AnimMultiplierPostApex;//[Offset: 0x149c, Size: 0x4]
	float RecoveryWalkSpeedRatePerSec;//[Offset: 0x14a0, Size: 0x4]
	float MaxZSpeedOutOfWaterModifier;//[Offset: 0x14e4, Size: 0x4]
	Vector 50700d7ef1;//[Offset: 0x14f0, Size: 0xc]
	float WaveRidingSmoothingFactor;//[Offset: 0x14fc, Size: 0x4]
	float MaxGroggySpeed;//[Offset: 0x1500, Size: 0x4]
	float AnimMultiplierPreApex;//[Offset: 0x1510, Size: 0x4]
	int SizeForSlide;//[Offset: 0x152c, Size: 0x4]
	float MinWalkSpeedModifier;//[Offset: 0x1538, Size: 0x4]
	class DamageType* e2d26e467f;//[Offset: 0x1550, Size: 0x8]
	Rotator MaxSwimmingRotationRate;//[Offset: 0x1584, Size: 0xc]
	float LastVaultTime;//[Offset: 0x1594, Size: 0x4]
	float MaxUnderwaterSwimSpeed;//[Offset: 0x15a8, Size: 0x4]
	float VaultCancelDTScalar;//[Offset: 0x15ac, Size: 0x4]
	bool 19235a3e07;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b0, Size: 0x1]
	a9e0e1d115 CurrentVaultingTask;//[Offset: 0x15b8, Size: 0x84]
	float PronedHalfHeight;//[Offset: 0x1654, Size: 0x4]
	float PronedRadius;//[Offset: 0x1668, Size: 0x4]
	float SpeedInWaterModifier;//[Offset: 0x1670, Size: 0x4]
	float WaveRidingModifierUnderWater;//[Offset: 0x1674, Size: 0x4]
	Rotator UnderwaterSwimmingRotationAcceleration;//[Offset: 0x1678, Size: 0xc]
	Vector CharacterRelLocation;//[Offset: 0x1684, Size: 0xc]
	float MaxUnderwaterSwimAcceleration;//[Offset: 0x1694, Size: 0x4]
	Vector AveragedVelocity;//[Offset: 0x16a0, Size: 0xc]
	Vector2D 8919a8b942;//[Offset: 0x16b4, Size: 0x8]
	Vector2D fc5e0fec33;//[Offset: 0x16bc, Size: 0x8]
	Vector2D 5983351986;//[Offset: 0x16c4, Size: 0x8]
	Vector2D e815fc9d72;//[Offset: 0x16cc, Size: 0x8]
	float V_Timer_CP;//[Offset: 0x16f0, Size: 0x4]
	Vector 71503120dd;//[Offset: 0x16f8, Size: 0xc]
	bool bIsVaulting_CP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1708, Size: 0x1]
	float MaxSwimAcceleration;//[Offset: 0x170c, Size: 0x4]
	CurveFloat* 12afa18952;//[Offset: 0x1728, Size: 0x8]
	float SizeForNarrow;//[Offset: 0x1730, Size: 0x4]
	Vector LastVaultLocation;//[Offset: 0x184c, Size: 0xc]
	Rotator MaxUnderwaterSwimmingRotationRate;//[Offset: 0x185c, Size: 0xc]
	float LandingJumpDecreaseModifier;//[Offset: 0x1868, Size: 0x4]
	Rotator SwimmingRotationAcceleration;//[Offset: 0x1878, Size: 0xc]
	bool bWantsToCancelVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1894, Size: 0x1]
	float VaultCancelAnimSpeed;//[Offset: 0x1898, Size: 0x4]
	float MaxProneSpeed;//[Offset: 0x189c, Size: 0x4]
	float ProneAlignementThreshold;//[Offset: 0x18a0, Size: 0x4]
	Vector2D MaxVaultDistanceByVelocityInMap;//[Offset: 0x18a4, Size: 0x8]
	float MaxJumpZVelocity;//[Offset: 0x18ac, Size: 0x4]
	float JumpVelocityLossScale;//[Offset: 0x18e8, Size: 0x4]
	909a45ab89* CurrentVaultingData;//[Offset: 0x18f0, Size: 0x8]
	void 57e950fbf4(const Vector RotationVelocity);// 0xffffff90c89e5001
	void SetProneWalkableFloorAngle(float InWalkableFloorAngle);// 0xffffff90c89e5001
	float GetVTimer();// 0xffffff90c89e5001
	enum GetCurrentVaultType();// 0xffffff90c89e5001
	bool EndCurrentTaskToFall();// 0xffffff90c89e5001

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxCustomMovementSpeed;//[Offset: 0x1c4, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x1c8, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x298, Size: 0x4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x2a0, Size: 0x4]
	float df6a2dcee8;//[Offset: 0x2a4, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x2ac, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x2b4, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x3ac, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x3bc, Size: 0x4]
	float BrakingFriction;//[Offset: 0x3c0, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x3c4, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x3c8, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x3cc, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x3d0, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x3dc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x3e0, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x4b8, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x4c0, Size: 0x4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c4, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c4, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c4, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c4, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c4, Size: 0x1]
	bool 0d0f471296;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c4, Size: 0x1]
	bool 0491cd4c97;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c4, Size: 0x1]
	bool 6fd9c18e39;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c5, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c5, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c5, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c5, Size: 0x1]
	bool 9ecbc4fefe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c5, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c5, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c5, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c6, Size: 0x1]
	bool 982c390410;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c6, Size: 0x1]
	bool 86013a31bf;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c6, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c6, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c6, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c6, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c7, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c7, Size: 0x1]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x4d4, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x4dc, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x4e0, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x4e8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x4f8, Size: 0x4]
	byte GroundMovementMode;//[Offset: 0x4fc, Size: 0x1]
	SceneComponent* 4d06d6810a;//[Offset: 0x500, Size: 0x8]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x508, Size: 0x38]
	float NavMeshProjectionInterval;//[Offset: 0x54c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x620, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x638, Size: 0x4]
	float GravityScale;//[Offset: 0x63c, Size: 0x4]
	float d49684b809;//[Offset: 0x640, Size: 0x4]
	33a6fe1a64 GroupsToAvoid;//[Offset: 0x648, Size: 0x4]
	byte DefaultWaterMovementMode;//[Offset: 0x64c, Size: 0x1]
	Vector a53a17752e;//[Offset: 0x650, Size: 0xc]
	float MaxAcceleration;//[Offset: 0x670, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x68c, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x690, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x694, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x698, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x69c, Size: 0x4]
	enum NetworkSmoothingMode;//[Offset: 0x6ac, Size: 0x1]
	float MaxStepHeight;//[Offset: 0x6b0, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x6c0, Size: 0x4]
	int AvoidanceUID;//[Offset: 0x730, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x734, Size: 0x4]
	float AirControl;//[Offset: 0x73c, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x740, Size: 0x4]
	float AvoidanceConsiderationRadius;//[Offset: 0x744, Size: 0x4]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x748, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x748, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x748, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x748, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x748, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x748, Size: 0x1]
	bool 399afcdf50;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x748, Size: 0x1]
	bool 92c9f96378;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x748, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x749, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x749, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x749, Size: 0x1]
	bool 9130b6f6a7;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x749, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x749, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x749, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x749, Size: 0x1]
	bool f936e16d5a;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x749, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74a, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74a, Size: 0x1]
	bool 23232bf689;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74a, Size: 0x1]
	bool d6e265e619;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74a, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x74a, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x74a, Size: 0x1]
	bool a334491427;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x74a, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74b, Size: 0x1]
	bool 24173e0b1a;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74b, Size: 0x1]
	bool 2d53a86b12;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74b, Size: 0x1]
	bool e213b32803;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74b, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x74b, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x74b, Size: 0x1]
	Vector c64ac8388a;//[Offset: 0x74c, Size: 0xc]
	d57e5289a1 1b891b3e62;//[Offset: 0x758, Size: 0x30]
	float PerchAdditionalHeight;//[Offset: 0x788, Size: 0x4]
	float GroundFriction;//[Offset: 0x78c, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x790, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x7b0, Size: 0xc]
	float MaxFlySpeed;//[Offset: 0x7dc, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x7e4, Size: 0x4]
	float RepulsionForce;//[Offset: 0x7e8, Size: 0x4]
	float Buoyancy;//[Offset: 0x804, Size: 0x4]
	byte DefaultLandMovementMode;//[Offset: 0x810, Size: 0x1]
	float PushForcePointZOffsetFactor;//[Offset: 0x814, Size: 0x4]
	3af8176a5e CurrentFloor;//[Offset: 0x830, Size: 0xe0]
	float 3e77041fbd;//[Offset: 0x910, Size: 0x4]
	float PushForceFactor;//[Offset: 0x920, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x924, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x928, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0xa00, Size: 0x4]
	byte CustomMovementMode;//[Offset: 0xa04, Size: 0x1]
	float MinTouchForce;//[Offset: 0xa08, Size: 0x4]
	63b106e4a8 df8692b2f9;//[Offset: 0xa10, Size: 0x40]
	byte MovementMode;//[Offset: 0xae0, Size: 0x1]
	float 6f64e15bca;//[Offset: 0xae4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0xae8, Size: 0x4]
	33a6fe1a64 AvoidanceGroup;//[Offset: 0xaec, Size: 0x4]
	33a6fe1a64 GroupsToIgnore;//[Offset: 0xaf4, Size: 0x4]
	RootMotionSourceGroup d45383f786;//[Offset: 0xaf8, Size: 0x38]
	float StandingDownwardForceScale;//[Offset: 0xb30, Size: 0x4]
	float Mass;//[Offset: 0xc88, Size: 0x4]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0xffffff90c89e5001
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0xffffff90c89e5001
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0xffffff90c89e5002
	void SetGroupsToIgnoreMask(out const 33a6fe1a64 GroupMask);// 0xffffff90c89e5001
	void SetGroupsToIgnore(int GroupFlags);// 0xffffff90c89e5001
	void SetGroupsToAvoidMask(out const 33a6fe1a64 GroupMask);// 0xffffff90c89e5001
	void SetGroupsToAvoid(int GroupFlags);// 0xffffff90c89e5001
	void SetAvoidanceGroupMask(out const 33a6fe1a64 GroupMask);// 0xffffff90c89e5001
	void SetAvoidanceGroup(int GroupFlags);// 0xffffff90c89e5001
	void SetAvoidanceEnabled(bool bEnable);// 0xffffff90c89e5001
	float K2_GetWalkableFloorZ();// 0xffffff90c89e5001
	float K2_GetWalkableFloorAngle();// 0xffffff90c89e5001
	float K2_GetModifiedMaxAcceleration();// 0xffffff90c89e5001
	void K2_FindFloor(Vector CapsuleLocation, out 3af8176a5e FloorResult);// 0xffffff90c89e5002
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out 3af8176a5e FloorResult);// 0xffffff90c89e5005
	bool IsWalking();// 0xffffff90c89e5001
	bool IsWalkable(out const HitResult Hit);// 0xffffff90c89e5002
	float GetValidPerchRadius();// 0xffffff90c89e5001
	float GetPerchRadiusThreshold();// 0xffffff90c89e5001
	PrimitiveComponent* GetMovementBase();// 0xffffff90c89e5001
	float GetMinAnalogSpeed();// 0xffffff90c89e5001
	float GetMaxJumpHeightWithJumpTime();// 0xffffff90c89e5001
	float GetMaxJumpHeight();// 0xffffff90c89e5001
	float GetMaxBrakingDeceleration();// 0xffffff90c89e5001
	float GetMaxAcceleration();// 0xffffff90c89e5001
	Vector GetLastUpdateVelocity();// 0xffffff90c89e5001
	Rotator GetLastUpdateRotation();// 0xffffff90c89e5001
	Vector GetLastUpdateLocation();// 0xffffff90c89e5001
	Vector GetImpartedMovementBaseVelocity();// 0xffffff90c89e5001
	Vector GetCurrentAcceleration();// 0xffffff90c89e5001
	Character* GetCharacterOwner();// 0xffffff90c89e5001
	float GetAnalogInputModifier();// 0xffffff90c89e5001
	void DisableMovement();// 0xffffff90c89e5000
	void ClearAccumulatedForces();// 0xffffff90c89e5000
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xffffff90c89e5006
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0xffffff90c89e5004
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0xffffff90c89e5002
	void AddForce(Vector Force);// 0xffffff90c89e5001

--------------------------------
Class: a85f62c6b1
	9675120c27 16d62dcbd0;//[Offset: 0x0, Size: 0x700]

--------------------------------
Class: 9675120c27
	Vector ApexAdditive;//[Offset: 0x0, Size: 0xc]
	int MoveIndex;//[Offset: 0xc, Size: 0x4]
	float PlayerSpeed2D;//[Offset: 0x10, Size: 0x4]
	enum VaultType;//[Offset: 0x14, Size: 0x1]
	c94998ef10 ExecConfig;//[Offset: 0x18, Size: 0x68]
	float DistanceFromObject;//[Offset: 0x80, Size: 0x4]
	Vector End;//[Offset: 0x84, Size: 0xc]
	float Direction;//[Offset: 0x90, Size: 0x4]
	float AdditiveEndZOffset;//[Offset: 0x94, Size: 0x4]
	Vector Apex;//[Offset: 0x98, Size: 0xc]
	bool bIsPassed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	bool bIsClimbing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 0x1]
	bool bIsEndToFall;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 0x1]
	Vector Start;//[Offset: 0xa8, Size: 0xc]
	f0f5feee9b HitData;//[Offset: 0xb4, Size: 0x648]

--------------------------------
Class: f0f5feee9b

--------------------------------
Class: 33a6fe1a64
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: 3af8176a5e
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0xd4]

--------------------------------
Class: d57e5289a1.7a1a2c8098

--------------------------------
Class: VaultingSettings.DataAsset.Object
	int ClimbFinderMaxSteps_Vault;//[Offset: 0x70, Size: 0x4]
	909a45ab89*[] 093273cbd7;//[Offset: 0x78, Size: 0x10]
	int ClimbFinderMaxSteps_LedgeGrab;//[Offset: 0x88, Size: 0x4]
	float GlobalVaultSpeedScale;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: d689d194af.DataAsset.Object
	496b09cf6e 496b09cf6e;//[Offset: 0x70, Size: 0x60]
	RollingAudioData RollingAudioData;//[Offset: 0xd0, Size: 0x30]

--------------------------------
Class: 496b09cf6e
	float decd523280;//[Offset: 0x0, Size: 0x4]
	e357cbe7bf[] 92cf10e093;//[Offset: 0x8, Size: 0x10]
	float 6802d29d4d;//[Offset: 0x18, Size: 0x4]
	e751f4e224[] 701f4c133c;//[Offset: 0x20, Size: 0x10]
	float RollingPlayRate;//[Offset: 0x30, Size: 0x4]
	e751f4e224[] 6305b474d1;//[Offset: 0x38, Size: 0x10]
	float f07129e834;//[Offset: 0x48, Size: 0x4]
	e751f4e224[] 570594fbf3;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: e357cbe7bf
	enum Type;//[Offset: 0x0, Size: 0x1]
	float To;//[Offset: 0x4, Size: 0x4]
	float From;//[Offset: 0x8, Size: 0x4]
	float BoostConsumptionAmount;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: e751f4e224
	float MontageApplyRate;//[Offset: 0x0, Size: 0x4]
	c835d7a808* 2705bdff47;//[Offset: 0x8, Size: 0x8]
	AnimMontage* AnimMontage;//[Offset: 0x10, Size: 0x8]
	enum b1a39b57d8;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: RollingAudioData
	RollingAudioConfig[] SlowRollingAudioConfigs;//[Offset: 0x0, Size: 0x10]
	RollingAudioConfig[] FastRollingAudioConfigs;//[Offset: 0x10, Size: 0x10]
	RollingAudioConfig[] NormalRollingAudioConfigs;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: RollingAudioConfig
	AnimSequenceBase* RollingAnimSequence;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: 23700d184e
	bool 18e2e15e1a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float f9ab384a2b;//[Offset: 0x4, Size: 0x4]
	float 9378b7b091;//[Offset: 0x8, Size: 0x4]
	float c75a0cbcc4;//[Offset: 0xc, Size: 0x4]
	float b6c2bc43f5;//[Offset: 0x10, Size: 0x4]
	bool 70695c8a2f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float 77b86d3809;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: 9d768a7da1
	float 3a0919b015;//[Offset: 0x0, Size: 0x4]
	float DragScale;//[Offset: 0x4, Size: 0x4]
	float c6b4446e81;//[Offset: 0x8, Size: 0x4]
	float 9f7a30a592;//[Offset: 0xc, Size: 0x4]
	float 1ebcaa931f;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: 587d3ab400
	float d62cf9fb21;//[Offset: 0x0, Size: 0x4]
	Vector2D fbd16b780b;//[Offset: 0x4, Size: 0x8]
	Vector2D ecdc1e844f;//[Offset: 0xc, Size: 0x8]
	float 6c2454a3bc;//[Offset: 0x14, Size: 0x4]
	Vector2D 280ba3aacd;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: FreefallVelocitySettings
	float 6017df8f51;//[Offset: 0x0, Size: 0x4]
	float 59437f8d5d;//[Offset: 0x4, Size: 0x4]
	float SpeedMax;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: c2c09a19b6
	Vector2D 98b7ffd1ce;//[Offset: 0x0, Size: 0x8]
	Vector2D 9443c5959f;//[Offset: 0x8, Size: 0x8]
	Vector2D 49b7d7931f;//[Offset: 0x10, Size: 0x8]
	float 6399f066ab;//[Offset: 0x18, Size: 0x4]
	Vector2D 8637801080;//[Offset: 0x1c, Size: 0x8]
	Vector2D 87601fcd96;//[Offset: 0x24, Size: 0x8]
	float b1ddcdee99;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: 502a85672f
	float cc7630e1f4;//[Offset: 0x0, Size: 0x4]
	float 385d19c15f;//[Offset: 0x4, Size: 0x4]
	float 4de6593911;//[Offset: 0x8, Size: 0x4]
	float 85e57b7702;//[Offset: 0xc, Size: 0x4]
	bool 32d024d0d0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float 3a4dd8601b;//[Offset: 0x14, Size: 0x4]
	float b96b46b93c;//[Offset: 0x18, Size: 0x4]
	float 3b25eb6f10;//[Offset: 0x1c, Size: 0x4]
	bool fffd67997c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float 687e56fabc;//[Offset: 0x24, Size: 0x4]
	bool 9f1fd7dea9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float 5e58e54230;//[Offset: 0x2c, Size: 0x4]
	bool 754698db74;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: 8b0b9497e1
	float 3ad32574d0;//[Offset: 0x0, Size: 0x4]
	Vector 116b847ccc;//[Offset: 0x4, Size: 0xc]
	Rotator 2f61789d45;//[Offset: 0x10, Size: 0xc]
	float aa93f1844a;//[Offset: 0x1c, Size: 0x4]
	class AnimInstance* 4f2f50a2e7;//[Offset: 0x20, Size: 0x8]
	<enum,f2dd9341ea> 53e0841f4d;//[Offset: 0x28, Size: 0x50]
	float afcc427ebb;//[Offset: 0x78, Size: 0x4]
	float 774646f580;//[Offset: 0x7c, Size: 0x4]
	float 04d9618baa;//[Offset: 0x80, Size: 0x4]
	SkeletalMesh* 1071172c1e;//[Offset: 0x88, Size: 0x8]
	float 9c2e04ea8a;//[Offset: 0x90, Size: 0x4]
	float 5902e1ecfd;//[Offset: 0x94, Size: 0x4]
	Vector 3347956f3b;//[Offset: 0x98, Size: 0xc]
	float 82e5a90f5f;//[Offset: 0xa4, Size: 0x4]
	float f160ab2910;//[Offset: 0xa8, Size: 0x4]
	float e9a2cd6f7f;//[Offset: 0xac, Size: 0x4]
	float 86e606d245;//[Offset: 0xb0, Size: 0x4]
	int a7880c60a1;//[Offset: 0xb4, Size: 0x4]
	PhysicsAsset* 26ab1fc39a;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: f2dd9341ea
	float 3918520716;//[Offset: 0x0, Size: 0x4]
	float BlendInTime;//[Offset: 0x4, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	byte BlendFunction;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: 493644f9a1
	float 173a5ef2a3;//[Offset: 0x0, Size: 0x4]
	float 0cf9afaa1b;//[Offset: 0x4, Size: 0x4]
	float 3e9709d0dc;//[Offset: 0x8, Size: 0x4]
	Vector2D 4b2440fe23;//[Offset: 0xc, Size: 0x8]
	Vector2D 2742d7fc25;//[Offset: 0x14, Size: 0x8]
	float 8ec9592309;//[Offset: 0x1c, Size: 0x4]
	float ee04a757eb;//[Offset: 0x20, Size: 0x4]
	float ffde34f746;//[Offset: 0x24, Size: 0x4]
	float 5a4150b3b2;//[Offset: 0x28, Size: 0x4]
	float 8f88055fbb;//[Offset: 0x2c, Size: 0x4]
	float bea94d31bf;//[Offset: 0x30, Size: 0x4]
	float b08dc0fbb5;//[Offset: 0x34, Size: 0x4]
	float 860890ede5;//[Offset: 0x38, Size: 0x4]
	float 45eaadc619;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: 3329c9bf53
	float da6cae9614;//[Offset: 0x0, Size: 0x4]
	float cf1e3dba82;//[Offset: 0x4, Size: 0x4]
	float ac1277bf73;//[Offset: 0x8, Size: 0x4]
	float 71d4f0ede3;//[Offset: 0xc, Size: 0x4]
	float 8a9c9b9bff;//[Offset: 0x10, Size: 0x4]
	float a66254ce81;//[Offset: 0x14, Size: 0x4]
	float da87759cde;//[Offset: 0x18, Size: 0x4]
	float a886306d9c;//[Offset: 0x1c, Size: 0x4]
	float a9f64d9d8d;//[Offset: 0x20, Size: 0x4]
	float 835b8d935a;//[Offset: 0x24, Size: 0x4]
	float b492825b01;//[Offset: 0x28, Size: 0x4]
	float 2686c9a89c;//[Offset: 0x2c, Size: 0x4]
	Vector2D 34c4b97af4;//[Offset: 0x30, Size: 0x8]
	Vector2D 59011baa41;//[Offset: 0x38, Size: 0x8]
	float e61abc4bde;//[Offset: 0x40, Size: 0x4]
	float 83e2e9cd4f;//[Offset: 0x44, Size: 0x4]
	float 310d234c18;//[Offset: 0x48, Size: 0x4]
	float 7263a1d647;//[Offset: 0x4c, Size: 0x4]
	float 16fac2ddc0;//[Offset: 0x50, Size: 0x4]
	float 696c29beb5;//[Offset: 0x54, Size: 0x4]
	float 252d419566;//[Offset: 0x58, Size: 0x4]
	float 5e00d848e7;//[Offset: 0x5c, Size: 0x4]
	float 3288d01c6a;//[Offset: 0x60, Size: 0x4]
	float f383deb841;//[Offset: 0x64, Size: 0x4]
	float 8f4ac47b82;//[Offset: 0x68, Size: 0x4]
	Vector2D 021fe3c7c1;//[Offset: 0x6c, Size: 0x8]
	Vector2D 4ae3da5ab4;//[Offset: 0x74, Size: 0x8]

--------------------------------
Class: 445ae7a96c
	float 09cbaa78b8;//[Offset: 0x0, Size: 0x4]
	bool 2d614a48f9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool 2cd37926b4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	float c5b82f77fd;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 64e55acb7a
	float df943aa47c;//[Offset: 0x0, Size: 0x4]
	bool 77f738cb1b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Vector 5a167a3f34;//[Offset: 0x8, Size: 0xc]
	float 4efc8d4262;//[Offset: 0x14, Size: 0x4]
	float f47a70bde0;//[Offset: 0x18, Size: 0x4]
	float 6214ebc772;//[Offset: 0x1c, Size: 0x4]
	float bfd30d6786;//[Offset: 0x20, Size: 0x4]
	Vector a78412686f;//[Offset: 0x24, Size: 0xc]
	bool 50840f5438;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool 104b01f84a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float 57b9c1d8ed;//[Offset: 0x34, Size: 0x4]
	float e5d02610a5;//[Offset: 0x38, Size: 0x4]
	float 7bd94d9e8c;//[Offset: 0x3c, Size: 0x4]
	float 308d3c791b;//[Offset: 0x40, Size: 0x4]
	float 3a01c99c92;//[Offset: 0x44, Size: 0x4]
	bool 390fc1884b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: d2398569d9
	Vector LocalOffset;//[Offset: 0x0, Size: 0xc]
	662efb3e58 CollisionShape;//[Offset: 0xc, Size: 0x14]

--------------------------------
Class: 662efb3e58
	bool ec1f8bac25;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Radius;//[Offset: 0x4, Size: 0x4]
	Vector Extent;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: 2469ed839b
	AnimMontage* 8502027b16;//[Offset: 0x0, Size: 0x8]
	205b5c9db4[] dc043b5093;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 7487330f75
	float afc5d6a1b6;//[Offset: 0x0, Size: 0x4]
	float 9732dd58aa;//[Offset: 0x4, Size: 0x4]
	float 7c4204102b;//[Offset: 0x8, Size: 0x4]
	Vector2D cbab5b34bd;//[Offset: 0xc, Size: 0x8]
	Vector2D 2738e1ae71;//[Offset: 0x14, Size: 0x8]
	float aa98cee3a3;//[Offset: 0x1c, Size: 0x4]
	float 55e9397bf0;//[Offset: 0x20, Size: 0x4]
	float b39b63d248;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ef1ea0d67d
	ParticleSystem* 65c3317172;//[Offset: 0x0, Size: 0x8]
	class MatineeCameraShake* bc3dc36903;//[Offset: 0x8, Size: 0x8]
	Vector2D d639ebf9b3;//[Offset: 0x10, Size: 0x8]
	Vector2D 3f8cbb3c5c;//[Offset: 0x18, Size: 0x8]
	Vector2D 14d166c755;//[Offset: 0x20, Size: 0x8]
	Vector2D 7cfca005d3;//[Offset: 0x28, Size: 0x8]
	Vector2D f9c03dce61;//[Offset: 0x30, Size: 0x8]
	Vector2D 9c7167e319;//[Offset: 0x38, Size: 0x8]
	ParticleSystem* 3bc385d5c4;//[Offset: 0x40, Size: 0x8]
	c835d7a808* b1fb6cdc3a;//[Offset: 0x48, Size: 0x8]
	class MatineeCameraShake* d7b5532bda;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: 71f89b03ab
	AkAudioEvent* 7a03cb7802;//[Offset: 0x0, Size: 0x8]
	float 546fa4a165;//[Offset: 0x8, Size: 0x4]
	float 53f2484cc8;//[Offset: 0xc, Size: 0x4]
	AkAudioEvent* ec10cb64ea;//[Offset: 0x10, Size: 0x8]
	FName 10f20784f3;//[Offset: 0x18, Size: 0x8]
	FName a24d909f77;//[Offset: 0x20, Size: 0x8]
	FName a2fe39c03d;//[Offset: 0x28, Size: 0x8]
	FName 44ad207acc;//[Offset: 0x30, Size: 0x8]
	FName 6458e399b9;//[Offset: 0x38, Size: 0x8]
	FName c0ace20674;//[Offset: 0x40, Size: 0x8]
	FName db40423992;//[Offset: 0x48, Size: 0x8]
	float 1d136ddb68;//[Offset: 0x50, Size: 0x4]
	float 88fb89b442;//[Offset: 0x54, Size: 0x4]
	float af63c8e8b4;//[Offset: 0x58, Size: 0x4]
	float a1382e27db;//[Offset: 0x5c, Size: 0x4]
	float 6985550ca3;//[Offset: 0x60, Size: 0x4]
	AkAudioEvent* b68222f5f0;//[Offset: 0x68, Size: 0x8]
	float f5a0279e3f;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: 04e4cbe0f4
	bool 1492cdd255;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D a35378bc0c;//[Offset: 0x4, Size: 0x8]
	Vector2D 7d75042afd;//[Offset: 0xc, Size: 0x8]
	Vector2D 773562e254;//[Offset: 0x14, Size: 0x8]
	Vector2D 0c3d371a13;//[Offset: 0x1c, Size: 0x8]
	Vector2D 99f7887b0e;//[Offset: 0x24, Size: 0x8]
	Vector2D 4020a88754;//[Offset: 0x2c, Size: 0x8]
	class DamageType* DamageType;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: 59a7d11de8
	float 2fb762cf30;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BuffWithBoostGauge
	class XtrmBuff* Buff;//[Offset: 0x0, Size: 0x8]
	float BoostGauge;//[Offset: 0x8, Size: 0x4]
	FName OverlapId;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: XtrmBuff.Actor.Object
	FName OverlapId;//[Offset: 0x2a8, Size: 0x8]
	Vector 782d45ea27;//[Offset: 0x2e8, Size: 0xc]
	float f3edd7b25c;//[Offset: 0x2f4, Size: 0x4]
	float aefc9a38f2;//[Offset: 0x300, Size: 0x4]
	enum daeca51e73;//[Offset: 0x304, Size: 0x1]
	bool c54178b822;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	float cdfabf6c85;//[Offset: 0x308, Size: 0x4]
	FName bcd1801e2e;//[Offset: 0x30c, Size: 0x8]
	bool 25bb53a7a4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool 4c18db8677;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	bool c4c6157ccc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 0x1]
	void TickBuff();// 0xffffff90c89e5000

--------------------------------
Class: f02d4d992a.DataAsset.Object
	261d14da8f e78d17f7dd;//[Offset: 0xa0, Size: 0xb8]

--------------------------------
Class: 261d14da8f
	enum DamageReason;//[Offset: 0x0, Size: 0x1]
	float 924b39af2b;//[Offset: 0x4, Size: 0x4]
	enum b30578c7d8;//[Offset: 0x8, Size: 0x1]
	<enum,float> 24ade056a7;//[Offset: 0x10, Size: 0x50]
	<FName,float> ce2bf60d6b;//[Offset: 0x60, Size: 0x50]
	float 76669278e0;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: EquippedEmoteInfo
	uint32 f9d7860d31;//[Offset: 0x0, Size: 0x4]
	byte SlotNum;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: 13285a8dd9
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	<int,float> 5902283ecf;//[Offset: 0x8, Size: 0x50]
	<enum,9d277a8b2a> 40585d0a45;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: 9d277a8b2a.fa72ce9067

--------------------------------
Class: AimAssistantComponent.ActorComponent.Object
	float SimpleTargetReachDistance2D;//[Offset: 0x130, Size: 0x4]
	FName[] AimPoints_Priority3;//[Offset: 0x200, Size: 0x10]
	FName[] AimPoints_Priority1;//[Offset: 0x210, Size: 0x10]
	float AimAssistDuration;//[Offset: 0x238, Size: 0x4]
	float SimpleTargetReachDistance3D;//[Offset: 0x240, Size: 0x4]
	FName[] AimPoints_Priority2;//[Offset: 0x258, Size: 0x10]
	float FindTargetInvertal;//[Offset: 0x26c, Size: 0x4]
	float AimAssistPointRescanInvertal;//[Offset: 0x304, Size: 0x4]
	FName[] AimPoints_Priority0;//[Offset: 0x310, Size: 0x10]
	void OnWeaponUnArm(enum UnEquipSlot);// 0xffffff90c89e5001
	void OnWeaponFire();// 0xffffff90c89e5000
	void OnWeaponArm(enum EquipSlot);// 0xffffff90c89e5001
	void OnReleaseFire();// 0xffffff90c89e5000
	void OnPressFire(bool bManualPress);// 0xffffff90c89e5001

--------------------------------
Class: VehicleSkinInfoRep
	Color HeadlightColor;//[Offset: 0x0, Size: 0x4]
	uint32 VehicleColorID;//[Offset: 0x4, Size: 0x4]
	uint32 VehicleSkinID;//[Offset: 0x8, Size: 0x4]
	uint32 CurrentUpdateLevel;//[Offset: 0xc, Size: 0x4]
	uint32[] VehicleEffectIDs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ReplicatedCarryState
	XtrmCharacter* Target;//[Offset: 0x0, Size: 0x8]
	enum State;//[Offset: 0x8, Size: 0x1]
	XtrmCharacter* Parent;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CharacterCustomizeComponent.ActorComponent.Object
	CharacterMeshComponent* CharacterMeshComponent;//[Offset: 0x120, Size: 0x8]
	e1c1c567eb* dbcd09c63c;//[Offset: 0x2b8, Size: 0x8]

--------------------------------
Class: CharacterMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	<enum,45dee49130> c7d2b59871;//[Offset: 0x1170, Size: 0x50]
	<FName,MeshComponent*> 1fac762081;//[Offset: 0x11e8, Size: 0x50]
	SkeletalMesh* LowestMeshPath;//[Offset: 0x1248, Size: 0x40]
	<enum,b547bf8a89> bbf6e55472;//[Offset: 0x1290, Size: 0x50]
	SkeletalMesh* CachedPreMesh;//[Offset: 0x1308, Size: 0x8]
	SkeletalMesh* MergedMesh;//[Offset: 0x1318, Size: 0x8]
	Object*[] 7ea574c6f2;//[Offset: 0x1348, Size: 0x10]
	eeae703230* d8514aabea;//[Offset: 0x1358, Size: 0x8]
	3cfe496c75[] 4a7f395a0f;//[Offset: 0x1360, Size: 0x10]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1164, Size: 0x1]
	bool 6fe738e543;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1164, Size: 0x1]
	bool 0813a9df1a;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1164, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0xffffff90c89e5001

--------------------------------
Class: 45dee49130
	SkinDataAsset* b5f4e31b83;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SkinDataAsset.8c272391a6.DataAsset.Object
	<enum,cae8dd11ce> 9a595fc372;//[Offset: 0x178, Size: 0x50]
	11e2f8c378[] 390a25a815;//[Offset: 0x1c8, Size: 0x10]
	<uint32> 8c6da73bf6;//[Offset: 0x1e0, Size: 0x50]
	enum SkinType;//[Offset: 0x230, Size: 0x1]
	CommonSpecialEffectData* SkinSpecialEffectData;//[Offset: 0x238, Size: 0x8]
	enum SkinCategory;//[Offset: 0x240, Size: 0x1]
	enum b2ef4dabdc;//[Offset: 0x248, Size: 0x1]

--------------------------------
Class: 8c272391a6.DataAsset.Object
	f74567c0f7 da45f31303;//[Offset: 0x80, Size: 0xe8]

--------------------------------
Class: f74567c0f7
	Texture* 34e9437301;//[Offset: 0x0, Size: 0x40]
	FString IconGroupID;//[Offset: 0x40, Size: 0x10]
	FText ItemDescription;//[Offset: 0x50, Size: 0x18]
	FText ShortDescription;//[Offset: 0x68, Size: 0x18]
	Texture* Icon;//[Offset: 0x80, Size: 0x40]
	FText ItemName;//[Offset: 0xc0, Size: 0x18]
	int Level;//[Offset: 0xd8, Size: 0x4]
	uint32 ItemId;//[Offset: 0xdc, Size: 0x4]
	enum Quality;//[Offset: 0xe0, Size: 0x1]
	bool 3536613085;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]

--------------------------------
Class: cae8dd11ce
	<enum,50c7f6ae27> SkinnedMaterialSet;//[Offset: 0x0, Size: 0x50]
	<enum,SkinMesh> SkinnedMeshSet;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: 50c7f6ae27
	enum SkinApplicationType;//[Offset: 0x0, Size: 0x1]
	0e28d6e774[] SkinMaterials;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 0e28d6e774
	int MaterialSlotIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInstance* Material;//[Offset: 0x8, Size: 0x40]
	FName MaterialSlotName;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SkinMesh
	enum MeshType;//[Offset: 0x0, Size: 0x1]
	Object* MeshAsset;//[Offset: 0x8, Size: 0x40]

--------------------------------
Class: 11e2f8c378
	Rotator FemaleRotationOffset;//[Offset: 0x0, Size: 0xc]
	ParticleSystem* ParticleSystem;//[Offset: 0x10, Size: 0x8]
	Rotator MaleRotationOffset;//[Offset: 0x18, Size: 0xc]
	enum EffectType;//[Offset: 0x24, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x28, Size: 0x8]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Vector MaleScaleOffset;//[Offset: 0x34, Size: 0xc]
	Vector MaleLocationOffset;//[Offset: 0x40, Size: 0xc]
	Vector FemaleLocationOffset;//[Offset: 0x4c, Size: 0xc]
	Vector FemaleScaleOffset;//[Offset: 0x58, Size: 0xc]

--------------------------------
Class: CommonSpecialEffectData.DataAsset.Object

--------------------------------
Class: b547bf8a89
	SkeletalMesh* SubMesh;//[Offset: 0x0, Size: 0x40]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x48, Size: 0x10]
	SkeletalMesh* Mesh;//[Offset: 0x60, Size: 0x40]
	MaterialInterface*[] d264c544f3;//[Offset: 0xa0, Size: 0x10]
	7b7d5203b7* 7b7d5203b7;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: 7b7d5203b7.SkinDataAsset.8c272391a6.DataAsset.Object
	enum BareSkinType;//[Offset: 0x249, Size: 0x1]

--------------------------------
Class: eeae703230.DataAsset.Object
	<enum,BareMaterialSetting> MasterBareMaterial;//[Offset: 0x70, Size: 0x50]
	SkeletalMesh* 97280afa56;//[Offset: 0xc0, Size: 0x8]
	SkeletalMesh* fd1352b692;//[Offset: 0xc8, Size: 0x8]
	enum Gender;//[Offset: 0xd0, Size: 0x1]
	SkeletalMesh* 20bfcd750f;//[Offset: 0xd8, Size: 0x8]
	SkeletalMesh* b6d947cfbf;//[Offset: 0xe0, Size: 0x8]
	SkeletalMesh* 4960964408;//[Offset: 0xe8, Size: 0x8]
	SkeletalMesh* 116004b3f4;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: BareMaterialSetting
	BareMaterial[] BareMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BareMaterial
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x40]

--------------------------------
Class: 3cfe496c75
	Transform e5fad486a1;//[Offset: 0x0, Size: 0x30]
	Transform 3889924636;//[Offset: 0x30, Size: 0x30]
	Transform fa211257a2;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: e1c1c567eb.DataAsset.Object
	<enum,eba20c43f7> 2b8e014435;//[Offset: 0x70, Size: 0x50]
	<enum,3d8b623934> 6ee31d96e9;//[Offset: 0xc0, Size: 0x50]
	<enum,080162fc20> 3d5261d0a3;//[Offset: 0x110, Size: 0x50]
	<FName,e08ad7c25e> 40e4618791;//[Offset: 0x160, Size: 0x50]
	<FName,ce6ef22fcd> bc33de857c;//[Offset: 0x1b0, Size: 0x50]
	<FName,cf47e5dcb3> 85e3f6c5cc;//[Offset: 0x200, Size: 0x50]

--------------------------------
Class: eba20c43f7
	e08ad7c25e[] 471efdb9f2;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: e08ad7c25e
	FName ElementName;//[Offset: 0x0, Size: 0x8]
	3a1c1895ca[] eba20c43f7;//[Offset: 0x8, Size: 0x10]
	FName DisplayName;//[Offset: 0x18, Size: 0x8]
	enum 64d90de7ee;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: 3a1c1895ca
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	Transform 2d49578c89;//[Offset: 0x10, Size: 0x30]
	Transform b283e42c44;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: 3d8b623934
	ce6ef22fcd[] 3bad6a808b;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ce6ef22fcd
	FName ElementName;//[Offset: 0x0, Size: 0x8]
	enum 64d90de7ee;//[Offset: 0x8, Size: 0x1]
	enum ControlType;//[Offset: 0x9, Size: 0x1]
	FName[] 1207734ef5;//[Offset: 0x10, Size: 0x10]
	enum TransformType;//[Offset: 0x20, Size: 0x1]
	MaterialInterface*[] 60c782c5df;//[Offset: 0x28, Size: 0x10]
	int[] b73ad36c3d;//[Offset: 0x38, Size: 0x10]
	FName ParamName;//[Offset: 0x48, Size: 0x8]
	FName DisplayName;//[Offset: 0x50, Size: 0x8]
	int[] fe05382014;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: 080162fc20
	cf47e5dcb3[] 68cedf24ac;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: cf47e5dcb3
	FName ElementName;//[Offset: 0x0, Size: 0x8]
	enum 6beb130a0e;//[Offset: 0x8, Size: 0x1]
	uint32[] 0ef7084b05;//[Offset: 0x10, Size: 0x10]
	enum 64d90de7ee;//[Offset: 0x20, Size: 0x1]
	FName DisplayName;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: CharacterShieldConfig
	float ShieldMaxGauge;//[Offset: 0x0, Size: 0x4]
	enum[] ShieldIgnoreDamageType;//[Offset: 0x8, Size: 0x10]
	float ShieldRecoveryAmount;//[Offset: 0x18, Size: 0x4]
	float ShieldAttackNonOccurringTime;//[Offset: 0x1c, Size: 0x4]
	<enum,float> DamageReductionByWeapon;//[Offset: 0x20, Size: 0x50]
	float DamageReductionByDefault;//[Offset: 0x70, Size: 0x4]
	uint32 ShieldID;//[Offset: 0x74, Size: 0x4]
	float ShieldRecoveryTime;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	byte ProbeChannel;//[Offset: 0x29c, Size: 0x1]
	float TargetArmLength;//[Offset: 0x2a0, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x2b0, Size: 0xc]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bc, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bc, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bc, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bc, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bc, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2bc, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bd, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x2d8, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x2dc, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x2f0, Size: 0x4]
	float ProbeSize;//[Offset: 0x2f4, Size: 0x4]
	Vector TargetOffset;//[Offset: 0x2f8, Size: 0xc]
	float CameraLagMaxDistance;//[Offset: 0x304, Size: 0x4]
	bool IsCollisionFixApplied();// 0xffffff90c89e5001
	Vector GetUnfixedCameraPosition();// 0xffffff90c89e5001
	Rotator GetTargetRotation();// 0xffffff90c89e5001

--------------------------------
Class: TslCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: TslCharacterSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	Vector 9f87d515fd;//[Offset: 0x3d0, Size: 0xc]
	Vector 2091f457a9;//[Offset: 0x3dc, Size: 0xc]
	Vector cf7d944a4b;//[Offset: 0x3f8, Size: 0xc]
	Vector d8dc292cc9;//[Offset: 0x404, Size: 0xc]
	CurveFloat* 516b246f70;//[Offset: 0x418, Size: 0x8]
	CurveFloat* b2af489989;//[Offset: 0x510, Size: 0x8]

--------------------------------
Class: AutoPickUpComponent.ActorComponent.Object
	bool IsAutoPickable(out ItemInstance ItemInstance, Actor* InSourceActor);// 0xffffff90c89e5003

--------------------------------
Class: SkydiveCloudEffect.Actor.Object
	XtrmCloudStartWidget* CloudWidget;//[Offset: 0x2b0, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x2b8, Size: 0x8]
	class XtrmCloudStartWidget* CloudWidgetClass;//[Offset: 0x2c0, Size: 0x8]

--------------------------------
Class: XtrmCloudStartWidget.XtrmUserWidget.UserWidget.Widget.Visual.Object
	Image* Cloud;//[Offset: 0x850, Size: 0x8]
	MaterialInstanceDynamic* CloudInst;//[Offset: 0x858, Size: 0x8]

--------------------------------
Class: XtrmUserWidget.UserWidget.Widget.Visual.Object
	FName[] HiddenChildWidgetNames;//[Offset: 0x3e8, Size: 0x10]
	InputComponent* InputComponentAxis;//[Offset: 0x708, Size: 0x8]
	bool bVisibleManageByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 0x1]
	CustomSceneUIBtnName CustomUIBtnName;//[Offset: 0x790, Size: 0xa8]
	void StopListeningForAllInputAxises();// 0xffffff90c89e5000
	void ListenForInputAxis(FName AxisName, float Scale, bool bConsume, delegate Callback);// 0xffffff90c89e5004
	float GetAxisMultiplier();// 0xffffff90c89e5001

--------------------------------
Class: Image.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x1b4, Size: 0x10]
	delegate BrushDelegate;//[Offset: 0x1f4, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x230, Size: 0x28]
	SlateBrush Brush;//[Offset: 0x258, Size: 0x88]
	delegate OnMouseButtonDownEvent;//[Offset: 0x2e0, Size: 0x28]
	void SetOpacity(float InOpacity);// 0xffffff90c89e5001
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xffffff90c89e5001
	void SetBrushTintColor(SlateColor TintColor);// 0xffffff90c89e5001
	void SetBrushSize(Vector2D DesiredSize);// 0xffffff90c89e5001
	void SetBrushResourceObject(Object* ResourceObject);// 0xffffff90c89e5001
	void SetBrushFromTextureDynamic(1a6e2f657c* Texture, bool bMatchSize);// 0xffffff90c89e5002
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0xffffff90c89e5002
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0xffffff90c89e5002
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0xffffff90c89e5001
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xffffff90c89e5001
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0xffffff90c89e5002
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xffffff90c89e5001
	void SetBrush(out const SlateBrush InBrush);// 0xffffff90c89e5001
	MaterialInstanceDynamic* GetDynamicMaterial();// 0xffffff90c89e5001

--------------------------------
Class: 1a6e2f657c.Texture.638112bfc1.Object

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x68, Size: 0x88]

--------------------------------
Class: CustomSceneUIBtnName
	AnchorData LayOut;//[Offset: 0x0, Size: 0x28]
	bool bOverrideLayOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x30, Size: 0x58]
	FText BtnName;//[Offset: 0x88, Size: 0x18]
	FName TargetCanvasPanelName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: VehicleRiderComponent.ActorComponent.Object

--------------------------------
Class: WeaponProcessorComponent.ActorComponent.Object
	Actor*[] e1d9262d80;//[Offset: 0x158, Size: 0x10]
	2b3e383f22 2b3e383f22;//[Offset: 0x1d1, Size: 0x1]
	void 9ec66a32e5(bool bNeedAnimation);// 0xffffff90c89e5001
	void ServerSetWeaponChangeData(bool bInIsClickOnlyMainWeaponChangeBtn, enum SelectedWeaponSlot);// 0xffffff90c89e5002
	void 5e77112b0b(bool bNeedAnimaion, enum WeaponSlot);// 0xffffff90c89e5002
	void 4cc40034f4(enum WeaponSlot);// 0xffffff90c89e5001
	void OnRep_WeaponArmInfo(out 2b3e383f22 OldArmInfo);// 0xffffff90c89e5001
	XtrmWeapon* GetWeaponBySlot(enum WeaponSlot);// 0xffffff90c89e5002
	void 377f68c571(bool bNeedAnimaion);// 0xffffff90c89e5001
	void 0c98308237(bool bNeedAnimaion);// 0xffffff90c89e5001
	void 558e0e47cb(bool bNeedAnimaion, enum WeaponSlot);// 0xffffff90c89e5002
	void 1d3c74db39(enum WeaponSlot, bool bNeedAnimaion);// 0xffffff90c89e5002
	void f11932bcc7(enum ServerArmInfo);// 0xffffff90c89e5001
	void 738d675dfc();// 0xffffff90c89e5000

--------------------------------
Class: 2b3e383f22
	enum 3f4c8efe52;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: InteractorComponent.ActorComponent.Object
	CastingContext CastingContext;//[Offset: 0x218, Size: 0xb0]
	void f797c7b4da(Object* Target, int PickedInteractionNumber);// 0xffffff90c89e5002
	void 7849c42931(const enum CancelReason);// 0xffffff90c89e5001
	void OnRep_CastingContext(out const CastingContext OldCastingContext);// 0xffffff90c89e5001
	interface classNone GetInteractableTarget();// 0xffffff90c89e5001

--------------------------------
Class: CastingContext
	enum 0152bf270c;//[Offset: 0x0, Size: 0x1]
	int RepeatTimes;//[Offset: 0x4, Size: 0x4]
	float 8df3787aa6;//[Offset: 0x18, Size: 0x4]
	float UpdateTickTime;//[Offset: 0x30, Size: 0x4]
	int 00cc6306e0;//[Offset: 0x34, Size: 0x4]
	int MultiCastingCount;//[Offset: 0x48, Size: 0x4]
	float ef0a365eb1;//[Offset: 0x4c, Size: 0x4]
	bool 67661310d3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum PrevCancelReason;//[Offset: 0x51, Size: 0x1]
	Object* Target;//[Offset: 0x58, Size: 0x8]
	float ProgressTime;//[Offset: 0x88, Size: 0x4]
	float 7a5d3ea0c9;//[Offset: 0xa0, Size: 0x4]
	bool 79b00bb948;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	FName 37047a7e0a;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: 98f8084266
	enum DamageReason;//[Offset: 0x8, Size: 0x1]
	class Actor* 7119026389;//[Offset: 0x20, Size: 0x8]
	XtrmPlayerState* 104fa390b0;//[Offset: 0x28, Size: 0x8]
	DateTime fa48004f92;//[Offset: 0x30, Size: 0x8]
	DamageEventInfoBase* 59a7fd3b5c;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: DateTime

--------------------------------
Class: DamageEventInfoBase.Object

--------------------------------
Class: XtrmCharactersPrivateActor.PrivateActor.Actor.Object
	HackReporterComponent* HackReporterComponent;//[Offset: 0x2a8, Size: 0x8]
	ItemCraftingComponent* CraftingComponent;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: PrivateActor.Actor.Object

--------------------------------
Class: HackReporterComponent.ActorComponent.Object
	void ServerReceiveDescLog(const enum InCheatType, FString InDescLog);// 0xffffff90c89e5002
	void ServerOnWallHackDetected(const XtrmCharacter* Victim, float Distance, bool bIsTargeting, FString HitBoneName);// 0xffffff90c89e5004
	void ServerOnTamperDetected(uint64 tp_base, uint32 tp_size);// 0xffffff90c89e5002
	void ServerOnHookDetected(uint64 hp, int Count, FString ObjectName);// 0xffffff90c89e5003
	void RequestDescLog(const enum InType);// 0xffffff90c89e5001
	void ClientRequestDescLog(const enum InCheatType);// 0xffffff90c89e5001
	void ClientDisplayCheatLog(const enum InCheatType, const enum InReasonType);// 0xffffff90c89e5002

--------------------------------
Class: ItemCraftingComponent.ActorComponent.Object
	ba93f05ff7[] a6b9783421;//[Offset: 0x160, Size: 0x10]
	void 1fa57cb0a1(int GunItemId, enum WeaponSlot, uint32 CustomizingID, int ResourceIndex);// 0xffffff90c89e5004
	void OnAkPostEventCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0xffffff90c89e5002
	void 588cfed57a(byte CraftingState, int GunItemId, enum WeaponSlot, uint32 CustomizingID);// 0xffffff90c89e5004
	void aa1c20a201(const b2c2aeabdb FailedMsg);// 0xffffff90c89e5001

--------------------------------
Class: ba93f05ff7
	<enum,2293a4e620> 4b8a8576e3;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: 2293a4e620.GunCustomizingSlotBase
	int ResourceIndex;//[Offset: 0xb4, Size: 0x4]
	bool IsRemodel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: GunCustomizingSlotBase
	uint32 CustomizingID;//[Offset: 0x8, Size: 0x4]
	enum RemodelID;//[Offset: 0xc, Size: 0x1]
	bool HasEnoughRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	<enum,cf9a429fd6*> AttachmentSlotInfos;//[Offset: 0x10, Size: 0x50]
	<uint32,e25eb63396> Resources;//[Offset: 0x60, Size: 0x50]
	enum CustomizingType;//[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: cf9a429fd6.ItemDataAsset.8c272391a6.DataAsset.Object
	<int,Vector> 19cd3bb0a5;//[Offset: 0x338, Size: 0x50]
	0ff84afa2c* AttachmentData;//[Offset: 0x388, Size: 0x8]
	<enum,bool> 846fbecfb5;//[Offset: 0x390, Size: 0x50]
	enum[] 7609b2363d;//[Offset: 0x3e0, Size: 0x10]

--------------------------------
Class: ItemDataAsset.8c272391a6.DataAsset.Object
	ItemData Data;//[Offset: 0x180, Size: 0xf0]
	HologramData HologramData;//[Offset: 0x270, Size: 0xc0]

--------------------------------
Class: ItemData
	float c51b8e485c;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* InventoryPutSoundAk;//[Offset: 0x8, Size: 0x8]
	int ItemOptions;//[Offset: 0x10, Size: 0x4]
	uint16 HealthMax;//[Offset: 0x14, Size: 0x2]
	bool be5b8fa3ce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	int SortPriority;//[Offset: 0x18, Size: 0x4]
	bool 8dc83607fd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool 6d8170b4b2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool 2b5bbc9e35;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	float ecaaf31cf5;//[Offset: 0x20, Size: 0x4]
	int 46a9be79eb;//[Offset: 0x24, Size: 0x4]
	bool 40ef457221;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Transform DroppedMeshRelativeTransform;//[Offset: 0x30, Size: 0x30]
	FText 615d915dc1;//[Offset: 0x60, Size: 0x18]
	Vector f5a6fc2cc3;//[Offset: 0x78, Size: 0xc]
	Rotator 6e0aaadef8;//[Offset: 0x84, Size: 0xc]
	StaticMesh* DroppedMesh;//[Offset: 0x90, Size: 0x40]
	AkAudioEvent* DropSoundAk;//[Offset: 0xd0, Size: 0x8]
	bool 78dd4b3ea6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	int d23fa0002e;//[Offset: 0xdc, Size: 0x4]
	int 87e419543a;//[Offset: 0xe0, Size: 0x4]
	AkAudioEvent* PickUpSoundAk;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: HologramData
	HologramScaleByStack[] ScaleByStacks;//[Offset: 0x0, Size: 0x10]
	class XtrmParticle* DisappearParticle;//[Offset: 0x10, Size: 0x40]
	class XtrmParticle* AppearParticle;//[Offset: 0x50, Size: 0x40]
	Transform HologramTransform;//[Offset: 0x90, Size: 0x30]

--------------------------------
Class: HologramScaleByStack
	float Scale;//[Offset: 0x0, Size: 0x4]
	Int32Range Range;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: e25eb63396
	int 12fc4a2bb4;//[Offset: 0x0, Size: 0x4]
	8c272391a6* DataAsset;//[Offset: 0x8, Size: 0x8]
	int 993bb19da7;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: b2c2aeabdb
	ItemInstance ItemInstance;//[Offset: 0x0, Size: 0x8]
	int 1c300e96a5;//[Offset: 0x8, Size: 0x4]
	enum MessageType;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InventoryComponent.ActorComponent.Object
	655ba46074 8748dc40fe;//[Offset: 0x178, Size: 0x18]
	float 00c655e6a0;//[Offset: 0x1f8, Size: 0x4]
	int 708c1540fd;//[Offset: 0x208, Size: 0x4]
	1c463063d7[] 69d903772b;//[Offset: 0x210, Size: 0x10]
	1558f32efd 1558f32efd;//[Offset: 0x240, Size: 0x30]
	b7925f0475[] b54e1b04c9;//[Offset: 0x298, Size: 0x10]
	d048d74253[] 25963d26bf;//[Offset: 0x2a8, Size: 0x10]
	69047fceb9[] e317155d57;//[Offset: 0x2c0, Size: 0x10]
	VehicleSkinInfoRep[] VehicleInfoRep;//[Offset: 0x2d0, Size: 0x10]
	d048d74253[] LobbyWeaponItems;//[Offset: 0x398, Size: 0x10]
	b0af56e956 d0055ee829;//[Offset: 0x3c0, Size: 0x30]
	float 4f68182130;//[Offset: 0x444, Size: 0x4]
	5b6fb7dd63[] 323e809d57;//[Offset: 0x448, Size: 0x10]
	void UnEquipWeapon_Server(enum WeaponSlot, bool ToInventory);// 0xffffff90c89e5002
	void 79daf426b3(enum EquipSlot);// 0xffffff90c89e5001
	void d8c3d08395(enum WeaponSlot, enum AttachmentSlot, bool bToInventory, bool bAlwaysPutIn);// 0xffffff90c89e5004
	void 9019f5d8cc(enum FromWeaponSlot, enum ToWeaponSlot);// 0xffffff90c89e5002
	void 2793596864(enum FromWeaponSlot, enum ToWeaponSlot, enum AttachmentSlot, bool bAlwaysPutIn);// 0xffffff90c89e5004
	void ServerCheckEquipValidation(const uint32[] ClientEquipInfo);// 0xffffff90c89e5001
	void 6ee8e97894();// 0xffffff90c89e5000
	void 80eecae181(enum FailReason);// 0xffffff90c89e5001
	void 8530d76cf9();// 0xffffff90c89e5000
	void 8cd3adfb91();// 0xffffff90c89e5000
	void 1afeb7aa72(const ItemDataAsset* ItemDataAsset, int16 PickupCount, enum Reason);// 0xffffff90c89e5003
	void 680ce50fb4(const ItemInstance ItemRef);// 0xffffff90c89e5001
	void 37d603a602(DroppedItem* DroppedItem, int16 PickupCount, enum Reason, bool IsAutoPickUp);// 0xffffff90c89e5004
	void OnRep_VehicleInfoRep();// 0xffffff90c89e5000
	void OnRep_SetInventoryPresetID(out const int InOldPresetID);// 0xffffff90c89e5001
	void OnRep_GunLABInfoRep();// 0xffffff90c89e5000
	void OnRep_EquippedWeapons();// 0xffffff90c89e5000
	void OnRep_BackpackAccessorySkinItems();// 0xffffff90c89e5000
	void OnCheckPresetCoolTime();// 0xffffff90c89e5000
	void MaxSpace_RepNotify();// 0xffffff90c89e5000
	void ItemsContainerSkipOwner_RepNotify();// 0xffffff90c89e5000
	void ItemContainer_RepNotify();// 0xffffff90c89e5000
	void 18d1fe7a64(const 491f2f2613[] Events);// 0xffffff90c89e5001
	void 7cecc9594c(const 5a3182ebd8[] Events, float InCurrentUsingSpace);// 0xffffff90c89e5002
	void 90eca74145(enum WeaponAccessorySlot, const int[] EquipableList);// 0xffffff90c89e5002
	void 20327bc1f6(int16 ItemIndex, const byte EquipItemOptions);// 0xffffff90c89e5002
	void 61f65f3a99(enum WeaponAccessorySlot, int16 ItemIndex, const byte EquipItemOptions);// 0xffffff90c89e5003
	void DropItemWithRadioMessage_Server(int InRadioMessageID, int16 ItemIndex, int16 DropCount);// 0xffffff90c89e5003
	void 1c9ec21705(int16 ItemIndex, int16 DropCount);// 0xffffff90c89e5002
	void 3e9de9d08c(uint32 ItemId, int16 Count);// 0xffffff90c89e5002
	void 9b9baadf6a(int16 InPresetID);// 0xffffff90c89e5001

--------------------------------
Class: 655ba46074
	enum 9026335912;//[Offset: 0x0, Size: 0x1]
	EquippedWeaponData[] Weapons;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: EquippedWeaponData.EquipmentBaseData
	XigPtrProperty Weapon;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: 1c463063d7
	FString PresetName;//[Offset: 0x0, Size: 0x10]
	uint32 OutgameVehicleSkinID;//[Offset: 0x10, Size: 0x4]
	uint32[] InventoryVehicleSkinList;//[Offset: 0x18, Size: 0x10]
	59c05b3c56[] 2006be65a7;//[Offset: 0x28, Size: 0x10]
	CharacterCustomizeInfo CharacterCustomizeInfo;//[Offset: 0x38, Size: 0x10]
	LobbyWeaponIDData[] LobbyPreviewWeaponSkinIDs;//[Offset: 0x48, Size: 0x10]
	int PresetID;//[Offset: 0x58, Size: 0x4]
	bool bLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: 59c05b3c56
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	uint32 ItemId;//[Offset: 0x4, Size: 0x4]
	uint32[] ea3ccc254f;//[Offset: 0x8, Size: 0x10]
	enum SkinCategory;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: CharacterCustomizeInfo
	int SkinTone;//[Offset: 0x0, Size: 0x4]
	int Hair;//[Offset: 0x4, Size: 0x4]
	int Face;//[Offset: 0x8, Size: 0x4]
	int HairColor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LobbyWeaponIDData
	enum TargetSlot;//[Offset: 0x0, Size: 0x1]
	int SkinID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 1558f32efd.b0af56e956

--------------------------------
Class: b0af56e956
	5b6fb7dd63[] ItemContainer;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 5b6fb7dd63
	bool 430dd04352;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int16 df64501bcc;//[Offset: 0x2, Size: 0x2]
	ItemInstance Item;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: b7925f0475
	SkinID c3365a631b;//[Offset: 0x0, Size: 0x4]
	SkinID 79bd138507;//[Offset: 0x4, Size: 0x4]
	SkinID 85979994d5;//[Offset: 0x8, Size: 0x4]
	SkinID BackpackID;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: d048d74253
	uint32[] 8c6da73bf6;//[Offset: 0x0, Size: 0x10]
	enum SkinCategory;//[Offset: 0x10, Size: 0x1]
	uint32 SkinID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: 69047fceb9
	int 18445664ba;//[Offset: 0x0, Size: 0x4]
	uint32[] fdb056d3cf;//[Offset: 0x8, Size: 0x10]
	uint32[] fc855416f1;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: DroppedItem.Actor.Object
	int 820e973b27;//[Offset: 0x2b0, Size: 0x4]
	DroppedItemInteractionComponent* InteractionComp;//[Offset: 0x2b8, Size: 0x8]
	8b3f6bfd19 8b3f6bfd19;//[Offset: 0x2c0, Size: 0x10]
	float MaxDrawDistance;//[Offset: 0x2dc, Size: 0x4]
	int OwnerPlayerID;//[Offset: 0x2e8, Size: 0x4]
	uint16 Health;//[Offset: 0x2ec, Size: 0x2]
	AsyncStaticMeshComponent* MeshComp;//[Offset: 0x308, Size: 0x8]
	void OnStaticMeshLoadFinish();// 0xffffff90c89e5000
	void OnStaticMeshLoaded();// 0xffffff90c89e5000
	void OnRep_ChangeOwnerPlayerID();// 0xffffff90c89e5000
	void Item_RepNotify();// 0xffffff90c89e5000

--------------------------------
Class: DroppedItemInteractionComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: 8b3f6bfd19
	SkinID SkinID;//[Offset: 0x0, Size: 0x4]
	bool 8786da0324;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	ItemInstance ItemInstance;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: 491f2f2613
	uint32 ItemId;//[Offset: 0x0, Size: 0x4]
	enum Slot;//[Offset: 0x4, Size: 0x1]
	uint32 PresetID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 5a3182ebd8
	enum EventType;//[Offset: 0x0, Size: 0x1]
	int16 ElementIndex;//[Offset: 0x2, Size: 0x2]
	uint32 ItemId;//[Offset: 0x4, Size: 0x4]
	enum UpdateType;//[Offset: 0x8, Size: 0x1]
	uint16 StackCount;//[Offset: 0xa, Size: 0x2]

--------------------------------
Class: MovementDisableSetting
	float Crouch_ProneDisableTime;//[Offset: 0x0, Size: 0x4]
	float Prone_CrouchDisableTime;//[Offset: 0x4, Size: 0x4]
	float Prone_StandSprintDisableTime;//[Offset: 0x8, Size: 0x4]
	float Prone_StandDisableTime;//[Offset: 0xc, Size: 0x4]
	float Stand_ProneDisableTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: 4910149af6
	int Face;//[Offset: 0x0, Size: 0x4]
	int Hair;//[Offset: 0x4, Size: 0x4]
	int SkinTone;//[Offset: 0x8, Size: 0x4]
	int HairColor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AutoFireComponent.ActorComponent.Object
	FName[] AimPoints;//[Offset: 0x150, Size: 0x10]
	float TraceRadiusDefault;//[Offset: 0x164, Size: 0x4]
	float ManualPauseAutoFireDuration;//[Offset: 0x190, Size: 0x4]
	float TraceRadiusInAutoFiring;//[Offset: 0x1c8, Size: 0x4]
	float FindTargetInterval;//[Offset: 0x1cc, Size: 0x4]
	void UnPauseAutoFireProcess();// 0xffffff90c89e5000
	void StartAutoFire_Internal();// 0xffffff90c89e5000
	void OnWeaponFireReleased();// 0xffffff90c89e5000
	void OnWeaponFirePressed(bool bManualPress);// 0xffffff90c89e5001
	void OnToggleFireMode();// 0xffffff90c89e5000
	void FindTarget();// 0xffffff90c89e5000

--------------------------------
Class: XtrmBuffComponent.ActorComponent.Object
	XtrmBuff*[] 606b677871;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float ScreenSize;//[Offset: 0x55c, Size: 0x4]
	float ArrowLength;//[Offset: 0x560, Size: 0x4]
	float ArrowSize;//[Offset: 0x564, Size: 0x4]
	Color ArrowColor;//[Offset: 0x568, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56c, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0xffffff90c89e5001

--------------------------------
Class: 822123bb88
	float 9883b59b3c;//[Offset: 0x0, Size: 0x4]
	b9964f7d6d 77e151522e;//[Offset: 0x4, Size: 0x8]
	class CharacterBreathBuff* adab3ff3d3;//[Offset: 0x10, Size: 0x8]
	Vector 338b0dd2d7;//[Offset: 0x20, Size: 0xc]
	Vector 7f72e81f4e;//[Offset: 0x2c, Size: 0xc]
	class CharacterBreathBuff* 40d4e2fe21;//[Offset: 0x40, Size: 0x8]
	Vector b2171eab95;//[Offset: 0x48, Size: 0xc]
	Vector d2e9684671;//[Offset: 0x54, Size: 0xc]
	class CharacterBreathBuff* 0924a8e418;//[Offset: 0x98, Size: 0x8]
	class CharacterBreathBuff* 4a81909ff9;//[Offset: 0xa8, Size: 0x8]
	class CharacterBreathBuff* db7ece7ba0;//[Offset: 0xb0, Size: 0x8]
	b9964f7d6d 2207cf9013;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: CharacterBreathBuff.XtrmBuff.Actor.Object

--------------------------------
Class: XtrmPawnNoiseEmitterComponent.PawnNoiseEmitterComponent.ActorComponent.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool 5a29830c9b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	float NoiseLifetime;//[Offset: 0x134, Size: 0x4]
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0xffffff90c89e5003

--------------------------------
Class: EquipmentComponent.ActorComponent.Object
	d43b806f16[] 4e959be71e;//[Offset: 0x128, Size: 0x10]
	b7925f0475 BackpackAccessory;//[Offset: 0x1a0, Size: 0x10]
	d43b806f16[] b15cbe8b0c;//[Offset: 0x1b0, Size: 0x10]
	<int,495f9ed5a3> 8d4f6c82c8;//[Offset: 0x1e0, Size: 0x50]
	void OnRep_Equipments();// 0xffffff90c89e5000
	void OnRep_BackpackAccessory();// 0xffffff90c89e5000

--------------------------------
Class: d43b806f16.EquipmentBaseData
	uint32 DisplayOverrideItemID;//[Offset: 0x4, Size: 0x4]
	SkinID SkinID;//[Offset: 0x8, Size: 0x4]
	uint32 ItemId;//[Offset: 0xc, Size: 0x4]
	float 2f8df2d9d0;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: 495f9ed5a3
	FName SkinName;//[Offset: 0x0, Size: 0x8]
	SkinMesh SkinnedMesh_Male;//[Offset: 0x8, Size: 0x48]
	int 80292a5238;//[Offset: 0x50, Size: 0x4]
	SkinMesh SkinnedMesh_Female;//[Offset: 0x58, Size: 0x48]
	SkinMesh SkinnedMesh_Dropped;//[Offset: 0xa8, Size: 0x48]
	50c7f6ae27 SkinnedMaterial;//[Offset: 0xf0, Size: 0x18]

--------------------------------
Class: FiremansCarryBehaviour
	float DropTime;//[Offset: 0x18, Size: 0x4]
	Vector CarryThirdPersonCameraOffset;//[Offset: 0x1c, Size: 0xc]
	Vector CarryFirstPersonCameraOffset;//[Offset: 0x28, Size: 0xc]
	float DetachTime;//[Offset: 0x54, Size: 0x4]
	float MeshRadius;//[Offset: 0xb0, Size: 0x4]
	float AttachTime;//[Offset: 0xb4, Size: 0x4]
	World* CachedWorld;//[Offset: 0xb8, Size: 0x8]
	float DropDistanceCheckAdjustment;//[Offset: 0xcc, Size: 0x4]
	float PutDownRangeMax;//[Offset: 0xfc, Size: 0x4]
	ReplicatedCarryState CachedReplicatedState;//[Offset: 0x120, Size: 0x18]
	float PickUpRange;//[Offset: 0x148, Size: 0x4]
	float DropDistancePlacementAdjustment;//[Offset: 0x158, Size: 0x4]
	float InFrontOfCharacterAdjustment;//[Offset: 0x160, Size: 0x4]
	float MovementSpeedDuringDropMax;//[Offset: 0x168, Size: 0x4]
	float PutDownRangeMin;//[Offset: 0x170, Size: 0x4]
	float PickUpTime;//[Offset: 0x174, Size: 0x4]
	float DropDistance;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: TslVaultingHelper.Actor.Object
	SceneComponent* RootSceneComponent;//[Offset: 0x2a8, Size: 0x8]
	SceneComponent* ActorAttachScene;//[Offset: 0x2b0, Size: 0x8]
	Vector GetActorAttachScene();// 0xffffff90c89e5001

--------------------------------
Class: SystemInfo
	FString GpuName;//[Offset: 0x0, Size: 0x10]
	int RamInGB;//[Offset: 0x10, Size: 0x4]
	int GraphicOption;//[Offset: 0x14, Size: 0x4]
	FString OsLanguage;//[Offset: 0x18, Size: 0x10]
	FString BaseDeviceProfileName;//[Offset: 0x28, Size: 0x10]
	FString GameLanguage;//[Offset: 0x38, Size: 0x10]
	int AvailablePhysicalMemory;//[Offset: 0x48, Size: 0x4]
	FString OSVersion;//[Offset: 0x50, Size: 0x10]
	FString CpuName;//[Offset: 0x60, Size: 0x10]
	int MaxFPS;//[Offset: 0x70, Size: 0x4]
	FString ActiveDeviceProfileName;//[Offset: 0x78, Size: 0x10]
	ScreenResolution cd3fad9a03;//[Offset: 0x88, Size: 0x8]
	bool bIsEnableHDTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: ScreenResolution
	int Width;//[Offset: 0x0, Size: 0x4]
	int Height;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ClientPlayerStat
	int ClientUnderFps20;//[Offset: 0x0, Size: 0x4]
	int ClientUnderFps10;//[Offset: 0x4, Size: 0x4]
	uint32 ClientUsedVirtual;//[Offset: 0x8, Size: 0x4]
	int ClientMinFps;//[Offset: 0xc, Size: 0x4]
	int ClientMaxFps;//[Offset: 0x10, Size: 0x4]
	int ClientUnderFps60;//[Offset: 0x14, Size: 0x4]
	float ClientFps;//[Offset: 0x18, Size: 0x4]
	int ClientUnderFps30;//[Offset: 0x1c, Size: 0x4]
	bool bIsEnableHDTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int ClientGraphicOption;//[Offset: 0x24, Size: 0x4]
	uint32 ClientUsedPhysical;//[Offset: 0x28, Size: 0x4]
	int ClientFrameOption;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: b77c6a2984
	enum 4afaed0cb9;//[Offset: 0x0, Size: 0x1]
	float 3fe344f987;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BluezoneInOutComponent.ActorComponent.Object

--------------------------------
Class: BluezoneInOutSoundEffectComponent.ActorComponent.Object
	AkComponent* AkComponent;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: DeliveryDroneDebugComponent.ActorComponent.Object
	void cdaf7336a8(const Vector[] ChangedDeliveryRoute, const Vector ChangedHeadingDeliverLocation);// 0xffffff90c89e5002
	void 86c3fda265(const Vector[] ChangedDeliveryRoute);// 0xffffff90c89e5001
	void d75e630ca5(const Vector[] InitialDeliveryRoute);// 0xffffff90c89e5001
	void 5fb713782e();// 0xffffff90c89e5000
	void 531322f9eb();// 0xffffff90c89e5000

--------------------------------
Class: 37bc153bb7
	FString RegionName;//[Offset: 0x0, Size: 0x10]
	Vector_NetQuantize100 f1e431b359;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: GraveyardCrowController.Actor.Object
	class GraveyardCrow* e7b36366ee;//[Offset: 0x2d8, Size: 0x8]
	<enum,float> d3a80ec7d2;//[Offset: 0x2f0, Size: 0x50]
	e4d1c373ac[] 1cbac76ddf;//[Offset: 0x350, Size: 0x10]
	void OnRep_ReplicatedStates(out const e4d1c373ac[] OldStates);// 0xffffff90c89e5001

--------------------------------
Class: e4d1c373ac
	float e20b003617;//[Offset: 0x0, Size: 0x4]
	float 00ad0d3281;//[Offset: 0x4, Size: 0x4]
	int 702247af3d;//[Offset: 0x8, Size: 0x4]
	enum ee2782aa41;//[Offset: 0xc, Size: 0x1]
	Vector_NetQuantize SpawnLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: GraveyardCrow.Actor.Object
	StaticMesh* FlockMesh;//[Offset: 0x2b8, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x2c0, Size: 0x8]
	AkAudioEvent* 0cb45ace38;//[Offset: 0x2c8, Size: 0x8]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2d0, Size: 0x8]
	StaticMesh* StandMesh;//[Offset: 0x2d8, Size: 0x8]
	void StartFly();// 0xffffff90c89e5000

--------------------------------
Class: AutomaticDoorControlComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	4c1f06da2a[] d362d40bf2;//[Offset: 0x580, Size: 0x10]
	Timeline 714a2bb548;//[Offset: 0x5a0, Size: 0xe0]
	enum 7b09f22c47;//[Offset: 0x680, Size: 0x1]
	Timeline 168201c907;//[Offset: 0x688, Size: 0xe0]
	f0a46fefc1* f0a46fefc1;//[Offset: 0x778, Size: 0x8]
	AutomaticDoorMeshComponent*[] 169ef7eae0;//[Offset: 0x790, Size: 0x10]
	void OnVehicleWake(PrimitiveComponent* WakingComponent, FName BoneName);// 0xffffff90c89e5002
	void OnVehicleSleep(PrimitiveComponent* SleepingComponent, FName BoneName);// 0xffffff90c89e5002
	void OnRep_DoorState(enum PrevDoorState);// 0xffffff90c89e5001

--------------------------------
Class: 4c1f06da2a
	SoftClassPath 859779c103;//[Offset: 0x0, Size: 0x18]
	Transform 4d5152b0dc;//[Offset: 0x20, Size: 0x30]
	Transform 5e6ffbe24e;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: Timeline
	byte af5940a8e6;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool e1e4d1d66d;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	e9385d0130[] Events;//[Offset: 0x10, Size: 0x10]
	43fda75ee5[] 6201a12f4d;//[Offset: 0x20, Size: 0x10]
	412427aa50[] fbed41a2aa;//[Offset: 0x30, Size: 0x10]
	c0b52538d9[] 3786b93a68;//[Offset: 0x40, Size: 0x10]
	delegate 505a6fc403;//[Offset: 0x50, Size: 0x28]
	delegate 29d0070266;//[Offset: 0x78, Size: 0x28]
	Object* a9e047b2bf;//[Offset: 0xa0, Size: 0x20]
	FName 268f5e1b35;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: e9385d0130
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x28]

--------------------------------
Class: 43fda75ee5
	c835d7a808* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate 6600c7cb6e;//[Offset: 0x8, Size: 0x28]
	FName TrackName;//[Offset: 0x30, Size: 0x8]
	FName f3fd785d3d;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: 412427aa50
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate 6600c7cb6e;//[Offset: 0x8, Size: 0x28]
	FName TrackName;//[Offset: 0x30, Size: 0x8]
	FName ba60570286;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: c0b52538d9
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate 6600c7cb6e;//[Offset: 0x8, Size: 0x28]
	FName TrackName;//[Offset: 0x30, Size: 0x8]
	FName d7981b2074;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: f0a46fefc1.DataAsset.Object
	CurveFloat* 6f2434cdec;//[Offset: 0x70, Size: 0x8]
	AkAudioEvent* bf29a29dca;//[Offset: 0x78, Size: 0x8]
	CurveFloat* 92e1c030f7;//[Offset: 0x80, Size: 0x8]
	AkAudioEvent* 9fcd7d51d8;//[Offset: 0x90, Size: 0x8]
	AkAudioEvent* c6ac1729a4;//[Offset: 0x98, Size: 0x8]
	AkAudioEvent* b9b3bb66b4;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: AutomaticDoorMeshComponent.GlassStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: GlassStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SpeedGateComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInstanceDynamic*[] e18c0b7c9d;//[Offset: 0x588, Size: 0x10]
	a2e40fa225* a2e40fa225;//[Offset: 0x598, Size: 0x8]
	enum 95c8fab9ec;//[Offset: 0x5a0, Size: 0x1]
	FName 79a48b5613;//[Offset: 0x5a4, Size: 0x8]
	AkComponent* 2e01c0c362;//[Offset: 0x5b8, Size: 0x8]
	FName 5262ad922d;//[Offset: 0x5c8, Size: 0x8]
	void OnRep_AlarmState();// 0xffffff90c89e5000

--------------------------------
Class: a2e40fa225.DataAsset.Object
	AkAudioEvent* 2c1dfa9d39;//[Offset: 0x78, Size: 0x8]
	AkAudioEvent* 53eca91dc3;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: SecurityGateComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	AkComponent* 2e01c0c362;//[Offset: 0x590, Size: 0x8]
	AlarmMeshComponent*[] c95f93f38c;//[Offset: 0x5a0, Size: 0x10]
	FName 5262ad922d;//[Offset: 0x5b0, Size: 0x8]
	a2e40fa225* a2e40fa225;//[Offset: 0x5c0, Size: 0x8]
	FName 79a48b5613;//[Offset: 0x5dc, Size: 0x8]
	enum 95c8fab9ec;//[Offset: 0x5e4, Size: 0x1]
	void OnRep_AlarmState();// 0xffffff90c89e5000
	void OnMatchStateChanged(out const FName ChangedMatchState);// 0xffffff90c89e5001

--------------------------------
Class: AlarmMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: HologramPostController.Actor.Object
	HologramPost*[] 16ee52e76d;//[Offset: 0x2d8, Size: 0x10]
	bool[] 9c0aae8cd4;//[Offset: 0x2e8, Size: 0x10]
	void OnRep_EnabledHolograms();// 0xffffff90c89e5000

--------------------------------
Class: HologramPost.StaticMeshActor.Actor.Object
	AkAudioEvent* 393910e4bc;//[Offset: 0x2f0, Size: 0x8]
	AkAudioEvent* e00b53f821;//[Offset: 0x308, Size: 0x8]

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2a8, Size: 0x8]
	enum f7161c7785;//[Offset: 0x2b1, Size: 0x1]
	void SetMobility(byte InMobility);// 0xffffff90c89e5001

--------------------------------
Class: 53655e6021
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool 2e8f3c2e88;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIsAnticipatingLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bIsFallingFromHighAltitude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool 3f9e102ae5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bUseRotPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bMissingController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bUseRotYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bIsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	byte e7db9b6d29;//[Offset: 0x9, Size: 0x1]
	bool bIsPreparingLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	Rotator AimOffsets;//[Offset: 0xc, Size: 0xc]
	Rotator LastServerReciveControllRot;//[Offset: 0x18, Size: 0xc]
	Rotator LastClientSendControllRot;//[Offset: 0x24, Size: 0xc]
	bool bIsFallingWithParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bIsParachuting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	FString PlayerName;//[Offset: 0x38, Size: 0x10]
	float LastAimOffsetRepTime;//[Offset: 0x48, Size: 0x4]
	FString RootName;//[Offset: 0x50, Size: 0x10]
	bool bIsRestrictedByCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	Rotator Rotation;//[Offset: 0x64, Size: 0xc]
	bool bEnableFaceRoation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bIsUsingAbsouteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bUseRotRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool bIsDeployingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]

--------------------------------
Class: ObserverTakeHitInfo
	TeamMemberInfo HitMemberInfo;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 HitImpactRelativeOffset;//[Offset: 0x8, Size: 0xc]
	2a93a2b933 2a93a2b933;//[Offset: 0x18, Size: 0x88]

--------------------------------
Class: XtrmWeapon_Gun.XtrmWeapon.Actor.Object
	bool bSpawnBulletFromBarrel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 0x1]
	d8c7be28ae* 8b51ca6ed6;//[Offset: 0x888, Size: 0x8]
	float CheckAutoFireDelay;//[Offset: 0x8a8, Size: 0x4]
	class AnimInstance* MainBodyAniminst;//[Offset: 0x8b0, Size: 0x8]
	class XtrmImpactEffect* SubImpactTemplate;//[Offset: 0x8e8, Size: 0x8]
	int 6e0c319a80;//[Offset: 0x91c, Size: 0x4]
	ParticleSystem* 01a06511d6;//[Offset: 0x928, Size: 0x8]
	float b7c487a708;//[Offset: 0x940, Size: 0x4]
	class XtrmImpactEffect* OverrideImpactTemplate;//[Offset: 0x960, Size: 0x8]
	c65baa533b 0fcdaf6031;//[Offset: 0x978, Size: 0x58]
	float 231beb8775;//[Offset: 0x9d0, Size: 0x4]
	15195a586a* 2e130ae922;//[Offset: 0x9f0, Size: 0x8]
	int 2004ca0b4a;//[Offset: 0xa20, Size: 0x4]
	ParticleSystem* 384803c7ce;//[Offset: 0xa38, Size: 0x8]
	eacd60ebfc 6fb523863d;//[Offset: 0xa84, Size: 0xc]
	c92de2fbb3* c92de2fbb3;//[Offset: 0xae0, Size: 0x8]
	float 178eadf9af;//[Offset: 0xb20, Size: 0x4]
	bcf039bdc5 1913e89bcd;//[Offset: 0xb28, Size: 0x8]
	ParticleSystem* 1efeecd95b;//[Offset: 0xb38, Size: 0x8]
	FName ba173dd3ca;//[Offset: 0xb48, Size: 0x8]
	ParticleSystemComponent* 777d74cc01;//[Offset: 0xb58, Size: 0x8]
	<enum,WeaponMeshPartInfo> WeaponMeshPartInfos;//[Offset: 0xb90, Size: 0x50]
	ScopeReticleDirectingInfo ScopeReticleDirectingInfo;//[Offset: 0xbf0, Size: 0x68]
	FName 2cf79a53ab;//[Offset: 0xc60, Size: 0x8]
	45dee49130 00b1a85b7e;//[Offset: 0xc90, Size: 0x20]
	AkAudioEvent* MuzzleSound;//[Offset: 0xcb0, Size: 0x8]
	ParticleSystemComponent* e3e7c1d2d2;//[Offset: 0xcb8, Size: 0x8]
	9e70421366 3ace51c483;//[Offset: 0xcd0, Size: 0x30]
	FName c33ef2e0df;//[Offset: 0xdc0, Size: 0x8]
	FName e063620596;//[Offset: 0xdc8, Size: 0x8]
	bool 0d34643a3a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdd0, Size: 0x1]
	FName 8999fc0cf8;//[Offset: 0xdd4, Size: 0x8]
	bool c2f67298e2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 0x1]
	int 061e1d4e79;//[Offset: 0xdf8, Size: 0x4]
	int 82cfa5495c;//[Offset: 0xe34, Size: 0x4]
	float 30db317942;//[Offset: 0xe5c, Size: 0x4]
	int 0000fac51b;//[Offset: 0xe88, Size: 0x4]
	Vector2D RecoilScale;//[Offset: 0xe98, Size: 0x8]
	bool bUseAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea0, Size: 0x1]
	bool d400879ee9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea8, Size: 0x1]
	<enum,bool> c1c5cac5b0;//[Offset: 0xec0, Size: 0x50]
	c92de2fbb3* f0a7c19629;//[Offset: 0xf10, Size: 0x8]
	WeaponSkeletalMeshComponent* WeaponSkeletalMeshComp;//[Offset: 0xf60, Size: 0x8]
	SkeletalMesh* MainBodyMesh;//[Offset: 0xff0, Size: 0x8]
	enum WeaponState;//[Offset: 0x1068, Size: 0x1]
	void WallCheckMsg();// 0xffffff90c89e5000
	void UpdateScopeCameraSetting();// 0xffffff90c89e5000
	void TickSimulateAmmo_Observer();// 0xffffff90c89e5000
	void TickSimulateAmmo();// 0xffffff90c89e5000
	void 58afafd966();// 0xffffff90c89e5000
	void StartManualFireCycle();// 0xffffff90c89e5000
	void StartAutoFire();// 0xffffff90c89e5000
	void 86ac1f35bd(const enum ReloadAnimExec, bool bSpeedReload);// 0xffffff90c89e5002
	void SetWeaponReloadInterrupted(bool bIsInterrupted);// 0xffffff90c89e5001
	void SetSpawnBulletFromBarrel(bool DoSpawnBulletFromBarrel);// 0xffffff90c89e5001
	void 9d876636d2(const float ThermalScopeADSNoiseTime);// 0xffffff90c89e5001
	void 580a346311();// 0xffffff90c89e5000
	void 8c3a4ce923();// 0xffffff90c89e5000
	void 6f0234b6fd();// 0xffffff90c89e5000
	void f7ebf8bf20(const uint16 InSB, const uint32 InProperty, const uint32 InPackage, const uint16 InFlag, bool bSpeedReload);// 0xffffff90c89e5005
	void f9159bde7d(float Noise, int Scale, int Temporal, float FadeDistance);// 0xffffff90c89e5004
	void 896e39d174(bool bNewIsHipped);// 0xffffff90c89e5001
	void cce6500d3d(const 5560dc10e8 ClientHitResult);// 0xffffff90c89e5001
	void ServerNotifyHitSpawn_Simple(const 269fabf063 InHitArgs);// 0xffffff90c89e5001
	void ServerNotifyHitSpawn(const 025ba67db2 InHitArgs, const Vector_NetQuantize InLocalHitLocation);// 0xffffff90c89e5002
	void f7f13d1052(const 269fabf063 HitArgs);// 0xffffff90c89e5001
	void c4b21e396e(const 025ba67db2 HitArgs);// 0xffffff90c89e5001
	void f3cbe6ef19(XtrmCharacter* TargetCharacter, Vector_NetQuantize LocationRelative, float BulletVelocity);// 0xffffff90c89e5003
	void 46e62c2d01(const WeaponFiringInfo InWeaponFiringInfo);// 0xffffff90c89e5001
	void 3dce9e03dc(enum NewFiringMode);// 0xffffff90c89e5001
	void b6698222aa(enum CancelReason);// 0xffffff90c89e5001
	void 94fd0d48e4();// 0xffffff90c89e5000
	void d75bafc40f(float Val);// 0xffffff90c89e5001
	void OnWeaponMeshhMergeFinish(bool bIsSkeletalFinish);// 0xffffff90c89e5001
	void OnScopeZoomOut();// 0xffffff90c89e5000
	void OnScopeZoomIn();// 0xffffff90c89e5000
	void OnRollingEnd();// 0xffffff90c89e5000
	void OnRep_FiringModeIndex();// 0xffffff90c89e5000
	void OnRep_CurrentZeroLevel(int LastCurrentZeroLevel);// 0xffffff90c89e5001
	void OnRep_CurrentCantedZeroLevel(int LastCurrentZeroLevel);// 0xffffff90c89e5001
	void OnRep_AmmoInClip();// 0xffffff90c89e5000
	void OnReleaseFire();// 0xffffff90c89e5000
	void OnPresseFire(bool bManualPress);// 0xffffff90c89e5001
	void 164c532c58();// 0xffffff90c89e5000
	void ManualFireCycleFinished();// 0xffffff90c89e5000
	bool IsWeaponCycleInProgress();// 0xffffff90c89e5001
	bool IsWeaponCycleAnimActive();// 0xffffff90c89e5001
	bool IsWeaponCycleActive();// 0xffffff90c89e5001
	void HandlePickupAnimationEnded();// 0xffffff90c89e5000
	void HandlePickup(uint32 PickedItemID);// 0xffffff90c89e5001
	2e3fe0002d GetWeaponPostprocessSettings();// 0xffffff90c89e5001
	2e3fe0002d GetWeaponOrScopePostprocessSettings(enum ScopeType);// 0xffffff90c89e5002
	enum GetWeaponClassEnum();// 0xffffff90c89e5001
	b8cd1598a6 GetWeaponAttachmentDataForScopeType(enum ScopeType);// 0xffffff90c89e5002
	Vector GetWeaponAimRelativePosition();// 0xffffff90c89e5001
	Vector GetScopeMeshRelativePosition(enum ScopeType);// 0xffffff90c89e5002
	float GetReloadAnimationPlayRate();// 0xffffff90c89e5001
	float GetMagOutDuration();// 0xffffff90c89e5001
	int GetCurrentAmmoInInventory();// 0xffffff90c89e5001
	void 8923b91d89();// 0xffffff90c89e5000
	void dd8958d44e();// 0xffffff90c89e5000
	void f365321579();// 0xffffff90c89e5000
	void a75e831e2f(const 5560dc10e8 ServerHitResult);// 0xffffff90c89e5001
	void 270322ef1c();// 0xffffff90c89e5000
	void 52e4f75e75(const 5560dc10e8 ServerHitResult, const float InDamage, float InShieldDamage);// 0xffffff90c89e5003
	void dd6a615572(const 5560dc10e8 ServerHitResult, const float InDamage, bool bIsPenetrated, float InShieldDamage);// 0xffffff90c89e5004
	void d80691f8c1(const 5560dc10e8 ServerHitResult, const float InDamage, float InShieldDamage);// 0xffffff90c89e5003
	void 2f38b39d58(const 5560dc10e8 ServerHitResult, const float InDamage, bool bIsPenetrated, float InShieldDamage);// 0xffffff90c89e5004
	void 768e5ab359(enum CancelReason);// 0xffffff90c89e5001
	void d5aac95481();// 0xffffff90c89e5000
	void ClearDesiredDoFireAction();// 0xffffff90c89e5000
	void 67c9add9a5();// 0xffffff90c89e5000

--------------------------------
Class: 5560dc10e8
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x4, Size: 0xc]
	PrimitiveComponent* Component;//[Offset: 0x10, Size: 0x20]
	Vector_NetQuantize Location;//[Offset: 0x30, Size: 0xc]
	float Distance;//[Offset: 0x3c, Size: 0x4]
	Actor* Actor;//[Offset: 0x40, Size: 0x20]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x20]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	Vector_NetQuantize TraceStart;//[Offset: 0x88, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x94, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0xa0, Size: 0xc]

--------------------------------
Class: 269fabf063
	5560dc10e8 e63386a4e2;//[Offset: 0x0, Size: 0xac]
	AttackId AttackId;//[Offset: 0xac, Size: 0x8]
	Vector_NetQuantizeNormal OriginShootDir;//[Offset: 0xb4, Size: 0xc]
	IntVector ClientOrigin;//[Offset: 0xc0, Size: 0xc]
	Vector_NetQuantize100 ClientStartLoc;//[Offset: 0xcc, Size: 0xc]
	uint16 Segment;//[Offset: 0xd8, Size: 0x2]
	Vector_NetQuantize100 ClientOriginVictimLoc;//[Offset: 0xdc, Size: 0xc]
	float SpeedLoss;//[Offset: 0xe8, Size: 0x4]
	Vector_NetQuantize BoneRelLoc;//[Offset: 0xec, Size: 0xc]
	Vector_NetQuantize BaseMoveDelta;//[Offset: 0xf8, Size: 0xc]
	float ServerFireTime;//[Offset: 0x104, Size: 0x4]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	Vector_NetQuantizeNormal ShootDir;//[Offset: 0x10c, Size: 0xc]
	float TravelDistance;//[Offset: 0x118, Size: 0x4]
	byte 2fdffb1527;//[Offset: 0x11c, Size: 0x1]
	Vector_NetQuantize100 AttackerLoc;//[Offset: 0x120, Size: 0xc]
	bool 4585b14269;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]

--------------------------------
Class: 025ba67db2
	bool d27e9b53cb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float 7f44e627e8;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize100 7b54a5272f;//[Offset: 0x8, Size: 0xc]
	float 0df865d2ff;//[Offset: 0x14, Size: 0x4]
	float SpeedLoss;//[Offset: 0x18, Size: 0x4]
	Vector 0bb1272ab3;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal ShootDir;//[Offset: 0x28, Size: 0xc]
	bool 4585b14269;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	uint16 Segment;//[Offset: 0x36, Size: 0x2]
	Vector fd16018c67;//[Offset: 0x38, Size: 0xc]
	bool adde1dafe4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	Vector abc0e2237c;//[Offset: 0x48, Size: 0xc]
	bool bUseSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int TargetingType;//[Offset: 0x58, Size: 0x4]
	float TravelDistance;//[Offset: 0x5c, Size: 0x4]
	Vector_NetQuantize100 ClientOriginVictimLoc;//[Offset: 0x60, Size: 0xc]
	uint32 b039dd8e3c;//[Offset: 0x6c, Size: 0x4]
	Vector AimDir2_NoPacked;//[Offset: 0x70, Size: 0xc]
	Vector 9eb7910c62;//[Offset: 0x7c, Size: 0xc]
	float 419a05f1da;//[Offset: 0x88, Size: 0x4]
	bool 8b553ee793;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	Vector a0e243c25f;//[Offset: 0x90, Size: 0xc]
	byte MovableBaseType;//[Offset: 0x9c, Size: 0x1]
	Vector 27454bb0c0;//[Offset: 0xa0, Size: 0xc]
	AttackId AttackId;//[Offset: 0xac, Size: 0x8]
	float Spread;//[Offset: 0xb4, Size: 0x4]
	Vector 305fa6bb58;//[Offset: 0xb8, Size: 0xc]
	Vector_NetQuantize BoneRelLoc;//[Offset: 0xc4, Size: 0xc]
	float ServerFireTime;//[Offset: 0xd0, Size: 0x4]
	5560dc10e8 e63386a4e2;//[Offset: 0xd4, Size: 0xac]
	IntVector db0de143f2;//[Offset: 0x180, Size: 0xc]
	int[] Checksums;//[Offset: 0x190, Size: 0x10]
	float 7033d2ac34;//[Offset: 0x1a0, Size: 0x4]
	float b1f22d0519;//[Offset: 0x1a4, Size: 0x4]
	float TimeSeconds;//[Offset: 0x1a8, Size: 0x4]
	byte 2fdffb1527;//[Offset: 0x1ac, Size: 0x1]

--------------------------------
Class: WeaponFiringInfo
	enum AnimStance;//[Offset: 0x0, Size: 0x1]
	int64 PackedDeviation;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 CameraDir;//[Offset: 0x10, Size: 0xc]
	AttackId AttackId;//[Offset: 0x1c, Size: 0x8]
	float ClientRealTimeSec;//[Offset: 0x24, Size: 0x4]
	Vector_NetQuantize100 CharacterDir;//[Offset: 0x28, Size: 0xc]
	float Pitch;//[Offset: 0x34, Size: 0x4]
	float Yaw;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: d8c7be28ae.DataAsset.Object
	621f28b790 6c3373d56b;//[Offset: 0x70, Size: 0x98]
	d149c0361b e0c8fad787;//[Offset: 0x108, Size: 0x68]

--------------------------------
Class: 621f28b790
	float RecoilScale_Vertical;//[Offset: 0x0, Size: 0x4]
	float VerticalRecoveryClamp;//[Offset: 0x4, Size: 0x4]
	float RecoilValue_Fall;//[Offset: 0x8, Size: 0x4]
	c835d7a808* RecoilCurve;//[Offset: 0x10, Size: 0x8]
	float VerticalRecoilMax;//[Offset: 0x18, Size: 0x4]
	float HorizontalTendency;//[Offset: 0x1c, Size: 0x4]
	Vector2D RecoilBlendInInMap;//[Offset: 0x20, Size: 0x8]
	float RecoilValue_Climb;//[Offset: 0x28, Size: 0x4]
	int BulletsPerSwitch;//[Offset: 0x2c, Size: 0x4]
	Vector2D RecoilStartTimeInMap;//[Offset: 0x30, Size: 0x8]
	float RecoilModifier_InVehicle;//[Offset: 0x38, Size: 0x4]
	float RecoilSpeed_Vertical;//[Offset: 0x3c, Size: 0x4]
	float TimePerSwitch;//[Offset: 0x40, Size: 0x4]
	float VerticalRecoveryMax;//[Offset: 0x44, Size: 0x4]
	float RecoilHorizontalMinScalar;//[Offset: 0x48, Size: 0x4]
	float RecoilModifier_Crouch;//[Offset: 0x4c, Size: 0x4]
	float RecoilModifier_Stand;//[Offset: 0x50, Size: 0x4]
	float VerticalRecoveryModifier;//[Offset: 0x54, Size: 0x4]
	float 228e6cc8ce;//[Offset: 0x58, Size: 0x4]
	float 1f56395de6;//[Offset: 0x5c, Size: 0x4]
	float RecoverySpeed_Vertical;//[Offset: 0x60, Size: 0x4]
	bool bSwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	Vector2D RecoilStartTimeOutMap;//[Offset: 0x68, Size: 0x8]
	float VerticalRecoilRecoveryMin;//[Offset: 0x70, Size: 0x4]
	float RecoilSpeed_Horizontal;//[Offset: 0x74, Size: 0x4]
	float RightMax;//[Offset: 0x78, Size: 0x4]
	float VerticalRecoilVariation;//[Offset: 0x7c, Size: 0x4]
	float RecoilScale_Horizontal;//[Offset: 0x80, Size: 0x4]
	float LeftMax;//[Offset: 0x84, Size: 0x4]
	Vector2D RecoilBlendInOutMap;//[Offset: 0x88, Size: 0x8]
	float VerticalRecoilMin;//[Offset: 0x90, Size: 0x4]
	float RecoilModifier_Prone;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: d149c0361b
	class DamageType* DamageType;//[Offset: 0x0, Size: 0x8]
	float InitialSpeed;//[Offset: 0x8, Size: 0x4]
	bool bCanProduceCrackSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int 7ec0a53202;//[Offset: 0x10, Size: 0x4]
	float SimulationSubstepTime;//[Offset: 0x14, Size: 0x4]
	bool b81c793a66;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float VDragCoefficient;//[Offset: 0x1c, Size: 0x4]
	float c3ab6d470d;//[Offset: 0x20, Size: 0x4]
	float RangeModifier;//[Offset: 0x24, Size: 0x4]
	float 6279b41c09;//[Offset: 0x28, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x2c, Size: 0x4]
	bool bUseMaxDamageDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float BDS;//[Offset: 0x34, Size: 0x4]
	f8766139d1[] DamageRatioInfos;//[Offset: 0x38, Size: 0x10]
	bool bUseAdvancedBallistics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool 1157bc6121;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1]
	c835d7a808* 335b15adc7;//[Offset: 0x50, Size: 0x8]
	CurveFloat* 3f873ffb07;//[Offset: 0x58, Size: 0x8]
	float TravelDistanceMax;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: f8766139d1
	float 2cb4b13518;//[Offset: 0x0, Size: 0x4]
	enum 9541913f0e;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: c65baa533b
	<enum,6c24e79d2c> 40585d0a45;//[Offset: 0x0, Size: 0x50]
	bool 259b791d87;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: 6c24e79d2c.fa72ce9067
	float d4e000e7de;//[Offset: 0xb0, Size: 0x4]
	<int,enum> 4329b1ba30;//[Offset: 0xb8, Size: 0x50]
	<int,float> 64157fa53c;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: 15195a586a.DataAsset.Object
	61d4f50818 61d4f50818;//[Offset: 0x70, Size: 0x78]
	5370679e50 5370679e50;//[Offset: 0xe8, Size: 0x1a8]
	GunAutoFireConfig AutoFireConfig;//[Offset: 0x290, Size: 0x20]
	12e789cf4b eec484f1a7;//[Offset: 0x2b0, Size: 0x94]
	a329180c4d a329180c4d;//[Offset: 0x348, Size: 0x398]

--------------------------------
Class: 61d4f50818
	float 2f6ec8f195;//[Offset: 0x0, Size: 0x4]
	float 2bdd5a3e29;//[Offset: 0x4, Size: 0x4]
	float 976f704a31;//[Offset: 0x8, Size: 0x4]
	float a1516c67bc;//[Offset: 0xc, Size: 0x4]
	float 4eb26ba742;//[Offset: 0x10, Size: 0x4]
	float 453ae10b23;//[Offset: 0x14, Size: 0x4]
	float 3801ff16fb;//[Offset: 0x18, Size: 0x4]
	float ad7bf5860c;//[Offset: 0x1c, Size: 0x4]
	float e450899a55;//[Offset: 0x20, Size: 0x4]
	float ca5d4bb587;//[Offset: 0x24, Size: 0x4]
	float 457a4906ec;//[Offset: 0x28, Size: 0x4]
	float 1b0ff89257;//[Offset: 0x2c, Size: 0x4]
	float 950d744b13;//[Offset: 0x30, Size: 0x4]
	float DeviationInVehicleHip;//[Offset: 0x34, Size: 0x4]
	float e04d9c4f08;//[Offset: 0x38, Size: 0x4]
	float MOA;//[Offset: 0x3c, Size: 0x4]
	float 5642190ec2;//[Offset: 0x40, Size: 0x4]
	float bf09c7c624;//[Offset: 0x44, Size: 0x4]
	float cd9db4d91c;//[Offset: 0x48, Size: 0x4]
	float aefc82268d;//[Offset: 0x4c, Size: 0x4]
	float 7fa7d5995b;//[Offset: 0x50, Size: 0x4]
	float 8aa9e0692c;//[Offset: 0x54, Size: 0x4]
	float 61b20ffd1f;//[Offset: 0x58, Size: 0x4]
	float 2c74820659;//[Offset: 0x5c, Size: 0x4]
	float bfc3b07422;//[Offset: 0x60, Size: 0x4]
	float fc9afa8fa1;//[Offset: 0x64, Size: 0x4]
	float c24b20f2c7;//[Offset: 0x68, Size: 0x4]
	float d441916684;//[Offset: 0x6c, Size: 0x4]
	float 18ba5e78e0;//[Offset: 0x70, Size: 0x4]
	float 2642193219;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: 5370679e50
	float f6226f535d;//[Offset: 0x0, Size: 0x4]
	bool 2784cb09d8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	CameraAnim* 8013523938;//[Offset: 0x8, Size: 0x8]
	Vector WeaponOffsetInCollisionLower_Reload;//[Offset: 0x10, Size: 0xc]
	AnimMontage* CharacterReloadUseSubMag;//[Offset: 0x20, Size: 0x8]
	Vector2D 5776940023;//[Offset: 0x28, Size: 0x8]
	AnimMontage* CharacterSpeedReloadTactical;//[Offset: 0x30, Size: 0x8]
	AnimMontage* CharacterReloadTactical;//[Offset: 0x38, Size: 0x8]
	AnimMontage* WeaponSpeedReloadCharge;//[Offset: 0x40, Size: 0x8]
	AnimMontage* WeaponReloadCharge;//[Offset: 0x48, Size: 0x8]
	AnimMontage* 5d26ccdb80;//[Offset: 0x50, Size: 0x8]
	float d3a9b0fa4e;//[Offset: 0x58, Size: 0x4]
	class MatineeCameraShake* fd17ddf380;//[Offset: 0x60, Size: 0x8]
	AnimMontage* 89a83242b1;//[Offset: 0x68, Size: 0x8]
	float 3ab1f8441f;//[Offset: 0x70, Size: 0x4]
	float 974028bca2;//[Offset: 0x74, Size: 0x4]
	float 41dec86560;//[Offset: 0x78, Size: 0x4]
	float f80ae8db3f;//[Offset: 0x7c, Size: 0x4]
	BlendSpaceBase* f76eca773b;//[Offset: 0x80, Size: 0x8]
	AnimMontage* e1d67b09de;//[Offset: 0x88, Size: 0x8]
	Vector WeaponOffsetInCollisionUpper_Reload;//[Offset: 0x90, Size: 0xc]
	AnimMontage* c9b9d8f1fd;//[Offset: 0xa0, Size: 0x8]
	BlendSpace1D* 899d195ab6;//[Offset: 0xa8, Size: 0x8]
	AnimMontage* b531f7cc7f;//[Offset: 0xb0, Size: 0x8]
	AnimMontage* WeaponReloadTactical;//[Offset: 0xb8, Size: 0x8]
	int cc3555af39;//[Offset: 0xc0, Size: 0x4]
	AnimMontage* Fire;//[Offset: 0xc8, Size: 0x8]
	Vector 94ac7e319b;//[Offset: 0xd0, Size: 0xc]
	float 729d1d844b;//[Offset: 0xdc, Size: 0x4]
	float 7594b5c2d1;//[Offset: 0xe0, Size: 0x4]
	bool 95eab063f4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	float ReloadDurationRefillSubMag;//[Offset: 0xe8, Size: 0x4]
	float ReloadDurationUseSubMag;//[Offset: 0xec, Size: 0x4]
	Vector2D 3a23c29836;//[Offset: 0xf0, Size: 0x8]
	float 9f6df2ed4d;//[Offset: 0xf8, Size: 0x4]
	enum 24ce5d79bb;//[Offset: 0xfc, Size: 0x1]
	float e11c1410e1;//[Offset: 0x100, Size: 0x4]
	AnimMontage* CharacterReloadCharge;//[Offset: 0x108, Size: 0x8]
	class MatineeCameraShake* 4c99b946ed;//[Offset: 0x110, Size: 0x8]
	float c1b34fc846;//[Offset: 0x118, Size: 0x4]
	class MatineeCameraShake* 20325efd47;//[Offset: 0x120, Size: 0x8]
	float cc01fe8c1f;//[Offset: 0x128, Size: 0x4]
	AnimMontage* WeaponSpeedReloadTactical;//[Offset: 0x130, Size: 0x8]
	AnimMontage* CharacterReloadRefillSubMag;//[Offset: 0x138, Size: 0x8]
	float 8146cca98c;//[Offset: 0x140, Size: 0x4]
	float ReloadDurationTactical;//[Offset: 0x144, Size: 0x4]
	enum ReloadDirectionInCollision;//[Offset: 0x148, Size: 0x1]
	class MatineeCameraShake* 4aa8f6e1f4;//[Offset: 0x150, Size: 0x8]
	float 56af392e7c;//[Offset: 0x158, Size: 0x4]
	AnimMontage* CharacterSpeedReloadCharge;//[Offset: 0x160, Size: 0x8]
	bool b74b43adf8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool ecbe1adf59;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	float ReloadDurationCharge;//[Offset: 0x16c, Size: 0x4]
	float 4e048e6f79;//[Offset: 0x170, Size: 0x4]
	Vector 58874c33ea;//[Offset: 0x174, Size: 0xc]
	bool 1b4a2a4f71;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool 31a759ed9b;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	AnimMontage* Reload;//[Offset: 0x188, Size: 0x8]
	AnimMontage* 92356c25b8;//[Offset: 0x190, Size: 0x8]
	Vector 7c5a1ebacc;//[Offset: 0x198, Size: 0xc]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	BlendParameter 13249eec22;//[Offset: 0xc8, Size: 0x20]
	InterpolationParameter f122ad496a;//[Offset: 0x128, Size: 0x8]
	897625ea0e[] edeec3c7d0;//[Offset: 0x140, Size: 0x10]
	float AnimLength;//[Offset: 0x150, Size: 0x4]
	cb3c8abb9f[] f8caea7efc;//[Offset: 0x158, Size: 0x10]
	BlendSample[] SampleData;//[Offset: 0x170, Size: 0x10]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: 897625ea0e
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float 093c81d052;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: cb3c8abb9f
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: GunAutoFireConfig
	float AutoFireDelayTime;//[Offset: 0x0, Size: 0x4]
	float MinDistance;//[Offset: 0x4, Size: 0x4]
	float MaxDistance;//[Offset: 0x8, Size: 0x4]
	enum[] EnabledFireModeTypes;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: 12e789cf4b
	float a5a30dcc12;//[Offset: 0x0, Size: 0x4]
	6b2a21e483 84a08c63bf;//[Offset: 0x4, Size: 0x48]
	6b2a21e483 f48938b3e9;//[Offset: 0x4c, Size: 0x48]

--------------------------------
Class: 6b2a21e483
	float 696d841303;//[Offset: 0x0, Size: 0x4]
	float 9213cf4124;//[Offset: 0x4, Size: 0x4]
	float 1f90407d3d;//[Offset: 0x8, Size: 0x4]
	float 5a942016a8;//[Offset: 0xc, Size: 0x4]
	float dfe85247b9;//[Offset: 0x10, Size: 0x4]
	float Speed;//[Offset: 0x14, Size: 0x4]
	float 118aa8a323;//[Offset: 0x18, Size: 0x4]
	float 1118b81424;//[Offset: 0x1c, Size: 0x4]
	float e141ae06fd;//[Offset: 0x20, Size: 0x4]
	float 2058c26d6c;//[Offset: 0x24, Size: 0x4]
	float ecc3623f86;//[Offset: 0x28, Size: 0x4]
	float c54d36662d;//[Offset: 0x2c, Size: 0x4]
	float 3f49dd2c81;//[Offset: 0x30, Size: 0x4]
	float 88eb89f4d9;//[Offset: 0x34, Size: 0x4]
	float 7c5a6606e6;//[Offset: 0x38, Size: 0x4]
	float dc05fc47f5;//[Offset: 0x3c, Size: 0x4]
	float 64b9c80583;//[Offset: 0x40, Size: 0x4]
	float 6d1723297f;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: a329180c4d
	int cc62c79f4b;//[Offset: 0x0, Size: 0x4]
	float 237b0f5e83;//[Offset: 0x4, Size: 0x4]
	ParticleSystem* 6add357546;//[Offset: 0x8, Size: 0x8]
	bool f2b99e80bd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float NoAnimReloadDuration;//[Offset: 0x14, Size: 0x4]
	float 1e3154870a;//[Offset: 0x18, Size: 0x4]
	float 10f882fe05;//[Offset: 0x1c, Size: 0x4]
	c92de2fbb3* c92de2fbb3;//[Offset: 0x20, Size: 0x8]
	bool db215aba95;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum[] FiringModes;//[Offset: 0x30, Size: 0x10]
	float 9679861642;//[Offset: 0x40, Size: 0x4]
	int c75e7bac2a;//[Offset: 0x44, Size: 0x4]
	bool 6ab299cdc4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FName MuzzleAttachPoint;//[Offset: 0x4c, Size: 0x8]
	bool bUseTimeBetweenBursts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	float fea4c9e001;//[Offset: 0x58, Size: 0x4]
	float AutoReloadDelay;//[Offset: 0x5c, Size: 0x4]
	ParticleSystem* 88463c1352;//[Offset: 0x60, Size: 0x8]
	Vector 565547d73f;//[Offset: 0x68, Size: 0xc]
	Vector 7846e9e566;//[Offset: 0x74, Size: 0xc]
	CurveFloat* fac4538aee;//[Offset: 0x80, Size: 0x8]
	Vector 5465a1749c;//[Offset: 0x88, Size: 0xc]
	float c06a25136a;//[Offset: 0x94, Size: 0x4]
	c92de2fbb3* f0a7c19629;//[Offset: 0x98, Size: 0x8]
	float TimeBetweenShots;//[Offset: 0xa0, Size: 0x4]
	Vector e484d97a58;//[Offset: 0xa4, Size: 0xc]
	int ef68a891b2;//[Offset: 0xb0, Size: 0x4]
	class XtrmMuzzleLightFx* 6dfc01356a;//[Offset: 0xb8, Size: 0x8]
	float f6436665c1;//[Offset: 0xc0, Size: 0x4]
	bool bCanAmmoFullLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	float 7c03f89ec4;//[Offset: 0xdc, Size: 0x4]
	ParticleSystem* 97c8c30594;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* 656d71577b;//[Offset: 0xe8, Size: 0x8]
	bool 97ad5ce280;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	float 0fb2058770;//[Offset: 0xf4, Size: 0x4]
	int ef3c1d606b;//[Offset: 0xf8, Size: 0x4]
	float 1d686b4106;//[Offset: 0xfc, Size: 0x4]
	bool 68e491952c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float fad5265643;//[Offset: 0x104, Size: 0x4]
	FName 3d5999eaca;//[Offset: 0x108, Size: 0x8]
	bool 59844536af;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	int a55e81fcee;//[Offset: 0x114, Size: 0x4]
	float 8ca9f56545;//[Offset: 0x118, Size: 0x4]
	float 726162fcfa;//[Offset: 0x11c, Size: 0x4]
	Vector 48791c2b15;//[Offset: 0x120, Size: 0xc]
	Vector c8359c37a4;//[Offset: 0x12c, Size: 0xc]
	bool c52e62a97d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	Vector 144373d20d;//[Offset: 0x13c, Size: 0xc]
	CurveFloat* 94086a5cc9;//[Offset: 0x148, Size: 0x8]
	<int,c0114e2bb3> bf8e3fdfa7;//[Offset: 0x150, Size: 0x50]
	float f8aa1fce66;//[Offset: 0x1a0, Size: 0x4]
	float 37bd57df1f;//[Offset: 0x1a4, Size: 0x4]
	Vector 0f8a339f31;//[Offset: 0x1a8, Size: 0xc]
	FName ba173dd3ca;//[Offset: 0x1b4, Size: 0x8]
	ParticleSystem* ObserverTracerClass;//[Offset: 0x1c0, Size: 0x8]
	int BulletPerFiring;//[Offset: 0x1c8, Size: 0x4]
	bool bAmmoAttachedToWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	float f27a6a8633;//[Offset: 0x1d0, Size: 0x4]
	ParticleSystem* d060253a45;//[Offset: 0x1d8, Size: 0x8]
	float 64e35af861;//[Offset: 0x1e0, Size: 0x4]
	int AmmoPerClip;//[Offset: 0x1e4, Size: 0x4]
	bool 489cc2d3e7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool 3b49110ab8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	float e4b48204be;//[Offset: 0x1ec, Size: 0x4]
	<enum,float> OverlapTimeBetweenShotsMap;//[Offset: 0x1f0, Size: 0x50]
	float 1c2e918473;//[Offset: 0x240, Size: 0x4]
	bool 3086571097;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	float 854842ff96;//[Offset: 0x248, Size: 0x4]
	float TimeBetweenBursts;//[Offset: 0x24c, Size: 0x4]
	bool 480d8e1cd0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool f3311ab99c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	66b032d675 ReplaceMuzzleAttachPoint;//[Offset: 0x254, Size: 0x14]
	float ba7d0bb91f;//[Offset: 0x268, Size: 0x4]
	float 24af241788;//[Offset: 0x26c, Size: 0x4]
	float FiringBulletsSpread;//[Offset: 0x270, Size: 0x4]
	bool dc45354255;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	float a960349ebf;//[Offset: 0x278, Size: 0x4]
	float 8b1562d543;//[Offset: 0x27c, Size: 0x4]
	float 80901b20aa;//[Offset: 0x280, Size: 0x4]
	float 865d3e461a;//[Offset: 0x284, Size: 0x4]
	uint32 ObserverTracerSpawnInterval;//[Offset: 0x288, Size: 0x4]
	enum 77ae3964ce;//[Offset: 0x28c, Size: 0x1]
	float 09c80e2f87;//[Offset: 0x290, Size: 0x4]
	bool 0bf8d0370f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	bool bUseSubMagReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1]
	Vector ad024ee1bf;//[Offset: 0x298, Size: 0xc]
	<int,d1bb79034f> 2e9537b5d6;//[Offset: 0x2a8, Size: 0x50]
	float 226d20dd15;//[Offset: 0x2f8, Size: 0x4]
	float 59d113e195;//[Offset: 0x2fc, Size: 0x4]
	FName c33ef2e0df;//[Offset: 0x300, Size: 0x8]
	FName 482822bc42;//[Offset: 0x308, Size: 0x8]
	FName e063620596;//[Offset: 0x310, Size: 0x8]
	bool 0d34643a3a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	FName 8999fc0cf8;//[Offset: 0x31c, Size: 0x8]
	float 8ddc90cbf7;//[Offset: 0x324, Size: 0x4]
	Vector 3ccd33e9ac;//[Offset: 0x328, Size: 0xc]
	float 1ec059ccbe;//[Offset: 0x334, Size: 0x4]
	<int,Vector2D> 512278df60;//[Offset: 0x338, Size: 0x50]
	int AmmoPerSubClip;//[Offset: 0x388, Size: 0x4]
	Vector bdd142231e;//[Offset: 0x38c, Size: 0xc]

--------------------------------
Class: c0114e2bb3
	float 82687dfb0c;//[Offset: 0x0, Size: 0x4]
	enum 3b440f3e18;//[Offset: 0x4, Size: 0x1]
	float 16a8a5cbd0;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: d1bb79034f
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	float Size;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: eacd60ebfc
	enum 92cd35969a;//[Offset: 0x0, Size: 0x1]
	uint32 da8301b054;//[Offset: 0x4, Size: 0x4]
	uint32 AmmoInSubClip;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: bcf039bdc5
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ScopeReticleDirectingInfo
	ReticleDirectingData CachedReticleDirectingData;//[Offset: 0x40, Size: 0x18]

--------------------------------
Class: WeaponSkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	<enum,ScopeMeshCompContainer> ScopeMeshCompMap;//[Offset: 0x1188, Size: 0x50]
	StaticMeshComponent* MergedPartComp;//[Offset: 0x11d8, Size: 0x8]
	<enum,WeaponMeshPartInfo> MergeExceptParts;//[Offset: 0x11f0, Size: 0x50]
	<enum,MergeExceptPartCompContainer> MergeExceptCompMap;//[Offset: 0x1240, Size: 0x50]
	void OnRootComponentChanged(SceneComponent* UpdatedComponent, bool bIsRootComponent);// 0xffffff90c89e5002

--------------------------------
Class: ScopeMeshCompContainer
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x0, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MergeExceptPartCompContainer
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x0, Size: 0x8]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DisplayActorNames
	FString ActorName;//[Offset: 0x0, Size: 0x10]
	Vector ActorLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: c6e2e723af
	uint32 MissionID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: 292ff89a88.b7e82d977d.ef56ffaf87.59a7fd3b5c
	bool bIsScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	FString DamageCauserName;//[Offset: 0x60, Size: 0x10]
	FString CharacterStance;//[Offset: 0x70, Size: 0x10]
	bool bIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: b7e82d977d.ef56ffaf87.59a7fd3b5c
	8abce2ed3e Params;//[Offset: 0x24, Size: 0x14]
	Vector Origin;//[Offset: 0x38, Size: 0xc]
	HitResult[] 30f18d96b8;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: ef56ffaf87.59a7fd3b5c
	Vector 1487b7e1a1;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: 59a7fd3b5c
	AttackId AttackId;//[Offset: 0x8, Size: 0x8]
	class DamageType* 6b2162203d;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: 8abce2ed3e
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	float MinimumDamage;//[Offset: 0x4, Size: 0x4]
	float InnerRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	float DamageFalloff;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: 4616e87b73.de2c758a4b.59a7fd3b5c
	byte 2fdffb1527;//[Offset: 0xfc, Size: 0x1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]
	bool bIsScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe, Size: 0x1]
	bool bIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff, Size: 0x1]
	FString CharacterStance;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: de2c758a4b.59a7fd3b5c
	float Damage;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantizeNormal 948ed1d220;//[Offset: 0x1c, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x28, Size: 0xd4]

--------------------------------
Class: ItemPackagePickUpEvent
	int Index;//[Offset: 0x0, Size: 0x4]
	enum PackageInfoType;//[Offset: 0x4, Size: 0x1]
	int NewStackCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 6158ab16f2.Object

--------------------------------
Class: RecommendUserInfo
	FString Recommendee;//[Offset: 0x0, Size: 0x10]
	FString[] RecommendersName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: XtrmDroneHandlingComponent.ActorComponent.Object

--------------------------------
Class: 050742ce9d.Object
	a8dfd49af6* 99a172bd21;//[Offset: 0xd8, Size: 0x8]
	World* 508316d2c1;//[Offset: 0xe0, Size: 0x8]
	void 6e5f3c5abd(const XtrmWeapon_Gun* InWeapon, const bef22f2b98 InCurveData);// 0xffffff90c89e5002
	void 4a6c16a898(const XtrmWeapon_Gun* InWeapon);// 0xffffff90c89e5001

--------------------------------
Class: a8dfd49af6.Object

--------------------------------
Class: bef22f2b98
	Vector2D[] 47aff3c5d3;//[Offset: 0x0, Size: 0x10]
	Vector2D[] bc54659672;//[Offset: 0x10, Size: 0x10]
	float 39d649ca41;//[Offset: 0x20, Size: 0x4]
	float 457472d521;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: VoiceInGameComponent.VoiceBaseComponent.ActorComponent.Object
	void 0ee2720b26(const int InTeamId);// 0xffffff90c89e5001
	void ClientChangeChannelForObserver(const int InTeamId);// 0xffffff90c89e5001
	void fba2db9e48(const int InTeamId);// 0xffffff90c89e5001

--------------------------------
Class: VoiceBaseComponent.ActorComponent.Object
	void 4ccd0acee2();// 0xffffff90c89e5000
	void f3351b3e72();// 0xffffff90c89e5000
	void 95dbd5b947();// 0xffffff90c89e5000
	void 1ad40b2afc();// 0xffffff90c89e5000
	void 7a8b84d80a(const bool bNeedLoad);// 0xffffff90c89e5001
	void e6891432ec(FString InUserID, int InTeamNum);// 0xffffff90c89e5002
	void 89c75e2f41(bool InbStopProgressUpdate);// 0xffffff90c89e5001
	void 8039ed967f(FString InSessionId, const int InTeamId, FString AuthToken);// 0xffffff90c89e5003
	void 6172672932(const int MemberTeamId, FString InUserID);// 0xffffff90c89e5002

--------------------------------
Class: e71fe1ed8a
	float Z;//[Offset: 0x0, Size: 0x4]
	enum Level;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ProjectileCollectComponent.ActorComponent.Object
	enum TargetType;//[Offset: 0x148, Size: 0x1]
	float CheckTeammateProjectileDistanceSqrt;//[Offset: 0x170, Size: 0x4]

--------------------------------
Class: ItemPackageRegisterComponent.ActorComponent.Object

--------------------------------
Class: RotationInputScaleInfo
	float RightInputScale;//[Offset: 0x0, Size: 0x4]
	float UpInputScale;//[Offset: 0x4, Size: 0x4]
	float LeftInputScale;//[Offset: 0x8, Size: 0x4]
	float DownInputScale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: cb17bf3424.670ad3cee6.Subsystem.Object
	<SceneComponent*,2341faa37d> e36359e08b;//[Offset: 0xc0, Size: 0x50]

--------------------------------
Class: 670ad3cee6.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: 2341faa37d

--------------------------------
Class: TslPlayerCameraManager.PlayerCameraManager.Actor.Object
	PostProcessSettings 1461dce5c2;//[Offset: 0x2870, Size: 0x550]

--------------------------------
Class: FriendAndEnemyPlayerState.BattleRoyalePlayerState.XtrmPlayerState.PlayerState.Info.Actor.Object
	int c492f6ebc4;//[Offset: 0xc58, Size: 0x4]
	TeamMemberInfo 0800efeaaf;//[Offset: 0xc5c, Size: 0x8]
	bool 1257a1ea80;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 0x1]
	int InteractorTeamNumber;//[Offset: 0xc74, Size: 0x4]
	void OnRep_CaptureCount();// 0xffffff90c89e5000

--------------------------------
Class: BattleRoyalePlayerState.XtrmPlayerState.PlayerState.Info.Actor.Object
	float DroneStoreReusableServerTime;//[Offset: 0xc40, Size: 0x4]
	LastDeathLocation LastDeathLocation;//[Offset: 0xc44, Size: 0x10]
	void OnRep_LastDeathLocation();// 0xffffff90c89e5000

--------------------------------
Class: LastDeathLocation
	Vector Location;//[Offset: 0x0, Size: 0xc]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: FriendAndEnemyTeamMemberState.BattleRoyaleTeamMemberState.TeamMemberState.Actor.Object
	bool adf9e5c8c3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1]
	void OnRep_IsCapturedMember();// 0xffffff90c89e5000
	bool GetIsCapturedMember();// 0xffffff90c89e5001

--------------------------------
Class: BattleRoyaleTeamMemberState.TeamMemberState.Actor.Object
	Vector_NetQuantize100 520846fcfd;//[Offset: 0x4c4, Size: 0xc]
	TeamMemberInfo 2623b8cfc8;//[Offset: 0x4d0, Size: 0x8]
	enum 94ecf92999;//[Offset: 0x4d8, Size: 0x1]
	TeamMemberInfo a08fdddb0f;//[Offset: 0x4dc, Size: 0x8]
	a7b38bd260 a7b38bd260;//[Offset: 0x4f8, Size: 0x18]
	Vector_NetQuantize100 14b01925b4;//[Offset: 0x510, Size: 0xc]
	bool a518085a75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]
	void OnRep_SkydiveFollowInfo();// 0xffffff90c89e5000
	void OnRep_IsBlockingInvitation(out const bool bWasBlocking);// 0xffffff90c89e5001
	void OnRep_FollowTransfererMemberInfo(out const TeamMemberInfo OldTransfererMemberInfo);// 0xffffff90c89e5001
	void OnRep_FollowInviterMemberInfo(out const TeamMemberInfo OldInviterMemberInfo);// 0xffffff90c89e5001
	void OnRep_DeliveryDroneTeamIconType();// 0xffffff90c89e5000

--------------------------------
Class: TeamMemberState.Actor.Object
	Vector_NetQuantize100 de0f6c62a2;//[Offset: 0x2c4, Size: 0xc]
	e6bdc9da8d 14ba67b8de;//[Offset: 0x2d0, Size: 0x2]
	ChasingBulletMarkerInfo[] ChasingBulletMarkers;//[Offset: 0x2d8, Size: 0x10]
	Rotator 4e66ee1cd6;//[Offset: 0x2e8, Size: 0xc]
	de0d5ecf85 de0d5ecf85;//[Offset: 0x308, Size: 0x10]
	bool 8cc4f0975f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool 74f1f78f4a;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	bool 2ea2cf821b;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x344, Size: 0x1]
	bool fdd0ff5aa6;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x344, Size: 0x1]
	bool bIsParachuting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x344, Size: 0x1]
	bool 1dc5fd76b3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x344, Size: 0x1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x344, Size: 0x1]
	bool 4d5a370fc0;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x344, Size: 0x1]
	bool 6d4350d3e9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x345, Size: 0x1]
	bool ccb87b869c;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x345, Size: 0x1]
	byte HealthMax;//[Offset: 0x3a0, Size: 0x1]
	float 1c4c0cfae8;//[Offset: 0x3a4, Size: 0x4]
	bool 08e7460190;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 0x1]
	bool bIsLogOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3aa, Size: 0x1]
	Vector_NetQuantize100 ec7e04cbd2;//[Offset: 0x420, Size: 0xc]
	int RemainReviveSelfCount;//[Offset: 0x42c, Size: 0x4]
	int bf864899fb;//[Offset: 0x438, Size: 0x4]
	8bf5fa75e7 8bf5fa75e7;//[Offset: 0x440, Size: 0x10]
	uint32 VolumeMinimapID;//[Offset: 0x450, Size: 0x4]
	TeamMemberInfo MemberInfo;//[Offset: 0x464, Size: 0x8]
	enum MatchResultJudgement;//[Offset: 0x484, Size: 0x1]
	Rotator 38c9335655;//[Offset: 0x488, Size: 0xc]
	28eb3571ba b2c465466f;//[Offset: 0x494, Size: 0x14]
	ReviveEventInfo ReviveEventInfo;//[Offset: 0x4a8, Size: 0x10]
	TransportAircraft* RidingTransportAircraft;//[Offset: 0x4b8, Size: 0x8]
	void UpdateWeaponFired();// 0xffffff90c89e5000
	void 19aa17abe1(const 8bf5fa75e7 InMapWayPoint);// 0xffffff90c89e5001
	void 51366b188b(const de0d5ecf85 InMapMarker);// 0xffffff90c89e5001
	void OnRep_WorldSecondsOnDying();// 0xffffff90c89e5000
	void OnRep_WayPoint();// 0xffffff90c89e5000
	void OnRep_ReviveInfo();// 0xffffff90c89e5000
	void OnRep_PlayerLocation();// 0xffffff90c89e5000
	void OnRep_MemberInfo(out const TeamMemberInfo OldMemberInfo);// 0xffffff90c89e5001
	void OnRep_MatchResultJudgement();// 0xffffff90c89e5000
	void OnRep_MapMarker();// 0xffffff90c89e5000
	void OnRep_LatestRadioMessageMarker();// 0xffffff90c89e5000
	void OnRep_IsWeaponFired();// 0xffffff90c89e5000
	void OnRep_IsSkydiving();// 0xffffff90c89e5000
	void OnRep_IsParachuting();// 0xffffff90c89e5000
	void OnRep_IsLogOut();// 0xffffff90c89e5000
	void OnRep_IsLeaveTheGame();// 0xffffff90c89e5000
	void OnRep_IsInVehicle();// 0xffffff90c89e5000
	void OnRep_IsInCar();// 0xffffff90c89e5000
	void OnRep_IsInAircraft();// 0xffffff90c89e5000
	void OnRep_IsGroggying();// 0xffffff90c89e5000
	void OnRep_IsDying();// 0xffffff90c89e5000
	void OnRep_HealthMax();// 0xffffff90c89e5000
	void OnRep_Health();// 0xffffff90c89e5000
	void OnRep_ChasingBulletMarkers();// 0xffffff90c89e5000
	void OnRep_ChangeReviveCount();// 0xffffff90c89e5000
	void OnMatchStarted();// 0xffffff90c89e5000
	bool IsShowMapMarker();// 0xffffff90c89e5001
	float GetWorldSecondsOnDying();// 0xffffff90c89e5001
	TransportAircraft* GetRidingTransportAircraft();// 0xffffff90c89e5001
	Rotator GetPlayerRotation();// 0xffffff90c89e5001
	Vector GetPlayerLocation();// 0xffffff90c89e5001
	enum GetMapMarkerType();// 0xffffff90c89e5001
	Vector GetMapMarkerPosition();// 0xffffff90c89e5001
	bool GetIsSkydiving();// 0xffffff90c89e5001
	bool GetIsParachuting();// 0xffffff90c89e5001
	bool GetIsLogOut();// 0xffffff90c89e5001
	bool GetIsLeaveTheGame();// 0xffffff90c89e5001
	bool GetIsInVehicle();// 0xffffff90c89e5001
	bool GetIsInCar();// 0xffffff90c89e5001
	bool GetIsInAircraft();// 0xffffff90c89e5001
	bool GetIsGroggying();// 0xffffff90c89e5001
	bool GetIsDying();// 0xffffff90c89e5001
	bool GetIsControlDrone();// 0xffffff90c89e5001
	float GetHealthMax();// 0xffffff90c89e5001
	float GetHealth();// 0xffffff90c89e5001
	Rotator GetDroneRotation();// 0xffffff90c89e5001
	Vector GetDroneLocation();// 0xffffff90c89e5001

--------------------------------
Class: a7b38bd260
	TeamMemberInfo Target;//[Offset: 0x0, Size: 0x8]
	TeamMemberInfo[] 9722d80717;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: e6bdc9da8d
	byte Health;//[Offset: 0x0, Size: 0x1]
	enum Reason;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ChasingBulletMarkerInfo
	float ChasingIconTime;//[Offset: 0x0, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	float StartTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: 8bf5fa75e7
	93486796e5[] WayPointPositions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 93486796e5.Vector2D

--------------------------------
Class: de0d5ecf85
	Vector MarkerPosition;//[Offset: 0x0, Size: 0xc]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	enum MarkerType;//[Offset: 0xd, Size: 0x1]

--------------------------------
Class: 28eb3571ba
	enum MarkerType;//[Offset: 0x0, Size: 0x1]
	Vector MarkerPosition;//[Offset: 0x4, Size: 0xc]
	float ServerResetTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ReviveEventInfo
	enum EventTarget;//[Offset: 0x0, Size: 0x1]
	float EventStartTime;//[Offset: 0x4, Size: 0x4]
	float EventEndTime;//[Offset: 0x8, Size: 0x4]
	enum EventType;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TransportAircraft.Pawn.Actor.Object
	AkAudioEvent* c51a751b85;//[Offset: 0x3a8, Size: 0x40]
	SkinID e570383faa;//[Offset: 0x3ec, Size: 0x4]
	ab9871350c* 0330641f5a;//[Offset: 0x3f0, Size: 0x40]
	f5c9b7821f[] ControlPoints;//[Offset: 0x448, Size: 0x10]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	SplineComponent* SplineComponent;//[Offset: 0x460, Size: 0x8]
	Rotator ebe5926411;//[Offset: 0x468, Size: 0xc]
	TransportAircraftMovement* MovementComponent;//[Offset: 0x478, Size: 0x8]
	TransportAircraftSeatComponent* SeatComponent;//[Offset: 0x480, Size: 0x8]
	ArrowComponent* ArrowComponent;//[Offset: 0x4a8, Size: 0x8]
	XtrmCloudStartWidget* 8089c6ff3d;//[Offset: 0x4c0, Size: 0x8]
	AircraftRoute RouteInEjectionArea;//[Offset: 0x4cc, Size: 0x18]
	CameraAnim* 55adb381cd;//[Offset: 0x4e8, Size: 0x8]
	AircraftRoute AircraftRoute;//[Offset: 0x4f4, Size: 0x18]
	AkComponent* AkSoundCom;//[Offset: 0x520, Size: 0x8]
	float LandscapeGIHeight;//[Offset: 0x528, Size: 0x4]
	AkAudioEvent* ded5f35088;//[Offset: 0x540, Size: 0x40]
	StaticMeshComponent* MeshComponent;//[Offset: 0x588, Size: 0x8]
	class XtrmCloudStartWidget* d4f4c3590a;//[Offset: 0x590, Size: 0x8]
	void OnRep_SkinID();// 0xffffff90c89e5000
	void OnRep_IsVisible();// 0xffffff90c89e5000
	void OnLeaveAircraft();// 0xffffff90c89e5000

--------------------------------
Class: ab9871350c.EquipmentDataAsset.ItemDataAsset.8c272391a6.DataAsset.Object
	class SkydiveComponent* 1a8eb0c104;//[Offset: 0x6b0, Size: 0x40]

--------------------------------
Class: EquipmentDataAsset.ItemDataAsset.8c272391a6.DataAsset.Object
	683202cf8d 683202cf8d;//[Offset: 0x330, Size: 0xd]
	05c258823a c0a901d5e1;//[Offset: 0x340, Size: 0x20]
	05c258823a 8a53937ef1;//[Offset: 0x360, Size: 0x20]
	EquipmentItemData cde83ae459;//[Offset: 0x380, Size: 0x328]

--------------------------------
Class: 683202cf8d
	enum 3a2e519781;//[Offset: 0x0, Size: 0x1]
	enum 241de4fdb6;//[Offset: 0x1, Size: 0x1]
	enum 0aa4b3085f;//[Offset: 0x2, Size: 0x1]
	enum af21bac601;//[Offset: 0x3, Size: 0x1]
	enum 9ebd11a0dc;//[Offset: 0x4, Size: 0x1]
	enum c1358653a8;//[Offset: 0x5, Size: 0x1]
	byte 3c9d634729;//[Offset: 0x6, Size: 0x1]
	enum 25da4b2381;//[Offset: 0x7, Size: 0x1]
	enum 64ed98fbeb;//[Offset: 0x8, Size: 0x1]
	enum c980f11e99;//[Offset: 0x9, Size: 0x1]
	enum 36c89604cb;//[Offset: 0xa, Size: 0x1]
	enum 66244ec5f9;//[Offset: 0xb, Size: 0x1]
	enum 9f77433ac2;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: 05c258823a
	b20785a31e[] a5ee055e36;//[Offset: 0x0, Size: 0x10]
	b20785a31e 95d1723acb;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: b20785a31e
	uint32[] BitMask;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: EquipmentItemData
	enum fa7f4b9f67;//[Offset: 0x0, Size: 0x1]
	int b98e128066;//[Offset: 0x4, Size: 0x4]
	bool aab075fdf3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	AkAudioEvent* 92483b001d;//[Offset: 0x10, Size: 0x8]
	AkAudioEvent* 45e268ad67;//[Offset: 0x18, Size: 0x8]
	enum ArmorType;//[Offset: 0x20, Size: 0x1]
	bool 3517d6235c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool IsCostume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	enum 4825856e8e;//[Offset: 0x23, Size: 0x1]
	int 0bfc6754b4;//[Offset: 0x24, Size: 0x4]
	int 747a194bc7;//[Offset: 0x28, Size: 0x4]
	float 65fd334ee0;//[Offset: 0x2c, Size: 0x4]
	86956a90db[] e34d33e9bb;//[Offset: 0x50, Size: 0x10]
	SkeletalMesh* ChangeFemaleMesh;//[Offset: 0x60, Size: 0x40]
	SkeletalMesh* FemaleMesh;//[Offset: 0xa0, Size: 0x40]
	SkeletalMesh* 7dd2aab2ae;//[Offset: 0xe0, Size: 0x40]
	<int,297125c173> 7d0b924ddc;//[Offset: 0x120, Size: 0x50]
	86956a90db[] 4449319739;//[Offset: 0x170, Size: 0x10]
	enum b8957c18db;//[Offset: 0x180, Size: 0x1]
	uint32[] SetCostumeList;//[Offset: 0x188, Size: 0x10]
	4cb914cd14 4cb914cd14;//[Offset: 0x198, Size: 0x1]
	float b2f257634c;//[Offset: 0x19c, Size: 0x4]
	SkeletalMesh* a31db06f73;//[Offset: 0x1a0, Size: 0x40]
	SkeletalMesh* MaleMesh;//[Offset: 0x1e0, Size: 0x40]
	float 75e8c0139b;//[Offset: 0x220, Size: 0x4]
	bool bApplyCostumeSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	enum EquipSlotID;//[Offset: 0x225, Size: 0x1]
	bool 490b2cf923;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x226, Size: 0x1]
	enum SoundGroup;//[Offset: 0x227, Size: 0x1]
	int HiddenSlotBitmask;//[Offset: 0x228, Size: 0x4]
	SkeletalMesh* 43bdcc0619;//[Offset: 0x230, Size: 0x40]
	bool f3cac1c081;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	enum 1892a48b32;//[Offset: 0x271, Size: 0x1]
	float 825e7f8686;//[Offset: 0x274, Size: 0x4]
	float 2dfa2f9a41;//[Offset: 0x278, Size: 0x4]
	SkeletalMesh* ChangeMaleMesh;//[Offset: 0x280, Size: 0x40]
	d117b6ba3d* bc5fc5b0d9;//[Offset: 0x2c0, Size: 0x8]
	bool 9cb1e5ded7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bChangable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	SkeletalMesh* 165d46f5c5;//[Offset: 0x2d0, Size: 0x40]
	int[] cdab6b16d2;//[Offset: 0x310, Size: 0x10]

--------------------------------
Class: 86956a90db
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	float 8c4144ed0d;//[Offset: 0x18, Size: 0x4]
	float d1abbf7441;//[Offset: 0x1c, Size: 0x4]
	bool 4b70bf6096;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool 0a414bd692;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool 6c39927401;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	enum 1056f174c6;//[Offset: 0x23, Size: 0x1]

--------------------------------
Class: 297125c173
	Transform e7af703584;//[Offset: 0x0, Size: 0x30]
	Transform 50a2efb3d7;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: 4cb914cd14
	bool bRenderThermalScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: d117b6ba3d.7b7d5203b7.SkinDataAsset.8c272391a6.DataAsset.Object

--------------------------------
Class: f5c9b7821f

--------------------------------
Class: TransportAircraftMovement.SimpleInterpolationMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	void OnUpdateFlightPoint();// 0xffffff90c89e5000

--------------------------------
Class: SimpleInterpolationMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float ForceMoveTime;//[Offset: 0x1b0, Size: 0x4]
	bool fc0067bc8f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	Vector 23edccd6f4;//[Offset: 0x1bc, Size: 0xc]
	float LocationInterpTime;//[Offset: 0x1c8, Size: 0x4]
	float RotationInterpTime;//[Offset: 0x1d8, Size: 0x4]
	bool bUseSweepMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 0x1]
	Vector b34f273111;//[Offset: 0x1e0, Size: 0xc]
	Vector 323c53710d;//[Offset: 0x210, Size: 0xc]
	Vector f721134e29;//[Offset: 0x21c, Size: 0xc]
	bool bUseOnlyYawRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]

--------------------------------
Class: TransportAircraftSeatComponent.VehicleSeatComponent.ActorComponent.Object
	byte PassengerCount;//[Offset: 0x2a8, Size: 0x1]
	bool 6094c17b43;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	void OnRep_PassengerCount();// 0xffffff90c89e5000
	void OnRep_EnteredAtEjectionArea();// 0xffffff90c89e5000

--------------------------------
Class: VehicleSeatComponent.ActorComponent.Object
	bool bEntryAngleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	float MinEntryAngle;//[Offset: 0x120, Size: 0x4]
	float MaxTargetingRoll;//[Offset: 0x144, Size: 0x4]
	FName[] 5565a70ff2;//[Offset: 0x178, Size: 0x10]
	bool bRestrictTargetingRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	enum SeatUIType;//[Offset: 0x1a8, Size: 0x1]
	f72a0f1905[] 8e0e9f4315;//[Offset: 0x248, Size: 0x10]
	SeatData[] 2a0c96c14a;//[Offset: 0x270, Size: 0x10]
	void Ride(VehicleRiderComponent* Rider, const FName SeatTag);// 0xffffff90c89e5002
	void 455fc71813();// 0xffffff90c89e5000
	void 18ef0af630();// 0xffffff90c89e5000
	void Leave(VehicleRiderComponent* Rider, const FName SeatTag, bool bForce, bool bGetOut);// 0xffffff90c89e5004

--------------------------------
Class: f72a0f1905
	FName SeatTag;//[Offset: 0x0, Size: 0x8]
	XtrmCharacter* Passenger;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: SeatData
	FName Tag;//[Offset: 0x0, Size: 0x8]
	FName 401d624b64;//[Offset: 0x8, Size: 0x8]
	bool bHasAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	b6766ce2f1* b6766ce2f1;//[Offset: 0x18, Size: 0x8]
	FName 2d987bade9;//[Offset: 0x20, Size: 0x8]
	int SeatIndex;//[Offset: 0x28, Size: 0x4]
	enum[] bb917785a3;//[Offset: 0x30, Size: 0x10]
	492984fe74* 31e101ec05;//[Offset: 0x40, Size: 0x8]
	enum Type;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: b6766ce2f1.DataAsset.Object

--------------------------------
Class: 492984fe74.DataAsset.Object
	enum a003736f61;//[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: AircraftRoute
	Vector End;//[Offset: 0x0, Size: 0xc]
	Vector Start;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: FriendAndEnemyTeam.Team.Actor.Object
	int 7f8004ba99;//[Offset: 0x328, Size: 0x4]

--------------------------------
Class: Weather.Info.Actor.Object
	FName ede5f66827;//[Offset: 0x2b4, Size: 0x8]
	void OnUnloadWeatherLevelFinished();// 0xffffff90c89e5000
	void OnRep_WheatherName(out const FName PrevWeatherName);// 0xffffff90c89e5001
	void OnLoadWeatherLevelFinished();// 0xffffff90c89e5000

--------------------------------
Class: BP_FriendAndEnemyGameState_C.FriendAndEnemyGameState.BattleRoyaleGameState.XtrmGameState.GameState.GameStateBase.Info.Actor.Object
	RedZoneStateComponent* RedZoneState;//[Offset: 0x608, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x610, Size: 0x8]

--------------------------------
Class: FriendAndEnemyGameState.BattleRoyaleGameState.XtrmGameState.GameState.GameStateBase.Info.Actor.Object
	5ed732a66f[] 27677e4733;//[Offset: 0x5f8, Size: 0x10]

--------------------------------
Class: BattleRoyaleGameState.XtrmGameState.GameState.GameStateBase.Info.Actor.Object
	float 026d3aa644;//[Offset: 0x500, Size: 0x4]
	10ff501ed1[] 5413237ed9;//[Offset: 0x508, Size: 0x10]
	d932ad70a2[] d932ad70a2;//[Offset: 0x518, Size: 0x10]
	int NumAlivePlayers;//[Offset: 0x528, Size: 0x4]
	int NumAliveUsers;//[Offset: 0x52c, Size: 0x4]
	int NumAliveUserTeams;//[Offset: 0x53c, Size: 0x4]
	int NumAliveTeams;//[Offset: 0x540, Size: 0x4]
	AircraftRoutesComponent* AircraftRoutesComponent;//[Offset: 0x558, Size: 0x8]
	XtrmDroneStoreStatusComponent* DroneStoreStatusComponent;//[Offset: 0x560, Size: 0x8]
	BluezoneStateComponent* BluezoneStateComponent;//[Offset: 0x568, Size: 0x8]
	float 9b8dd003a1;//[Offset: 0x570, Size: 0x4]
	SoftClassPath fa5a48e0e3;//[Offset: 0x578, Size: 0x18]
	int 6638b98bae;//[Offset: 0x590, Size: 0x4]
	int edfa5bd395;//[Offset: 0x594, Size: 0x4]
	6ce681fe0b[] 0f8f293cd0;//[Offset: 0x598, Size: 0x10]
	float 970fa8dded;//[Offset: 0x5a8, Size: 0x4]
	float 9eab7f140e;//[Offset: 0x5ac, Size: 0x4]
	int WinDelayResultTime;//[Offset: 0x5d0, Size: 0x4]
	float a46ec9fc55;//[Offset: 0x5d4, Size: 0x4]
	float BlockzoneDamageInterval;//[Offset: 0x5e0, Size: 0x4]
	CarePackageSpawnInfo[] CarePackageSpawnInfos;//[Offset: 0x5e8, Size: 0x10]
	void OnRep_WalkieTalkieAvailableTime();// 0xffffff90c89e5000
	void OnRep_NumAliveUserTeams();// 0xffffff90c89e5000
	void OnRep_NumAliveTeams();// 0xffffff90c89e5000
	void OnRep_NumAlivePlayers();// 0xffffff90c89e5000
	void OnRep_DroneStoreStatusPerUser();// 0xffffff90c89e5000
	void OnRep_DroneStoreItemStocks();// 0xffffff90c89e5000
	void OnRep_DroneStoreCloseServerTime();// 0xffffff90c89e5000
	void OnRep_CarePackageSpawnInfos();// 0xffffff90c89e5000
	void AutoFollowLocalPlayer();// 0xffffff90c89e5000

--------------------------------
Class: XtrmGameState.GameState.GameStateBase.Info.Actor.Object
	float 5ff2b6eb9b;//[Offset: 0x324, Size: 0x4]
	bool bIsAFD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	float ReviveCastingUnitTime;//[Offset: 0x348, Size: 0x4]
	uint32 SubModeTypeFlags;//[Offset: 0x34c, Size: 0x4]
	float 141e09796e;//[Offset: 0x350, Size: 0x4]
	ObserverShareableState* ObserverShareableState;//[Offset: 0x358, Size: 0x8]
	float ba8f8b5314;//[Offset: 0x360, Size: 0x4]
	Team*[] TeamArray;//[Offset: 0x368, Size: 0x10]
	uint32 ContentsFeatureFlag;//[Offset: 0x378, Size: 0x4]
	float ParachuteAutoDeployAltitudeMultiplier;//[Offset: 0x37c, Size: 0x4]
	float RailVehicleStartTime;//[Offset: 0x380, Size: 0x4]
	FString RegionKey;//[Offset: 0x388, Size: 0x10]
	int TotalReviveSelfCount;//[Offset: 0x398, Size: 0x4]
	3f988fc5f0* 3f988fc5f0;//[Offset: 0x3a0, Size: 0x8]
	FString ClusterName;//[Offset: 0x3b8, Size: 0x10]
	int8 06e972c395;//[Offset: 0x3d8, Size: 0x1]
	bool bAllowEnemySpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	float ScoutCastingUnitTime;//[Offset: 0x3f4, Size: 0x4]
	int TeamSize;//[Offset: 0x3fc, Size: 0x4]
	bool ce48f36714;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	int CanReviveSelfPhase;//[Offset: 0x404, Size: 0x4]
	enum LeagueEventType;//[Offset: 0x408, Size: 0x1]
	FString SessionId;//[Offset: 0x410, Size: 0x10]
	uint32 MultiInteratableFlag;//[Offset: 0x420, Size: 0x4]
	float AFDHeadScale;//[Offset: 0x424, Size: 0x4]
	bool bEnableFiremansCarry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	bool 11afcb5e51;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 0x1]
	bool bFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 0x1]
	float ff991c341e;//[Offset: 0x42c, Size: 0x4]
	bool bEnableReviveSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	byte ModeContentsFlag;//[Offset: 0x431, Size: 0x1]
	bool a058b0379d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 0x1]
	float CorpseLifeSpan;//[Offset: 0x438, Size: 0x4]
	class d1c0209cc4* e260bf58b5;//[Offset: 0x440, Size: 0x8]
	TeamKillPreventData 0f07768acd;//[Offset: 0x448, Size: 0x2]
	d1c0209cc4* RadioMessageManager;//[Offset: 0x450, Size: 0x8]
	float AFDHeadHeight;//[Offset: 0x458, Size: 0x4]
	CustomCarepackageRulesComponent* CustomCarepackageRulesComponent;//[Offset: 0x460, Size: 0x8]
	class 3f988fc5f0* e3daeab4f9;//[Offset: 0x470, Size: 0x40]
	XtrmPhysicsWaterVolume*[] b56267ebbd;//[Offset: 0x4b0, Size: 0x10]
	EventObjectComponent* EventObjectComponent;//[Offset: 0x4c0, Size: 0x8]
	bool bIsCustomMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	FString[] EnableEventIDs;//[Offset: 0x4f0, Size: 0x10]
	void SendTokenMessageToAll(float WarningMessageTime, int PassToken, int SurvivePhase);// 0xffffff90c89e5003
	void SendSystemMessageToAll(enum MessageType, out const int MsgType, FString AdditionalString);// 0xffffff90c89e5003
	void OnRep_TotalReviveSelfCount();// 0xffffff90c89e5000
	void OnRep_TeamSize();// 0xffffff90c89e5000
	void OnRep_SubModeFlags();// 0xffffff90c89e5000
	void OnRep_NumStartTeams();// 0xffffff90c89e5000
	void OnRep_MatchStartSeconds();// 0xffffff90c89e5000
	void OnRep_LeagueEventType();// 0xffffff90c89e5000
	void OnRep_EnableReviveSelf();// 0xffffff90c89e5000
	void OnRep_ContentsFeatureFlag();// 0xffffff90c89e5000
	void OnRep_CanReviveSelfPhase();// 0xffffff90c89e5000
	float GetParaForceDeployAltitudeMultiplier();// 0xffffff90c89e5001

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	int ElapsedTime;//[Offset: 0x300, Size: 0x4]
	FName MatchState;//[Offset: 0x310, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x318, Size: 0x8]
	void OnRep_MatchState();// 0xffffff90c89e5000
	void OnRep_ElapsedTime();// 0xffffff90c89e5000

--------------------------------
Class: 10ff501ed1
	uint16 StackCount;//[Offset: 0x0, Size: 0x2]
	uint16 f400bad01b;//[Offset: 0x2, Size: 0x2]
	uint32 ItemId;//[Offset: 0x4, Size: 0x4]
	uint16 b3a928c902;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: 5ed732a66f
	int d5cfcc1817;//[Offset: 0x0, Size: 0x4]
	int TeamSize;//[Offset: 0x4, Size: 0x4]
	int 905885b658;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: d932ad70a2
	float c56955e657;//[Offset: 0x0, Size: 0x4]
	FString dcafdd4353;//[Offset: 0x8, Size: 0x10]
	Vector_NetQuantize100 a83c28c04a;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: AircraftRoutesComponent.ActorComponent.Object
	AircraftRoute RefreshedAircraftRoute;//[Offset: 0x128, Size: 0x18]
	bool f5bc291deb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	void OnRep_RefreshedRoute();// 0xffffff90c89e5000
	void OnRep_ArrivedAtDestination();// 0xffffff90c89e5000

--------------------------------
Class: ObserverShareableState.Actor.Object
	ObserverOnlyTeamInfo[] TeamInfos;//[Offset: 0x2a8, Size: 0x10]
	bool bExistSelfRevivableUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	3b0fc35216[] 1b2246276b;//[Offset: 0x2c0, Size: 0x10]
	uint32 DroneCoinItemID;//[Offset: 0x2d0, Size: 0x4]
	void OnRep_TeamInfos();// 0xffffff90c89e5000
	void OnRep_ItemPackageInfos();// 0xffffff90c89e5000

--------------------------------
Class: ObserverOnlyTeamInfo
	uint32 TotalDroneCoinAmount;//[Offset: 0x0, Size: 0x4]
	int TeamNum;//[Offset: 0x4, Size: 0x4]
	uint32 AliveMemberNum;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 3b0fc35216
	enum ItemPackageType;//[Offset: 0x0, Size: 0x1]
	uint32 UniqueId;//[Offset: 0x4, Size: 0x4]
	enum 9a835c700e;//[Offset: 0x8, Size: 0x1]
	Vector_NetQuantize100 ea83b41cd2;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RedZoneStateComponent.ActorComponent.Object
	float RedZoneRadius;//[Offset: 0x11c, Size: 0x4]
	Vector RedZonePosition;//[Offset: 0x120, Size: 0xc]
	void OnRep_RedZonePosition();// 0xffffff90c89e5000

--------------------------------
Class: 3f988fc5f0.Object
	TutorialModeBase* TutorialModePtr;//[Offset: 0x88, Size: 0x8]
	<uint32,Tutorial*> 490fa9f513;//[Offset: 0x90, Size: 0x50]
	DataTable* d35d1ec0eb;//[Offset: 0xe0, Size: 0x8]
	DataTable* 9ab1491082;//[Offset: 0xf8, Size: 0x8]
	class TutorialDestSpot* TutorialDestSpotClass;//[Offset: 0x108, Size: 0x8]
	DataTable* TutorialProcessTable;//[Offset: 0x110, Size: 0x8]
	class BluezoneController* BluezoneControllerClass;//[Offset: 0x138, Size: 0x8]
	DataTable* WidgetAutoFocusTable;//[Offset: 0x140, Size: 0x8]
	<uint32,69735f670a> 0856557aec;//[Offset: 0x148, Size: 0x50]
	FString[] OverlapTopWidgetList;//[Offset: 0x1e8, Size: 0x10]
	int[] OverlapTopTutorialList;//[Offset: 0x218, Size: 0x10]

--------------------------------
Class: TutorialModeBase.Object

--------------------------------
Class: Tutorial.Object
	<33a6088b7b*,a52575cb70> 05969124bb;//[Offset: 0xa0, Size: 0x50]
	9bdce88501* CurrentStep;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: 33a6088b7b.DataAsset.Object
	1620365532*[] c4f3da6323;//[Offset: 0x70, Size: 0x10]
	class 9bdce88501* 12a7a50656;//[Offset: 0x80, Size: 0x40]
	enum eea7550e87;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: 1620365532.DataAsset.Object

--------------------------------
Class: 9bdce88501.Object
	uint32[] ProcessIDs;//[Offset: 0x68, Size: 0x10]
	33a6088b7b*[] 50ef1abf56;//[Offset: 0x88, Size: 0x10]
	void OnExit();// 0xffffff90c89e5000
	void OnEnter();// 0xffffff90c89e5000
	XtrmUserWidget* GetWidgetByName(FString InWidgetName);// 0xffffff90c89e5002

--------------------------------
Class: a52575cb70
	class 9bdce88501* 2e3a2a7f76;//[Offset: 0x70, Size: 0x40]

--------------------------------
Class: DataTable.Object
	bool a2b63f69f6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool e6f95501ad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]
	bool 04ac1a118f;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 0x1]
	ScriptStruct* RowStruct;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: TutorialDestSpot.Actor.Object

--------------------------------
Class: BluezoneController.ModeController.AIController.Controller.Actor.Object
	<enum,DataTable*> BluezoneDataTableAssetMap;//[Offset: 0x430, Size: 0x50]
	float[] PoisonWarningTime;//[Offset: 0x480, Size: 0x10]
	Vector2D ba4e36b702;//[Offset: 0x494, Size: 0x8]
	Vector[] ForceEqualLastLocationList;//[Offset: 0x4a0, Size: 0x10]
	float WaterVolumeRayHeight;//[Offset: 0x4b0, Size: 0x4]
	BluezoneDataRow StartMiniRoyaleBlockBluezoneInfo;//[Offset: 0x4b8, Size: 0x70]
	XtrmPassBlueZoneAreaRectangle*[] d64653e404;//[Offset: 0x528, Size: 0x10]
	Vector[] f2bbd6437b;//[Offset: 0x548, Size: 0x10]
	DataTable* 9b01be1bde;//[Offset: 0x570, Size: 0x8]
	BehaviorTree* b5f4984f4e;//[Offset: 0x5a0, Size: 0x8]
	Vector[] 0f0d13268e;//[Offset: 0x5c0, Size: 0x10]
	int NextPoisonGasIndex;//[Offset: 0x5d0, Size: 0x4]
	XtrmBlueZoneCreateArea*[] 7177246a04;//[Offset: 0x5d8, Size: 0x10]
	9c77e627eb[] BattleRoyalePoisonGasDataArray;//[Offset: 0x5e8, Size: 0x10]
	4538cbb3a0 4538cbb3a0;//[Offset: 0x5f8, Size: 0x10]
	StringTable* StringTable;//[Offset: 0x608, Size: 0x8]
	XtrmPassBluezoneArea*[] f1f50d6d9a;//[Offset: 0x648, Size: 0x10]

--------------------------------
Class: ModeController.AIController.Controller.Actor.Object
	void SendTokenMessageToAll(float WarningMessageTime, int PassToken, int SurvivePhase);// 0xffffff90c89e5003
	void SendSystemMessageToAll(enum MessageType, out const int MsgType, FString AdditionalString);// 0xffffff90c89e5003
	bool IsPlayInEditor();// 0xffffff90c89e5001
	XtrmGameState* GetGameState();// 0xffffff90c89e5001
	XtrmGameMode* GetGameMode();// 0xffffff90c89e5001

--------------------------------
Class: AIController.Controller.Actor.Object
	AIPerceptionComponent* 11fa6c08cb;//[Offset: 0x3c0, Size: 0x8]
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c8, Size: 0x1]
	bool d59408ea94;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c8, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c8, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c8, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c8, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c8, Size: 0x1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x3d0, Size: 0x8]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x3d8, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x3e0, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x3e8, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x3f8, Size: 0x10]
	BlackboardComponent* Blackboard;//[Offset: 0x408, Size: 0x8]
	GameplayTasksComponent* ddde55a24b;//[Offset: 0x428, Size: 0x8]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0xffffff90c89e5003
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0xffffff90c89e5001
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0xffffff90c89e5001
	void SetMoveBlockDetection(bool bEnable);// 0xffffff90c89e5001
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0xffffff90c89e5002
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xffffff90c89e5002
	void OnGameplayTaskResourcesClaimed(fd9c0ce496 NewlyClaimed, fd9c0ce496 FreshlyReleased);// 0xffffff90c89e5002
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xffffff90c89e5009
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xffffff90c89e5008
	void K2_SetFocus(Actor* NewFocus);// 0xffffff90c89e5001
	void K2_SetFocalPoint(Vector fp);// 0xffffff90c89e5001
	void K2_ClearFocus();// 0xffffff90c89e5000
	bool HasPartialPath();// 0xffffff90c89e5001
	PathFollowingComponent* GetPathFollowingComponent();// 0xffffff90c89e5001
	byte GetMoveStatus();// 0xffffff90c89e5001
	Vector GetImmediateMoveDestination();// 0xffffff90c89e5001
	Actor* GetFocusActor();// 0xffffff90c89e5001
	Vector GetFocalPointOnActor(const Actor* Actor);// 0xffffff90c89e5002
	Vector GetFocalPoint();// 0xffffff90c89e5001
	AIPerceptionComponent* GetAIPerceptionComponent();// 0xffffff90c89e5001
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0xffffff90c89e5001

--------------------------------
Class: XtrmGameMode.GameMode.GameModeBase.Info.Actor.Object
	<FString,PlayerState*> 0e243bd983;//[Offset: 0x3f8, Size: 0x50]
	SubModeBase*[] SubModes;//[Offset: 0x448, Size: 0x10]
	PlayerState*[] 0285d43ec2;//[Offset: 0x488, Size: 0x10]
	ItemSpawnProcessor* ItemSpawnProcessor;//[Offset: 0x4a0, Size: 0x8]
	float BpRewardStartTimeSeconds;//[Offset: 0x4a8, Size: 0x4]
	bool 410c52e789;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ac, Size: 0x1]
	VehicleSpawnProcessor* VehicleSpawnProcessor;//[Offset: 0x4b8, Size: 0x8]
	c40a9616ec* 65b01ef51e;//[Offset: 0x4c8, Size: 0x8]
	DataTable* LeagueResultTable;//[Offset: 0x538, Size: 0x8]
	MultiInteractRatioData[] InteractRatioData;//[Offset: 0x540, Size: 0x10]
	class InGameMissionProcessor* MissionProcessorClass;//[Offset: 0x558, Size: 0x8]
	enum AceLeagueType_PIE;//[Offset: 0x5a0, Size: 0x1]
	8ad25a24eb* 325a5989b0;//[Offset: 0x5b0, Size: 0x8]
	int PlayerSpawnTryMaxCount;//[Offset: 0x5d4, Size: 0x4]
	int TeamSize;//[Offset: 0x6b0, Size: 0x4]
	a1cfcb7984* a1cfcb7984;//[Offset: 0x6c8, Size: 0x8]
	class TeamMemberState* TeamMemberStateClass;//[Offset: 0x6d8, Size: 0x8]
	FName b21dccacf0;//[Offset: 0x6e0, Size: 0x8]
	DataTable* SubModeTable;//[Offset: 0x780, Size: 0x8]
	InGameMissionProcessor* aa8db6df55;//[Offset: 0x788, Size: 0x8]
	DataTable* ModeContentActivationInfoTable;//[Offset: 0x790, Size: 0x8]
	enum GameModeType;//[Offset: 0x7a0, Size: 0x1]
	e7df01689a* InventoryPresetRuleData;//[Offset: 0x7c0, Size: 0x8]
	<enum,SoftClassPath> VehicleSpawnProcessorClassRefMap;//[Offset: 0x7c8, Size: 0x50]
	9f3f1776b5* 97957c328b;//[Offset: 0x818, Size: 0x40]
	enum CameraViewBehaviour;//[Offset: 0x85c, Size: 0x1]
	bool bVehicleSpawnEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 0x1]
	<uint32,float> a81dd502a3;//[Offset: 0x868, Size: 0x50]
	bool bItemSpawnEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1]
	class XtrmCharactersPrivateActor* DefaultPawnsPrivateActorClass;//[Offset: 0x8c0, Size: 0x8]
	class Team* TeamClass;//[Offset: 0x8c8, Size: 0x8]
	58da15e916[] WeatherLevelDatas;//[Offset: 0x8d0, Size: 0x10]
	ebba92e057* 3278b104c8;//[Offset: 0x8e8, Size: 0x8]
	bool bAllowFiremansCarry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 0x1]
	uint32[] NoConsumeAmmoExcludeList;//[Offset: 0x900, Size: 0x10]
	PresetEquipmentProvideComponent* PresetProvider;//[Offset: 0x910, Size: 0x8]
	class ObserverShareableState* ObserverShareableStateClass;//[Offset: 0x918, Size: 0x8]
	delegate OnMatchStarted;//[Offset: 0x928, Size: 0x10]
	<enum,SoftClassPath> ItemSpawnProcessorClassRefMap;//[Offset: 0x938, Size: 0x50]
	bool IsUseCookedSpotData();// 0xffffff90c89e5001

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	class 112ea71b06* 410ea45517;//[Offset: 0x348, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	int NumBots;//[Offset: 0x354, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	int NumTravellingPlayers;//[Offset: 0x35c, Size: 0x4]
	int NumPlayers;//[Offset: 0x360, Size: 0x4]
	int NumSpectators;//[Offset: 0x36c, Size: 0x4]
	PlayerState*[] ffb7722c60;//[Offset: 0x370, Size: 0x10]
	float MinRespawnDelay;//[Offset: 0x380, Size: 0x4]
	FName MatchState;//[Offset: 0x384, Size: 0x8]
	void StartMatch();// 0xffffff90c89e5000
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0xffffff90c89e5001
	void Say(FString Msg);// 0xffffff90c89e5001
	void RestartGame();// 0xffffff90c89e5000
	bool ReadyToStartMatch();// 0xffffff90c89e5001
	bool ReadyToEndMatch();// 0xffffff90c89e5001
	void K2_OnSetMatchState(FName NewState);// 0xffffff90c89e5001
	bool IsMatchInProgress();// 0xffffff90c89e5001
	FName GetMatchState();// 0xffffff90c89e5001
	void EndMatch();// 0xffffff90c89e5000
	void AbortMatch();// 0xffffff90c89e5000

--------------------------------
Class: SubModeBase.ActorComponent.Object

--------------------------------
Class: ItemSpawnProcessor.Object
	SoftObjectPath 31f3ef2c19;//[Offset: 0x70, Size: 0x18]
	DelayedSpawnData[] CachedSpawnData;//[Offset: 0x98, Size: 0x10]
	<Actor*,b684196c92> 9ea3fdc4bf;//[Offset: 0xb8, Size: 0x50]
	<enum,1792afaaac> 977fc211f0;//[Offset: 0x108, Size: 0x50]
	DataTable* e9c37322c3;//[Offset: 0x158, Size: 0x8]
	<uint32,RespawnableItemSpotComponent*> 5397a67722;//[Offset: 0x160, Size: 0x50]
	DataTable* 8088dfbf55;//[Offset: 0x1b0, Size: 0x8]
	<int,a2d26660aa> a2d26660aa;//[Offset: 0x1b8, Size: 0x50]
	816c93a588[] 02b37a7fe9;//[Offset: 0x208, Size: 0x10]
	SoftObjectPath 5373530675;//[Offset: 0x220, Size: 0x18]
	DataTable* a692acfad2;//[Offset: 0x238, Size: 0x8]
	<enum,1d75c95cdf> d888590647;//[Offset: 0x240, Size: 0x50]
	SoftObjectPath 8afb6b057b;//[Offset: 0x290, Size: 0x18]
	<FName,c659957d39> 79bb441e4c;//[Offset: 0x2e0, Size: 0x50]
	void ProcessSpawnItemGroup_Distribution();// 0xffffff90c89e5000

--------------------------------
Class: DelayedSpawnData
	FString ItemSpawnDataMapKey;//[Offset: 0x0, Size: 0x10]
	int CategoryIndex;//[Offset: 0x10, Size: 0x4]
	33180d8271 Spot;//[Offset: 0x14, Size: 0x28]

--------------------------------
Class: 33180d8271
	enum ItemSpotType;//[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	bool bUseRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	enum ItemNetworkDistanceType;//[Offset: 0x11, Size: 0x1]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bSnapToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float ItemNetCullDistance;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: b684196c92
	<enum,ItemSpotGroupData> GroupDataMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ItemSpotGroupData
	33180d8271[] ItemSpots;//[Offset: 0x0, Size: 0x10]
	enum SpotGroupType;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: 1792afaaac
	<enum,float> Distances;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: RespawnableItemSpotComponent.SceneComponent.ActorComponent.Object
	enum NetworkDistanceType;//[Offset: 0x298, Size: 0x1]
	float ItemNetCullDistance;//[Offset: 0x29c, Size: 0x4]
	DroppedItem* DroppedItem;//[Offset: 0x2a0, Size: 0x8]
	ItemDataAsset* ItemDataAsset;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: a2d26660aa
	int SumWeight;//[Offset: 0x0, Size: 0x4]
	int GunID;//[Offset: 0x4, Size: 0x4]
	GunAttachmentSpawnDataRow[] GunAttachmentDatas;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GunAttachmentSpawnDataRow.TableRowBase
	FString Desc;//[Offset: 0x8, Size: 0x10]
	int Weight;//[Offset: 0x18, Size: 0x4]
	int GunID;//[Offset: 0x1c, Size: 0x4]
	<enum,int> Attachments;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: TableRowBase

--------------------------------
Class: 816c93a588
	b684196c92 Value;//[Offset: 0x0, Size: 0x50]
	Actor* Key;//[Offset: 0x50, Size: 0x20]

--------------------------------
Class: 1d75c95cdf
	enum AlternativeGroup;//[Offset: 0x0, Size: 0x1]
	ad6bac68bb[] SpotRules;//[Offset: 0x8, Size: 0x10]
	int SpawnGroupPercent;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ad6bac68bb
	782e7d6f2c[] CategoryRules;//[Offset: 0x0, Size: 0x10]
	int SumWeightOfCategory;//[Offset: 0x10, Size: 0x4]
	enum SpotType;//[Offset: 0x14, Size: 0x1]
	int SpawnSpotPercentMax;//[Offset: 0x18, Size: 0x4]
	int SpawnSpotPercentMin;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: 782e7d6f2c
	int Weight;//[Offset: 0x0, Size: 0x4]
	FString CategoryName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: c659957d39
	ItemSpawnDataRow[] ItemSpawnDatas;//[Offset: 0x0, Size: 0x10]
	int SumWeight;//[Offset: 0x10, Size: 0x4]
	FName Category;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: ItemSpawnDataRow.TableRowBase
	ItemDataAsset* ItemData;//[Offset: 0x8, Size: 0x8]
	int SpawnedItemStackCountMin;//[Offset: 0x10, Size: 0x4]
	FString Desc;//[Offset: 0x18, Size: 0x10]
	int CountMax;//[Offset: 0x28, Size: 0x4]
	ItemDataAsset* SpawnedItemData;//[Offset: 0x30, Size: 0x8]
	int AddtionalItemCountMax;//[Offset: 0x38, Size: 0x4]
	int Weight;//[Offset: 0x3c, Size: 0x4]
	int SpawnInterval;//[Offset: 0x40, Size: 0x4]
	int AddtionalItemStackCount;//[Offset: 0x44, Size: 0x4]
	int CountMin;//[Offset: 0x48, Size: 0x4]
	int AddtionalItemCountMin;//[Offset: 0x4c, Size: 0x4]
	int StackCount;//[Offset: 0x50, Size: 0x4]
	ItemDataAsset* AdditionalItemData;//[Offset: 0x58, Size: 0x8]
	FName Category;//[Offset: 0x60, Size: 0x8]
	int ItemId;//[Offset: 0x68, Size: 0x4]
	int SpawnedItemStackCountMax;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: VehicleSpawnProcessor.Object
	SoftObjectPath 662590cf48;//[Offset: 0x68, Size: 0x18]
	float SpawnZOffsetFromFloor;//[Offset: 0x80, Size: 0x4]
	<enum,5eff2fc076> RawSpotGroupProperties;//[Offset: 0x88, Size: 0x50]
	DataTable* e9c37322c3;//[Offset: 0x128, Size: 0x8]
	421b357fe2 421b357fe2;//[Offset: 0x528, Size: 0x50]

--------------------------------
Class: 5eff2fc076
	eaade03eb0[] WeightsPerCategory;//[Offset: 0x0, Size: 0x10]
	FloatRange TotalCountRange;//[Offset: 0x10, Size: 0x10]
	FloatRange FuelPercentRange;//[Offset: 0x20, Size: 0x10]
	bool bSnapToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: eaade03eb0
	FName Name;//[Offset: 0x0, Size: 0x8]
	int Weight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: 421b357fe2
	<FName,c1ae8838a8> 38a3008ea0;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: c1ae8838a8
	VehicleSpawnDataRow[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: VehicleSpawnDataRow.TableRowBase
	int Weight;//[Offset: 0x8, Size: 0x4]
	class Actor* Vehicle;//[Offset: 0x10, Size: 0x8]
	FName CategoryFilter;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: c40a9616ec.DataAsset.Object
	<enum,37423e1a35> b483b80b34;//[Offset: 0x70, Size: 0x50]

--------------------------------
Class: 37423e1a35
	<enum,14b4065793> 71be9aea06;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: 14b4065793
	float 98dfefeec8;//[Offset: 0x0, Size: 0x4]
	float da52da5f44;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MultiInteractRatioData
	enum InteractionType;//[Offset: 0x0, Size: 0x1]
	bool bUseMultiInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	<int,float> InteractableRatio;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: InGameMissionProcessor.Object
	SoftObjectPath d2c689aae3;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath c7f70317a6;//[Offset: 0x80, Size: 0x18]
	<enum,75064d0608> c15f7785cf;//[Offset: 0xe8, Size: 0x50]
	SoftObjectPath e82e4f7b21;//[Offset: 0x138, Size: 0x18]

--------------------------------
Class: 75064d0608
	InGameMissionDataTableRow[] 674cb5f3bb;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InGameMissionDataTableRow.TableRowBase
	bool ae9343d354;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	706e6f2e3d* MissionData;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: 706e6f2e3d.DataAsset.Object
	89e943497f Reward;//[Offset: 0x88, Size: 0x60]
	0f47f8221a* 770abf0dd5;//[Offset: 0xe8, Size: 0x8]
	enum 024ee56715;//[Offset: 0xf4, Size: 0x1]
	enum MissionType;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: 89e943497f
	int 470c190103;//[Offset: 0x0, Size: 0x4]
	FText a0cd448f1a;//[Offset: 0x8, Size: 0x18]
	Texture2D* ece5e87e0c;//[Offset: 0x20, Size: 0x40]

--------------------------------
Class: 0f47f8221a.DataAsset.Object

--------------------------------
Class: 8ad25a24eb.DataAsset.Object
	4a35afe79b b56802cc2c;//[Offset: 0x70, Size: 0x58]
	4a35afe79b 87430e5668;//[Offset: 0xc8, Size: 0x58]
	4a35afe79b e38079288c;//[Offset: 0x120, Size: 0x58]

--------------------------------
Class: 4a35afe79b
	bool c9ca2f0ebd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	<enum,TeamKillPreventData> b9e9c92b87;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: TeamKillPreventData
	enum DamageType;//[Offset: 0x0, Size: 0x1]
	bool bCanDamageMySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: a1cfcb7984.Object
	70fa3435ee* 7f8b8928e7;//[Offset: 0x68, Size: 0x8]
	60bc8baa74*[] c91013ea85;//[Offset: 0x70, Size: 0x10]
	269d541cc1* 626aa000bd;//[Offset: 0x88, Size: 0x8]
	b02f585484* 544ee98c20;//[Offset: 0xb0, Size: 0x8]
	void MatchStarted();// 0xffffff90c89e5000
	void AddCheatDataAccum(XtrmCharacter* Character, enum CheatType, float Duration);// 0xffffff90c89e5003
	void AddCheatData(XtrmCharacter* Character, out const 63a1344065 CheatData);// 0xffffff90c89e5002

--------------------------------
Class: 63a1344065

--------------------------------
Class: 70fa3435ee.60bc8baa74.Object

--------------------------------
Class: 60bc8baa74.Object

--------------------------------
Class: 269d541cc1.60bc8baa74.Object
	<XtrmPlayerState*,eb889ea21c> a676b9df2b;//[Offset: 0x90, Size: 0x50]
	<XtrmPlayerState*> 3d626c343c;//[Offset: 0xe0, Size: 0x50]

--------------------------------
Class: eb889ea21c

--------------------------------
Class: b02f585484.60bc8baa74.Object

--------------------------------
Class: e7df01689a.DataAsset.Object
	enum[] 2dbfe7da08;//[Offset: 0x70, Size: 0x10]
	FString[] DummyRebirthPresetList;//[Offset: 0x88, Size: 0x10]
	enum[] fe09e7de05;//[Offset: 0x98, Size: 0x10]
	<FString,int> a811667530;//[Offset: 0xa8, Size: 0x50]
	e86b26fba6[] 583cc8bdf0;//[Offset: 0xf8, Size: 0x10]
	enum[] 3c41fdcbdc;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: e86b26fba6
	int[] LobbyPreviewWeaponList;//[Offset: 0x0, Size: 0x10]
	bool bIsApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString PresetName;//[Offset: 0x18, Size: 0x10]
	ad6650507d[] ItemList;//[Offset: 0x28, Size: 0x10]
	FString PresetID;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ad6650507d
	int ItemId;//[Offset: 0x0, Size: 0x4]
	uint32[] AttachedItemIDs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: 9f3f1776b5.DataAsset.Object
	50e2192086[] 676ad0b7a7;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: 50e2192086
	0f0df653f0[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 0f0df653f0
	byte Type;//[Offset: 0x0, Size: 0x1]
	Rotator Rotator;//[Offset: 0x4, Size: 0xc]
	Vector Position;//[Offset: 0x10, Size: 0xc]
	Vector2D RandomRotatorRange;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: ebba92e057.Object
	<UniqueNetIdRepl,54a7aa6b2b> 127a9fbff4;//[Offset: 0x70, Size: 0x50]

--------------------------------
Class: 54a7aa6b2b
	1212939fe5[] 7dafde5715;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 1212939fe5

--------------------------------
Class: PresetEquipmentProvideComponent.ActorComponent.Object

--------------------------------
Class: BluezoneDataRow.TableRowBase
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x8, Size: 0x40]
	float SpreadRatio;//[Offset: 0x48, Size: 0x4]
	float ReleaseDuration;//[Offset: 0x4c, Size: 0x4]
	float RadiusRate;//[Offset: 0x50, Size: 0x4]
	float StartDelay;//[Offset: 0x54, Size: 0x4]
	bool IsForceRadiusZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	float RandomRadiusRate;//[Offset: 0x5c, Size: 0x4]
	float WarningDuration;//[Offset: 0x60, Size: 0x4]
	float DamageMagnifierForDistance;//[Offset: 0x64, Size: 0x4]
	float PoisonGasDPS;//[Offset: 0x68, Size: 0x4]
	float DamageMagnifier;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x120, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x130, Size: 0x10]
	AISenseConfig*[] 9cbccbad16;//[Offset: 0x140, Size: 0x10]
	class AISense* fd77924e19;//[Offset: 0x150, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x168, Size: 0x10]
	AIController* 035e536f33;//[Offset: 0x178, Size: 0x8]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0xffffff90c89e5002
	void RequestStimuliListenerUpdate();// 0xffffff90c89e5000
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0xffffff90c89e5002
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0xffffff90c89e5002
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0xffffff90c89e5001
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xffffff90c89e5002
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xffffff90c89e5002
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xffffff90c89e5002
	bool GetActorsPerception(Actor* Actor, out 9b6b74a197 Info);// 0xffffff90c89e5003
	void ForgetAll();// 0xffffff90c89e5000

--------------------------------
Class: AISense.Object
	AIPerceptionSystem* 6d5489f4cb;//[Offset: 0x88, Size: 0x8]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	enum NotifyType;//[Offset: 0x91, Size: 0x1]
	float DefaultExpirationAge;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] c8d2794dda;//[Offset: 0x78, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x188, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, a608f292cf* PerceptionEvent);// 0xffffff90c89e5002
	void ReportEvent(a608f292cf* PerceptionEvent);// 0xffffff90c89e5001
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0xffffff90c89e5004
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0xffffff90c89e5002
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const f3a13715fa Stimulus);// 0xffffff90c89e5003

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	601435b7fa* a2b184364c;//[Offset: 0x98, Size: 0x8]
	byte DefaultSightCollisionChannel;//[Offset: 0xa0, Size: 0x1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xa8, Size: 0x8]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	float AcceptanceRadius;//[Offset: 0x104, Size: 0x4]
	AIAsyncTaskBlueprintProxy*[] cbee12b9a6;//[Offset: 0x110, Size: 0x10]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0x128, Size: 0x8]
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x130, Size: 0x18]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x148, Size: 0x4]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0x150, Size: 0x8]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x158, Size: 0x18]
	EnvQueryManager* 49c6263c07;//[Offset: 0x170, Size: 0x8]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x17c, Size: 0x4]
	void AILoggingVerbose();// 0xffffff90c89e5000
	void AIIgnorePlayers();// 0xffffff90c89e5000

--------------------------------
Class: 601435b7fa.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0xffffff90c89e5003
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0xffffff90c89e5003
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0xffffff90c89e5005
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff90c89e5006
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff90c89e5006
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff90c89e5008
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff90c89e5008

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnFail;//[Offset: 0x68, Size: 0x10]
	delegate OnSuccess;//[Offset: 0xa0, Size: 0x10]
	void OnMoveCompleted(627db808a1 RequestID, byte MovementResult);// 0xffffff90c89e5002

--------------------------------
Class: 627db808a1
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BehaviorTreeManager.Object
	ed4cff5b08[] 3a5e26536f;//[Offset: 0x68, Size: 0x10]
	int MaxDebuggerSteps;//[Offset: 0x78, Size: 0x4]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ed4cff5b08
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTree.Object
	BTDecorator*[] 029448f009;//[Offset: 0x70, Size: 0x10]
	BTCompositeNode* RootNode;//[Offset: 0x80, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x88, Size: 0x8]
	34d9a53d6e[] 0b631f5a1c;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool 5453f5a1b8;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa3, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTNode.Object
	BehaviorTree* 2d01841106;//[Offset: 0x78, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	d9207e1243[] Children;//[Offset: 0xa8, Size: 0x10]
	BTService*[] Services;//[Offset: 0xc8, Size: 0x10]
	bool 5e7b276990;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: d9207e1243
	BTCompositeNode* f57a4e1d70;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* 8310b31475;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	34d9a53d6e[] 766f16855b;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0xa8, Size: 0x10]
	bool a96696bfc0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	bool e22d53b4e3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool 9d0b4becd3;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]

--------------------------------
Class: 34d9a53d6e
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x78, Size: 0x8]
	bool 62ca853fe5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	BlackboardEntry[] Keys;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool 87c732a8f3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x290, Size: 0x8]
	BTNode*[] 4940471f5d;//[Offset: 0x300, Size: 0x10]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0xffffff90c89e5002
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0xffffff90c89e5002
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0xffffff90c89e5003

--------------------------------
Class: BrainComponent.ActorComponent.Object
	AIController* 035e536f33;//[Offset: 0x140, Size: 0x8]
	BlackboardComponent* 503c2d79c4;//[Offset: 0x170, Size: 0x8]
	void StopLogic(FString Reason);// 0xffffff90c89e5001
	void StartLogic();// 0xffffff90c89e5000
	void RestartLogic();// 0xffffff90c89e5000
	bool IsRunning();// 0xffffff90c89e5001
	bool IsPaused();// 0xffffff90c89e5001

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BlackboardKeyType*[] edd2e8503b;//[Offset: 0x140, Size: 0x10]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0x150, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x158, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x160, Size: 0x8]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0xffffff90c89e5002
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0xffffff90c89e5002
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0xffffff90c89e5002
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0xffffff90c89e5002
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0xffffff90c89e5002
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0xffffff90c89e5002
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0xffffff90c89e5002
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0xffffff90c89e5002
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0xffffff90c89e5002
	void SetValueAsBool(out const FName KeyName, bool boolValue);// 0xffffff90c89e5002
	bool IsVectorValueSet(out const FName KeyName);// 0xffffff90c89e5002
	Vector GetValueAsVector(out const FName KeyName);// 0xffffff90c89e5002
	FString GetValueAsString(out const FName KeyName);// 0xffffff90c89e5002
	Rotator GetValueAsRotator(out const FName KeyName);// 0xffffff90c89e5002
	Object* GetValueAsObject(out const FName KeyName);// 0xffffff90c89e5002
	FName GetValueAsName(out const FName KeyName);// 0xffffff90c89e5002
	int GetValueAsInt(out const FName KeyName);// 0xffffff90c89e5002
	float GetValueAsFloat(out const FName KeyName);// 0xffffff90c89e5002
	byte GetValueAsEnum(out const FName KeyName);// 0xffffff90c89e5002
	class Object GetValueAsClass(out const FName KeyName);// 0xffffff90c89e5002
	bool GetValueAsBool(out const FName KeyName);// 0xffffff90c89e5002
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0xffffff90c89e5003
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0xffffff90c89e5003
	void ClearValue(out const FName KeyName);// 0xffffff90c89e5001

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	6796b98e38[] 7525ec1f27;//[Offset: 0x98, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0xa8, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0xb0, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x108, Size: 0x8]
	adb9f42eda*[] f540a80618;//[Offset: 0x110, Size: 0x10]
	EnvQueryContext*[] 3f44730034;//[Offset: 0x178, Size: 0x10]
	static adb9f42eda* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class adb9f42eda WrapperClass);// 0xffffff90c89e5006

--------------------------------
Class: 6796b98e38
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName 01dc586354;//[Offset: 0x70, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x68, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.ca40f60da7.Object
	class EnvQueryItemType* ItemType;//[Offset: 0x78, Size: 0x8]
	bool 6067fd3e19;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ca40f60da7.Object

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.ca40f60da7.Object
	AIDataProviderFloatValue d1b9cf5386;//[Offset: 0x70, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0xb0, Size: 0x38]
	AIDataProviderFloatValue f5c2f47eee;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue 05e40131ec;//[Offset: 0x150, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x190, Size: 0x38]
	AIDataProviderFloatValue 80a40da2c3;//[Offset: 0x1c8, Size: 0x38]
	enum acc2642b4b;//[Offset: 0x204, Size: 0x1]
	AIDataProviderBoolValue boolValue;//[Offset: 0x208, Size: 0x38]
	bool 76c6f64fc7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x241, Size: 0x1]

--------------------------------
Class: AIDataProviderFloatValue.8f29696e52.cdd8b4bd45
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: 8f29696e52.cdd8b4bd45
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: cdd8b4bd45
	2b12dfcb54* d20e569193;//[Offset: 0x10, Size: 0x8]
	FName d336fb6caa;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: 2b12dfcb54.Object

--------------------------------
Class: AIDataProviderBoolValue.8f29696e52.cdd8b4bd45
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: adb9f42eda.Object
	class EnvQueryItemType* ItemType;//[Offset: 0x70, Size: 0x8]
	delegate OnQueryFinishedEvent;//[Offset: 0x78, Size: 0x10]
	int QueryID;//[Offset: 0x8c, Size: 0x4]
	int OptionIndex;//[Offset: 0xa0, Size: 0x4]
	void SetNamedParam(FName ParamName, float Value);// 0xffffff90c89e5002
	Vector[] GetResultsAsLocations();// 0xffffff90c89e5001
	Actor*[] GetResultsAsActors();// 0xffffff90c89e5001
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0xffffff90c89e5002
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0xffffff90c89e5002
	float GetItemScore(int ItemIndex);// 0xffffff90c89e5002
	void EQSQueryDoneSignature__DelegateSignature(adb9f42eda* QueryInstance, byte QueryStatus);// 0xffffff90c89e5002

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: a608f292cf.Object

--------------------------------
Class: f3a13715fa
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: 9b6b74a197
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	f3a13715fa[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: AISenseConfig.Object
	float MaxAge;//[Offset: 0x64, Size: 0x4]
	Color DebugColor;//[Offset: 0x68, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterFlags IncludeFlags;//[Offset: 0x64, Size: 0x4]
	NavigationFilterArea[] Areas;//[Offset: 0x68, Size: 0x10]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: NavigationFilterFlags
	bool 3effeaa399;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool 3a2fc46e44;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool 9a71502366;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bbbb4331cf;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool 18923cba46;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool 20d22e465b;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool 0ad75e72e2;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool 18e6565494;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool d6482d0600;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool 74ed4aa863;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool 05df77ecea;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool dfc64c06b0;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool 2f0700e40d;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool 630e80c141;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool 1e7234b4cb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool e800d47c04;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float b1e1aa51a6;//[Offset: 0x8, Size: 0x4]
	float 094c1b6634;//[Offset: 0xc, Size: 0x4]
	bool cee918ed5a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavigationData* 46f5a0bd5f;//[Offset: 0x140, Size: 0x8]
	NavMovementComponent* MovementComp;//[Offset: 0x1a8, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0xffffff90c89e5001
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5004
	Vector GetPathDestination();// 0xffffff90c89e5001
	byte GetPathActionType();// 0xffffff90c89e5001

--------------------------------
Class: NavigationData.Actor.Object
	bool 4e99c0ec42;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c0, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2da, Size: 0x1]
	PrimitiveComponent* RenderingComp;//[Offset: 0x2e0, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x328, Size: 0x90]
	SupportedAreaData[] 5bb67d2550;//[Offset: 0x3e8, Size: 0x10]
	float ObservedPathsTickInterval;//[Offset: 0x410, Size: 0x4]

--------------------------------
Class: NavDataConfig.a057bbcf4b.ebc7160fb5
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x40]

--------------------------------
Class: SupportedAreaData
	FString ec52510e03;//[Offset: 0x0, Size: 0x10]
	int c5d285996f;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: XtrmBlueZoneCreateArea.Actor.Object
	SphereComponent* SphereComponent;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: 9c77e627eb
	float SpreadRatio;//[Offset: 0x0, Size: 0x4]
	float PoisonGasDamagePerSecond;//[Offset: 0x4, Size: 0x4]
	float ReleaseDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x10, Size: 0x8]
	float RadiusRate;//[Offset: 0x18, Size: 0x4]
	float StartDelay;//[Offset: 0x1c, Size: 0x4]
	bool IsForceRadiusZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float WarningDuration;//[Offset: 0x24, Size: 0x4]
	float RandomRadiusRate;//[Offset: 0x28, Size: 0x4]
	float DamageMagnifierForDistance;//[Offset: 0x2c, Size: 0x4]
	float DamageMagnifier;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: 4538cbb3a0
	9c77e627eb[] 2b38f9dac8;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: StringTable.Object

--------------------------------
Class: XtrmPassBluezoneArea.XtrmPassArea.Actor.Object

--------------------------------
Class: XtrmPassArea.Actor.Object
	SphereComponent* SphereComponent;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x68, Size: 0x4]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: fd9c0ce496

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0x120, Size: 0x8]
	PawnAction* CurrentAction;//[Offset: 0x128, Size: 0x8]
	850d6b5c11[] ActionEvents;//[Offset: 0x130, Size: 0x10]
	ba31f297cc[] b5b09953f5;//[Offset: 0x148, Size: 0x10]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0xffffff90c89e5004
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0xffffff90c89e5004
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0xffffff90c89e5002
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0xffffff90c89e5002

--------------------------------
Class: PawnAction.Object
	Object* Instigator;//[Offset: 0x70, Size: 0x8]
	PawnAction* 3f43b3261f;//[Offset: 0x78, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x88, Size: 0x8]
	PawnAction* ChildAction;//[Offset: 0xa0, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0xb8, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	byte GetActionPriority();// 0xffffff90c89e5001
	void Finish(byte WithResult);// 0xffffff90c89e5001
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0xffffff90c89e5003

--------------------------------
Class: 850d6b5c11
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ba31f297cc
	PawnAction* 060903f739;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool 7c1bfba364;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12a, Size: 0x1]
	delegate OnClaimedResourcesChange;//[Offset: 0x130, Size: 0x10]
	GameplayTask*[] f41d860b5d;//[Offset: 0x140, Size: 0x10]
	GameplayTask*[] c1c281fa67;//[Offset: 0x150, Size: 0x10]
	GameplayTask*[] 6c58869b11;//[Offset: 0x170, Size: 0x10]
	GameplayTask*[] 368cdb1bb4;//[Offset: 0x188, Size: 0x10]
	void OnRep_SimulatedTasks();// 0xffffff90c89e5000
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0xffffff90c89e5006

--------------------------------
Class: GameplayTask.Object
	GameplayTask* 8310b31475;//[Offset: 0x70, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x7d, Size: 0x1]
	FName InstanceName;//[Offset: 0x80, Size: 0x8]
	void ReadyForActivation();// 0xffffff90c89e5000
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xffffff90c89e5000
	void EndTask();// 0xffffff90c89e5000

--------------------------------
Class: 69735f670a
	uint32 RepeatCount;//[Offset: 0x0, Size: 0x4]
	class 9bdce88501* StartStep;//[Offset: 0x8, Size: 0x40]
	1620365532*[] c36570956e;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: XtrmDroneStoreStatusComponent.ActorComponent.Object
	cf5726f022[] e91aedaebe;//[Offset: 0x120, Size: 0x10]
	class XtrmParticle* 66f1615343;//[Offset: 0x130, Size: 0x8]

--------------------------------
Class: cf5726f022
	FString 13aa34ee2c;//[Offset: 0x20, Size: 0x10]
	float fe01d65c8c;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BluezoneStateComponent.ActorComponent.Object
	a847aa09fc[] 3689d6c44f;//[Offset: 0x128, Size: 0x10]
	Vector LerpSafetyZonePosition;//[Offset: 0x138, Size: 0xc]
	SoftObjectPath BluezoneOutSoundAk;//[Offset: 0x148, Size: 0x18]
	SoftObjectPath BlockzoneLoopSoundAk;//[Offset: 0x160, Size: 0x18]
	SoftObjectPath BlockzoneOutSoundAk;//[Offset: 0x178, Size: 0x18]
	Vector SafetyZonePosition;//[Offset: 0x190, Size: 0xc]
	bool bIsWorkingBlueZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]
	AkAudioEvent* c8ad7e03f4;//[Offset: 0x1a0, Size: 0x8]
	bool bIsBlockZoneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool bIsGasRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	AkAudioEvent* 3b9ba32dda;//[Offset: 0x1b0, Size: 0x8]
	float ElapsedStartWaitDelayDurationForClient;//[Offset: 0x1b8, Size: 0x4]
	float 8e74a00325;//[Offset: 0x1bc, Size: 0x4]
	int NextPoisonGasIndex;//[Offset: 0x1c0, Size: 0x4]
	AkAudioEvent* LoadedBlockzoneLoopSoundAk;//[Offset: 0x1c8, Size: 0x8]
	AkAudioEvent* d3063be188;//[Offset: 0x1d0, Size: 0x8]
	CurveFloat* ae525171df;//[Offset: 0x1e0, Size: 0x8]
	float cfb0b41c12;//[Offset: 0x1ec, Size: 0x4]
	float TotalWarningDuration;//[Offset: 0x1f0, Size: 0x4]
	float 58debb45d5;//[Offset: 0x1f4, Size: 0x4]
	float StartDelayTime;//[Offset: 0x1f8, Size: 0x4]
	int RoundStage;//[Offset: 0x1fc, Size: 0x4]
	Vector 0d5a447e67;//[Offset: 0x20c, Size: 0xc]
	SoftObjectPath BluezoneBuzzingSoundStopAk;//[Offset: 0x218, Size: 0x18]
	SoftObjectPath BluezoneBuzzingSoundStartAk;//[Offset: 0x230, Size: 0x18]
	float ElapsedWarningDuration;//[Offset: 0x248, Size: 0x4]
	bool bIsMiniRoyaleTablePhaseStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	float eb023369b3;//[Offset: 0x250, Size: 0x4]
	AkAudioEvent* LoadedBlockzoneOutSoundAk;//[Offset: 0x260, Size: 0x8]
	SoftObjectPath BluezoneInSoundAk;//[Offset: 0x268, Size: 0x18]
	float SafetyZoneRadius;//[Offset: 0x28c, Size: 0x4]
	SoftObjectPath bf6e899b5f;//[Offset: 0x290, Size: 0x18]
	MiniRoyaleInfo MiniRoyaleInfo;//[Offset: 0x2a8, Size: 0x10]
	AkAudioEvent* 56c3d1d01a;//[Offset: 0x2b8, Size: 0x8]
	float LerpSafetyZoneRadius;//[Offset: 0x2d8, Size: 0x4]
	Vector SafetyZoneBeginPosition;//[Offset: 0x2dc, Size: 0xc]
	bool 94f9b0c740;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	float BluezoneBuzzingSoundDistance;//[Offset: 0x2f0, Size: 0x4]
	float SafetyZoneBeginRadius;//[Offset: 0x2fc, Size: 0x4]
	AkAudioEvent* LoadedBlockzoneInSoundAk;//[Offset: 0x300, Size: 0x8]
	float ElapsedWarningDurationForClient;//[Offset: 0x308, Size: 0x4]
	float ab95f6286d;//[Offset: 0x30c, Size: 0x4]
	SoftObjectPath BlockzoneInSoundAk;//[Offset: 0x310, Size: 0x18]
	float ElapsedStartWaitDelayDuration;//[Offset: 0x328, Size: 0x4]
	void OnRep_StopBluezone();// 0xffffff90c89e5000
	void OnRep_RoundStage();// 0xffffff90c89e5000
	void OnRep_NextPoisonGasIndex();// 0xffffff90c89e5000
	void OnRep_MiniRoyaleInfo();// 0xffffff90c89e5000
	void OnRep_GasRelease();// 0xffffff90c89e5000
	void OnRep_ElapsedWarningDuration();// 0xffffff90c89e5000
	void OnRep_ElapsedStartWaitDelayDuration();// 0xffffff90c89e5000

--------------------------------
Class: a847aa09fc
	byte AlivePlayerCount;//[Offset: 0x0, Size: 0x1]
	93486796e5 WhitezoneLocation;//[Offset: 0x4, Size: 0x8]
	float BluezoneRadius;//[Offset: 0xc, Size: 0x4]
	93486796e5 BluezoneLocation;//[Offset: 0x10, Size: 0x8]
	bool bIsWait;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float WhitezoneRadius;//[Offset: 0x1c, Size: 0x4]
	float ElapsedTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MiniRoyaleInfo
	Vector BluezoneCenter;//[Offset: 0x0, Size: 0xc]
	float BluezoneRadius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: 6ce681fe0b
	FString a0073db497;//[Offset: 0x0, Size: 0x10]
	Vector2D 33552ccf7b;//[Offset: 0x10, Size: 0x8]
	int 2d28ac43ae;//[Offset: 0x18, Size: 0x4]
	enum 99b556a6c5;//[Offset: 0x1c, Size: 0x1]
	bool 73a3ecbb75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: CarePackageSpawnInfo
	enum PackageStyle;//[Offset: 0x0, Size: 0x1]
	int ID;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: d1c0209cc4.Object
	float[] dce5dc7a24;//[Offset: 0x188, Size: 0x10]
	float e2f7b38514;//[Offset: 0x1a0, Size: 0x4]
	<int,AkComponent*> cef65e5816;//[Offset: 0x1f8, Size: 0x50]
	AkAudioEvent* 02f9e5dc11;//[Offset: 0x250, Size: 0x8]
	StringTable* 5d7dbaffa3;//[Offset: 0x288, Size: 0x8]
	<enum,float> 758a84e85c;//[Offset: 0x290, Size: 0x50]

--------------------------------
Class: CustomCarepackageRulesComponent.ActorComponent.Object
	float SecondsToKeepPackageInfoAfterLanding;//[Offset: 0x1a8, Size: 0x4]
	cecbaa22ef[] CustomCarepackageCircleArray;//[Offset: 0x1b0, Size: 0x10]
	BluezoneController* 925c7fd5ed;//[Offset: 0x1c0, Size: 0x20]
	BattleRoyaleGameMode* XtrmGameMode;//[Offset: 0x210, Size: 0x20]
	void OnCarepackageDeployed(const enum FlareDeploymentType);// 0xffffff90c89e5001
	enum GetFlareDeploymentType(const Vector ActorSize2D);// 0xffffff90c89e5002
	int GetCarepackagesLeft(const enum FlareDeploymentType);// 0xffffff90c89e5002
	void AddZoneCarepackages(int PhaseIndex, bool bIsRelease);// 0xffffff90c89e5002

--------------------------------
Class: cecbaa22ef
	int AddWhiteZoneCarepackages;//[Offset: 0x0, Size: 0x4]
	int AddOutsideZoneCarepackages;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BattleRoyaleGameMode.XtrmGameMode.GameMode.GameModeBase.Info.Actor.Object
	DataTable* BotItemsTable;//[Offset: 0x9a0, Size: 0x8]
	BRRebirthSystemComponent* RebirthSystemComponent;//[Offset: 0x9a8, Size: 0x8]
	DataTable* BotCostumeItemsTable;//[Offset: 0x9b0, Size: 0x8]
	<PlayerStart*,int> a3ad27936d;//[Offset: 0x9b8, Size: 0x50]
	XtrmDroneStoreComponent* DroneStoreComponent;//[Offset: 0xa18, Size: 0x8]
	<int,PlayerStart*> 01d4802756;//[Offset: 0xa20, Size: 0x50]
	float MultiplierCarePackageNormal;//[Offset: 0xa70, Size: 0x4]
	bd392f72af[] 89a24bce30;//[Offset: 0xa78, Size: 0x10]
	DataTable*[] 4e6db3e8cb;//[Offset: 0xa90, Size: 0x10]
	class RailVehicleProcessor* RailVehicleProcessorClass;//[Offset: 0xaf0, Size: 0x8]
	SoftClassPath CarePackageControllerClass;//[Offset: 0xb20, Size: 0x18]
	TransportAircraftControllerComponent* ReviveSelfTransportAircraftController;//[Offset: 0xb38, Size: 0x8]
	float 96891f460e;//[Offset: 0xb48, Size: 0x4]
	class GraveyardCrowProcessor* GraveyardCrowProcessorClass;//[Offset: 0xb50, Size: 0x8]
	bool bFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb59, Size: 0x1]
	<enum,61704c5b90> 6e1906a3ee;//[Offset: 0xb60, Size: 0x50]
	<enum,float> 9510d3f6c0;//[Offset: 0xbe8, Size: 0x50]
	DataTable* 892f645cb1;//[Offset: 0xce8, Size: 0x8]
	class AIController* NewAIControllerClass;//[Offset: 0xd20, Size: 0x8]
	<FString,DataTable*> 47f8a42845;//[Offset: 0xd28, Size: 0x50]
	SoftClassPath CustomCarepackageRulesComponentClass;//[Offset: 0xd80, Size: 0x18]
	RailVehicleProcessor* RailVehicleProcessor;//[Offset: 0xd98, Size: 0x8]
	class ModeController* ModeControllerClass;//[Offset: 0xda8, Size: 0x8]
	TransportAircraft* fb725ed272;//[Offset: 0xdc0, Size: 0x8]
	class ModeController* RedZoneControllerClass;//[Offset: 0xdf0, Size: 0x8]
	GraveyardCrowProcessor* GraveyardCrowProcessor;//[Offset: 0xe00, Size: 0x8]
	TransportAircraftControllerComponent* TransportAircraftController;//[Offset: 0xe20, Size: 0x8]
	CarePackageController* CarePackageController;//[Offset: 0xe28, Size: 0x8]
	DataTable* RebirthItemsTable;//[Offset: 0xe58, Size: 0x8]
	AiActingComponent* AiActingComponent;//[Offset: 0xe60, Size: 0x8]
	DataTable* MiniRoyaleItemsTable;//[Offset: 0xe80, Size: 0x8]

--------------------------------
Class: BRRebirthSystemComponent.ActorComponent.Object
	TransportAircraftWalkieTalkie*[] d036c3dd4c;//[Offset: 0x138, Size: 0x10]
	Vector2D FlyingHeight;//[Offset: 0x150, Size: 0x8]
	StringTable* WalkieTalkieStringTable;//[Offset: 0x158, Size: 0x8]
	class TransportAircraftWalkieTalkie* 8f9388fbf7;//[Offset: 0x160, Size: 0x8]
	<Controller*> f6cdf98940;//[Offset: 0x168, Size: 0x50]

--------------------------------
Class: TransportAircraftWalkieTalkie.TransportAircraft.Pawn.Actor.Object

--------------------------------
Class: XtrmDroneStoreComponent.ActorComponent.Object
	fe8533f405* DroneCoinDataAsset;//[Offset: 0x188, Size: 0x8]
	<enum,class XtrmDrone_Delivery> 2d4d4c4895;//[Offset: 0x200, Size: 0x50]
	<enum,945c92e06d> b765ef9055;//[Offset: 0x2a8, Size: 0x50]

--------------------------------
Class: fe8533f405.ItemDataAsset.8c272391a6.DataAsset.Object
	4e89b32bdf 4e89b32bdf;//[Offset: 0x330, Size: 0xa0]

--------------------------------
Class: 4e89b32bdf
	<enum,Int32Range> d7ccda7a23;//[Offset: 0x0, Size: 0x50]
	<enum,StaticMesh*> 1bb8ffd0d0;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: XtrmDrone_Delivery.XtrmDrone.Character.Pawn.Actor.Object
	class DroneItemPackage* c5c16e27b3;//[Offset: 0x8c8, Size: 0x8]
	ParticleSystemComponent* 9e032519e8;//[Offset: 0x900, Size: 0x8]

--------------------------------
Class: XtrmDrone.Character.Pawn.Actor.Object
	bool e832372426;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	bool a38bbb2daa;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	XtrmDroneCameraHandlingComponent* DroneCameraHandlingComponent;//[Offset: 0x618, Size: 0x8]
	CollisionResponseContainer 27cfe726e3;//[Offset: 0x620, Size: 0x20]
	47c55f1997 c9cf76f12b;//[Offset: 0x680, Size: 0x40]
	ArrowComponent* AudioListener;//[Offset: 0x6c0, Size: 0x8]
	float d897b818fc;//[Offset: 0x6c8, Size: 0x4]
	CurveFloat* bf72c6d06a;//[Offset: 0x6d0, Size: 0x8]
	ParticleSystemComponent* DamagedParticleComponent;//[Offset: 0x6d8, Size: 0x8]
	MaterialInterface* 6fc822e63a;//[Offset: 0x6e0, Size: 0x40]
	SpringArmComponent* FirstPersonSpringArmInDrone;//[Offset: 0x720, Size: 0x8]
	TslCameraComponent* FirstPersonCameraInDrone;//[Offset: 0x728, Size: 0x8]
	CameraComponent* TransitionCameraInDrone;//[Offset: 0x750, Size: 0x8]
	class DamageType* 32c37120ed;//[Offset: 0x778, Size: 0x8]
	AkAudioEvent* 9d47b93df8;//[Offset: 0x788, Size: 0x8]
	class Actor[] bef140aaec;//[Offset: 0x790, Size: 0x10]
	Vector_NetQuantizeNormal MovementInput;//[Offset: 0x7ac, Size: 0xc]
	AkComponent* DroneEngineAkComponent;//[Offset: 0x7c0, Size: 0x8]
	CameraComponent* ThirdPersonCameraInDrone;//[Offset: 0x7d8, Size: 0x8]
	CurveFloat* afcac924bd;//[Offset: 0x830, Size: 0x8]
	float 29054e4c08;//[Offset: 0x848, Size: 0x4]
	class DamageType* aead2b0e22;//[Offset: 0x850, Size: 0x8]
	TeamMemberInfo MemberInfo;//[Offset: 0x858, Size: 0x8]
	SpringArmComponent* ThirdPersonSpringArmInDrone;//[Offset: 0x868, Size: 0x8]
	class Actor[] b3c7d5cb74;//[Offset: 0x870, Size: 0x10]
	AkAudioEvent* 8c9dd7f5ca;//[Offset: 0x880, Size: 0x8]
	float 2f8df2d9d0;//[Offset: 0x898, Size: 0x4]
	enum[] 05c4a4eb8f;//[Offset: 0x8a8, Size: 0x10]
	void Server_UpdateInput(const Vector_NetQuantizeNormal ClientMovementInput);// 0xffffff90c89e5001
	void Server_SetIsThirdPerson(const bool bNewThirdPerson);// 0xffffff90c89e5001
	void Server_ExitDroneControl();// 0xffffff90c89e5000
	void OnRep_RemainFuel();// 0xffffff90c89e5000
	void OnRep_MeshRigidBodyState();// 0xffffff90c89e5000
	void OnRep_InitializeFinishTime();// 0xffffff90c89e5000
	void OnRep_Durability();// 0xffffff90c89e5000
	void Multicast_OnDroneDisabled(const enum ControlEndReason);// 0xffffff90c89e5001
	void Multicast_OnDroneCrashed(const Vector_NetQuantize100 CrashedLocation);// 0xffffff90c89e5001
	void Multicast_OnActorHit(const float HitDamage);// 0xffffff90c89e5001

--------------------------------
Class: DroneItemPackage.ItemPackage.Actor.Object
	class Actor[] 043eb5bebf;//[Offset: 0x400, Size: 0x10]
	FName fb3be4a4fd;//[Offset: 0x410, Size: 0x8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x418, Size: 0x8]
	AkAudioEvent* f4e78c7dc2;//[Offset: 0x430, Size: 0x8]
	SimpleInterpolationMovement* MovementComponent;//[Offset: 0x448, Size: 0x8]
	enum 655ead8918;//[Offset: 0x460, Size: 0x1]
	void OnRep_DroneItemPackageState();// 0xffffff90c89e5000

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	Vector[] TestPoints;//[Offset: 0x290, Size: 0x10]
	fba292d92b[] BoneOverride;//[Offset: 0x2a8, Size: 0x10]
	float StayUprightDamping;//[Offset: 0x2b8, Size: 0x4]
	float FluidAngularDamping;//[Offset: 0x2bc, Size: 0x4]
	byte TickGroup;//[Offset: 0x2c8, Size: 0x1]
	float TestPointRadius;//[Offset: 0x2cc, Size: 0x4]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	float StayUprightStiffness;//[Offset: 0x2d4, Size: 0x4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x2d8, Size: 0xc]
	float WaveForceMultiplier;//[Offset: 0x2e4, Size: 0x4]
	Vector VelocityDamper;//[Offset: 0x2e8, Size: 0xc]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	float FluidDensity;//[Offset: 0x2fc, Size: 0x4]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float MeshDensity;//[Offset: 0x304, Size: 0x4]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float MaxUnderwaterVelocity;//[Offset: 0x30c, Size: 0x4]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	float FluidLinearDamping;//[Offset: 0x314, Size: 0x4]
	float[] PointDensityOverride;//[Offset: 0x318, Size: 0x10]
	OceanManager* OceanManager;//[Offset: 0x328, Size: 0x8]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]

--------------------------------
Class: fba292d92b
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float Density;//[Offset: 0x8, Size: 0x4]
	float TestRadius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OceanManager.Actor.Object
	Texture2D* HeightmapTexture;//[Offset: 0x2a8, Size: 0x8]
	float NetWorkTimeOffset;//[Offset: 0x2b0, Size: 0x4]
	float ModulationMaxHeight;//[Offset: 0x2b4, Size: 0x4]
	float GlobalWaveAmplitude;//[Offset: 0x2bc, Size: 0x4]
	float GlobalWaveSpeed;//[Offset: 0x2c0, Size: 0x4]
	Landscape* Landscape;//[Offset: 0x2c8, Size: 0x8]
	ae2a35f57d[] WaveSetOffsetsOverride;//[Offset: 0x2d0, Size: 0x10]
	float ModulationPower;//[Offset: 0x2f0, Size: 0x4]
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	08edeafce5[] WaveClusters;//[Offset: 0x300, Size: 0x10]
	float ModulationStartHeight;//[Offset: 0x310, Size: 0x4]
	float DistanceCheck;//[Offset: 0x314, Size: 0x4]
	Vector2D GlobalWaveDirection;//[Offset: 0x318, Size: 0x8]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0xffffff90c89e5001
	Vector GetWaveHeightValue(out const Vector Location, const World* World, bool HeightOnly, bool TwoIterations);// 0xffffff90c89e5005
	LinearColor GetHeightmapPixel(float U, float V);// 0xffffff90c89e5003

--------------------------------
Class: ae2a35f57d
	08edeafce5 Wave01;//[Offset: 0x0, Size: 0x14]
	08edeafce5 Wave02;//[Offset: 0x14, Size: 0x14]
	08edeafce5 Wave03;//[Offset: 0x28, Size: 0x14]
	08edeafce5 Wave04;//[Offset: 0x3c, Size: 0x14]
	08edeafce5 Wave05;//[Offset: 0x50, Size: 0x14]
	08edeafce5 Wave06;//[Offset: 0x64, Size: 0x14]
	08edeafce5 Wave07;//[Offset: 0x78, Size: 0x14]
	08edeafce5 Wave08;//[Offset: 0x8c, Size: 0x14]

--------------------------------
Class: 08edeafce5
	float Rotation;//[Offset: 0x0, Size: 0x4]
	float Length;//[Offset: 0x4, Size: 0x4]
	float Amplitude;//[Offset: 0x8, Size: 0x4]
	float Steepness;//[Offset: 0xc, Size: 0x4]
	float TimeScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: XtrmDroneCameraHandlingComponent.ActorComponent.Object
	<enum,55154d2e74> 918103eeb7;//[Offset: 0x120, Size: 0x50]

--------------------------------
Class: 55154d2e74
	CurveFloat* FadeCurve;//[Offset: 0x0, Size: 0x8]
	FName 49d171ef81;//[Offset: 0x8, Size: 0x8]
	FName eda1e62bdb;//[Offset: 0x10, Size: 0x8]
	float 4caa923790;//[Offset: 0x18, Size: 0x4]
	CurveFloat* e8bf322bf1;//[Offset: 0x20, Size: 0x8]
	LinearColor e377fb81b7;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: 47c55f1997
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 0xc]
	Quat Quaternion;//[Offset: 0x10, Size: 0x10]
	Vector_NetQuantize100 9b8a39582c;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 0xc]
	byte Flags;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: 945c92e06d
	DroneStoreItemTableRow[] Rows;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DroneStoreItemTableRow.TableRowBase
	uint32 ec8b185543;//[Offset: 0x8, Size: 0x4]
	uint32 b3a928c902;//[Offset: 0xc, Size: 0x4]
	enum 9d6c95e07a;//[Offset: 0x10, Size: 0x1]
	uint32 0766fe022a;//[Offset: 0x14, Size: 0x4]
	uint32 8d9d7be126;//[Offset: 0x18, Size: 0x4]
	uint32 Weight;//[Offset: 0x1c, Size: 0x4]
	ItemDataAsset* ItemData;//[Offset: 0x20, Size: 0x8]
	enum Group;//[Offset: 0x28, Size: 0x1]
	uint32 Price;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: bd392f72af
	float 56464e1661;//[Offset: 0x8, Size: 0x4]
	FName[] 02521a52b6;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: RailVehicleProcessor.Actor.Object
	DataTable* f53d14e013;//[Offset: 0x2a8, Size: 0x8]
	Int32Range IdleRailCount;//[Offset: 0x2b0, Size: 0x10]
	SoftObjectPath ce72ea8152;//[Offset: 0x2c0, Size: 0x18]
	bool bIsNoRailVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	421b357fe2 98cdbd51ca;//[Offset: 0x2e0, Size: 0x50]

--------------------------------
Class: TransportAircraftControllerComponent.ActorComponent.Object
	class TransportAircraft* 75d60984b8;//[Offset: 0x120, Size: 0x8]
	TransportAircraft*[] d036c3dd4c;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: GraveyardCrowProcessor.Actor.Object

--------------------------------
Class: 61704c5b90
	bd392f72af[] 3e8e0857bb;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CarePackageController.ModeController.AIController.Controller.Actor.Object
	fff1694c6c* b92aedaec4;//[Offset: 0x430, Size: 0x8]
	class fff1694c6c* CarePackageCustomItemSpawnerClass;//[Offset: 0x438, Size: 0x8]
	float CarePackageLifeTime;//[Offset: 0x440, Size: 0x4]
	float DropAreaRate;//[Offset: 0x444, Size: 0x4]
	XtrmPassCarePackageArea*[] 0ad5445ffa;//[Offset: 0x448, Size: 0x10]
	Vector2D SpawnInterval;//[Offset: 0x458, Size: 0x8]
	<enum,Vector2D> SpawnDelayMap;//[Offset: 0x460, Size: 0x50]
	class TransportAircraftCarePackage* 65c7d25a59;//[Offset: 0x4b0, Size: 0x8]
	fff1694c6c* CarePackageCustomItemSpawner;//[Offset: 0x4b8, Size: 0x8]
	int MaxConcurrentFlareAirplanes;//[Offset: 0x4d8, Size: 0x4]
	Box2D[] DropRestrictedArea;//[Offset: 0x4e0, Size: 0x10]
	class TransportAircraftCarePackage* 3f5134e0b3;//[Offset: 0x4f0, Size: 0x8]
	SoftClassPath fb2e94e0db;//[Offset: 0x4f8, Size: 0x18]
	SoftClassPath TransportAircraftFlareGunVehicleClassString;//[Offset: 0x510, Size: 0x18]
	class fff1694c6c* 9dc19d66ac;//[Offset: 0x528, Size: 0x8]
	float SpawnAreaRadius;//[Offset: 0x530, Size: 0x4]
	XtrmTransportAircraftCarePackageAreaRectangle* 0403bbfdf3;//[Offset: 0x534, Size: 0x20]
	TransportAircraftCarePackage*[] acab83ff3f;//[Offset: 0x558, Size: 0x10]
	class TransportAircraftCarePackage* 2e5be53ec6;//[Offset: 0x568, Size: 0x8]
	float MinWhitezoneDiameter;//[Offset: 0x570, Size: 0x4]
	XtrmPassCarePackageAreaRectangle*[] 87500d3c7f;//[Offset: 0x578, Size: 0x10]
	Vector2D FlyHeight_Flare;//[Offset: 0x588, Size: 0x8]
	Vector2D StartDelay;//[Offset: 0x5b4, Size: 0x8]
	Vector2D FlyingHeight;//[Offset: 0x5c0, Size: 0x8]
	SoftClassPath a07c91f573;//[Offset: 0x5c8, Size: 0x18]
	int MaxCheckDropLocation;//[Offset: 0x5e4, Size: 0x4]
	float WhiteZoneSpawnInnerRate;//[Offset: 0x5e8, Size: 0x4]
	void SpawnTransportAircraftCarePackageCustom(out const Vector DropLocation, out const int InPackageID, out const int TeamSize, FString InCallerName);// 0xffffff90c89e5004
	void SpawnTransportAircraftCarePackage(int InAircraftID, bool CopyIntersectionInfo);// 0xffffff90c89e5002
	bool SetNextCarePackageInBlackboard();// 0xffffff90c89e5001
	void InitCarePackageSetting();// 0xffffff90c89e5000
	float GetSpawnInterval();// 0xffffff90c89e5001
	float GetSpawnDelayFromMap(enum InDeployType);// 0xffffff90c89e5002
	float GetSpawnAreaRadius();// 0xffffff90c89e5001

--------------------------------
Class: fff1694c6c.Object
	ItemInstance[] CreateItemInstances(int inNumPlayers);// 0xffffff90c89e5002

--------------------------------
Class: XtrmPassCarePackageArea.XtrmPassArea.Actor.Object

--------------------------------
Class: TransportAircraftCarePackage.TransportAircraft.Pawn.Actor.Object
	class CarePackageItem* CarePackageItemClass;//[Offset: 0x5c0, Size: 0x8]
	bool bUseCustomCarepackageItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool d6418bc2db;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c9, Size: 0x1]
	class XtrmVehicleDrop* CustomCarepackageItem;//[Offset: 0x600, Size: 0x8]
	DropCarePackageTableData[] DropCarePackageTableData;//[Offset: 0x608, Size: 0x10]
	bool IsPlayInEditor();// 0xffffff90c89e5001

--------------------------------
Class: CarePackageItem.ItemPackage.Actor.Object
	class XtrmParticle* 3a1f95bc4e;//[Offset: 0x3e0, Size: 0x8]
	int CarePackageOption;//[Offset: 0x3f0, Size: 0x4]
	FName 2c8efe311b;//[Offset: 0x3f4, Size: 0x8]
	XtrmParticle* aba5e722ba;//[Offset: 0x400, Size: 0x8]
	AsyncStaticMeshComponent* VisualStaticMesh;//[Offset: 0x408, Size: 0x8]
	bool 2b1f77cacc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	int ef2f216954;//[Offset: 0x41c, Size: 0x4]
	AkAudioEvent* f4e78c7dc2;//[Offset: 0x440, Size: 0x8]
	bool 9ebdaea16a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	XtrmParticle* 91a815dedf;//[Offset: 0x460, Size: 0x8]
	float 65f27f5bd5;//[Offset: 0x468, Size: 0x4]
	class XtrmParticle* 3412cef5e1;//[Offset: 0x470, Size: 0x8]
	CarePackageParachute* Parachute;//[Offset: 0x478, Size: 0x8]
	XtrmParticle* e871f085f1;//[Offset: 0x480, Size: 0x8]
	class CarePackageParachute* 855d101257;//[Offset: 0x488, Size: 0x8]
	CarePackageItemMoveComp* MovementComponent;//[Offset: 0x4a8, Size: 0x8]
	FName 34d12fbe25;//[Offset: 0x4b4, Size: 0x8]
	class XtrmParticle* 87d73b9f59;//[Offset: 0x4c0, Size: 0x8]
	bool abf8ba3c2f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	FName ac3b3b6319;//[Offset: 0x4cc, Size: 0x8]
	XtrmParticle* ff578a266d;//[Offset: 0x4d8, Size: 0x8]
	class XtrmParticle* 992f29fe8c;//[Offset: 0x4e8, Size: 0x8]
	FName 19d3512f8b;//[Offset: 0x4f0, Size: 0x8]
	float 1aa31c1d4a;//[Offset: 0x4f8, Size: 0x4]
	bool f003e21079;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	StaticMesh* 7e97ef9847;//[Offset: 0x510, Size: 0x40]
	void OnTranslucentIconOnMap();// 0xffffff90c89e5000
	void OnRep_IsFalling();// 0xffffff90c89e5000
	void OnRep_CarePackageOption();// 0xffffff90c89e5000
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5005
	void OnHideIconOnMap();// 0xffffff90c89e5000

--------------------------------
Class: CarePackageParachute.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: CarePackageItemMoveComp.SimpleInterpolationMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object

--------------------------------
Class: XtrmVehicleDrop.Actor.Object
	class Pawn* VehicleSpawnClass;//[Offset: 0x2a8, Size: 0x8]
	bool bCorrectForGroundStaticMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	SkeletalMeshComponent* FakeMesh;//[Offset: 0x2c0, Size: 0x8]
	ProjectileMovementComponent* MovementComponent;//[Offset: 0x2c8, Size: 0x8]
	Vector2D VelocityClampInMap;//[Offset: 0x2d0, Size: 0x8]
	SkeletalMeshComponent* ParachuteMesh;//[Offset: 0x2d8, Size: 0x8]
	float AltitudeCheck_ArriveDistance;//[Offset: 0x2e0, Size: 0x4]
	float AltitudeCheck_TraceDistance;//[Offset: 0x2e8, Size: 0x4]
	float AltitudeCheck_LoopTime;//[Offset: 0x2ec, Size: 0x4]
	BoxComponent* CollisionComponent;//[Offset: 0x2f0, Size: 0x8]
	Vector2D VelocityClampOutMap;//[Offset: 0x2f8, Size: 0x8]
	float AltitudeCheck_SphereTraceRadius;//[Offset: 0x304, Size: 0x4]
	bool bUseAltitudeVelocityClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float ProjectileGravityScale;//[Offset: 0x164, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x168, Size: 0xc]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x174, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x174, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x174, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x174, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x174, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x174, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x175, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x175, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x175, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x175, Size: 0x1]
	float InterpRotationTime;//[Offset: 0x178, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x17c, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x18c, Size: 0x20]
	float Bounciness;//[Offset: 0x1ac, Size: 0x4]
	delegate OnProjectileStop;//[Offset: 0x1b0, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x1c0, Size: 0x4]
	float InitialSpeed;//[Offset: 0x1d0, Size: 0x4]
	float PreviousHitTime;//[Offset: 0x1f0, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x218, Size: 0x10]
	float InterpLocationMaxLagDistance;//[Offset: 0x240, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x260, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x264, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x268, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x26c, Size: 0x4]
	float MaxSpeed;//[Offset: 0x270, Size: 0x4]
	float Friction;//[Offset: 0x274, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x278, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x27c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0xffffff90c89e5001
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xffffff90c89e5001
	void SetInterpolatedComponent(SceneComponent* Component);// 0xffffff90c89e5001
	void ResetInterpolation();// 0xffffff90c89e5000
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xffffff90c89e5001
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xffffff90c89e5002
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xffffff90c89e5002
	Vector LimitVelocity(Vector NewVelocity);// 0xffffff90c89e5002
	bool IsVelocityUnderSimulationThreshold();// 0xffffff90c89e5001
	bool IsInterpolationComplete();// 0xffffff90c89e5001

--------------------------------
Class: DropCarePackageTableData
	int DropCount;//[Offset: 0x0, Size: 0x4]
	float DropPercent;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: XtrmTransportAircraftCarePackageAreaRectangle.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: AiActingComponent.ActorComponent.Object
	XtrmCharacter*[] 6391859725;//[Offset: 0x120, Size: 0x10]
	int[] 363c2c1f90;//[Offset: 0x148, Size: 0x10]
	CurveFloat* 027044b633;//[Offset: 0x158, Size: 0x8]
	TransportAircraft* TransportAircraft;//[Offset: 0x168, Size: 0x8]
	XtrmAIController*[] 193ae82d3a;//[Offset: 0x170, Size: 0x10]
	XtrmAIController*[] f7366f6f1b;//[Offset: 0x198, Size: 0x10]
	DataTable* FeedingDataTable;//[Offset: 0x1b0, Size: 0x8]
	class 54a318b1a5* dd39d820c7;//[Offset: 0x1c0, Size: 0x8]

--------------------------------
Class: XtrmAIController.AIController.Controller.Actor.Object
	<FName,BehaviorTree*> 4941169fe1;//[Offset: 0x430, Size: 0x50]
	enum AiType;//[Offset: 0x4a0, Size: 0x1]
	BehaviorTree* CurrentRootBehavior;//[Offset: 0x4e8, Size: 0x8]
	XtrmCharacterSensingComponent* SensingComponent;//[Offset: 0x550, Size: 0x8]
	void OnSpottedTheEnemyBySound(Pawn* Enemy, out const Vector Location, float Volume);// 0xffffff90c89e5003
	void OnSpottedTheEnemy(Pawn* Enemy);// 0xffffff90c89e5001

--------------------------------
Class: XtrmCharacterSensingComponent.PawnSensingComponent.ActorComponent.Object

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float LOSHearingThreshold;//[Offset: 0x11c, Size: 0x4]
	float HearingMaxSoundAge;//[Offset: 0x124, Size: 0x4]
	float HearingThreshold;//[Offset: 0x128, Size: 0x4]
	float SensingInterval;//[Offset: 0x12c, Size: 0x4]
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1]
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x130, Size: 0x1]
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x130, Size: 0x1]
	float PeripheralVisionAngle;//[Offset: 0x134, Size: 0x4]
	delegate OnSeePawn;//[Offset: 0x138, Size: 0x10]
	delegate OnHearNoise;//[Offset: 0x148, Size: 0x10]
	float SightRadius;//[Offset: 0x160, Size: 0x4]
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0xffffff90c89e5001
	void SetSensingInterval(const float NewSensingInterval);// 0xffffff90c89e5001
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0xffffff90c89e5001
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0xffffff90c89e5001
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0xffffff90c89e5003
	float GetPeripheralVisionCosine();// 0xffffff90c89e5001
	float GetPeripheralVisionAngle();// 0xffffff90c89e5001

--------------------------------
Class: 54a318b1a5.DamageType.Object
	enum WeaponCustomOfDeathCategory;//[Offset: 0x78, Size: 0x1]
	f8766139d1[] DamageRatioInfos;//[Offset: 0x80, Size: 0x10]
	enum DamageTypeCategory;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: XtrmPhysicsWaterVolume.PhysicsVolume.Volume.Brush.Actor.Object
	OceanManager* OceanManager;//[Offset: 0x2f8, Size: 0x8]
	class XtrmParticle* 2cfc181b9b;//[Offset: 0x308, Size: 0x8]
	class XtrmParticle* 1e83cd3b1f;//[Offset: 0x318, Size: 0x8]
	<class Actor,class XtrmParticle> 443be2cb9b;//[Offset: 0x358, Size: 0x50]
	class Actor[] c843357c40;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: EventObjectComponent.ActorComponent.Object
	SoftObjectPath EventObjectDescTable;//[Offset: 0x120, Size: 0x18]
	DataTable* LoadedEventObjectDescTable;//[Offset: 0x150, Size: 0x8]

--------------------------------
Class: XtrmFarLandscape.Actor.Object
	RuntimeMeshComponent* RuntimeMeshComponent;//[Offset: 0x2f8, Size: 0x8]
	MaterialInterface* 1c4d513535;//[Offset: 0x308, Size: 0x8]
	51b98327da* 1397098ff0;//[Offset: 0x310, Size: 0x8]

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* BodySetup;//[Offset: 0x590, Size: 0x8]
	RuntimeMesh* RuntimeMeshReference;//[Offset: 0x598, Size: 0x8]
	BodySetup*[] e660f4ccdd;//[Offset: 0x5a0, Size: 0x10]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const 4b6b0d2b3d[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0xffffff90c89e5006
	void UpdateMeshSectionFromBuilder(int SectionID, cb5d9227ab* MeshData);// 0xffffff90c89e5002
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const fc502227e5[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0xffffff90c89e500b
	bool ShouldSerializeMeshData();// 0xffffff90c89e5001
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0xffffff90c89e5001
	void SetSectionMaterial(int SectionID, MaterialInterface* Material);// 0xffffff90c89e5002
	void SetRuntimeMeshMobility(enum NewMobility);// 0xffffff90c89e5001
	void SetRuntimeMesh(RuntimeMesh* NewMesh);// 0xffffff90c89e5001
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0xffffff90c89e5002
	enum SetMeshSectionPacked_Blueprint(int SectionIndex, out const 4b6b0d2b3d[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0xffffff90c89e500b
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0xffffff90c89e5002
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0xffffff90c89e5002
	enum SetMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const fc502227e5[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0xffffff90c89e5010
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0xffffff90c89e5003
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0xffffff90c89e5002
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0xffffff90c89e5001
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0xffffff90c89e5001
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0xffffff90c89e5001
	void SetCollisionMode(enum NewMode);// 0xffffff90c89e5001
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0xffffff90c89e5001
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0xffffff90c89e5001
	void RemoveCollisionSphere(int Index);// 0xffffff90c89e5001
	void RemoveCollisionCapsule(int Index);// 0xffffff90c89e5001
	void RemoveCollisionBox(int Index);// 0xffffff90c89e5001
	bool IsMeshSectionVisible(int SectionIndex);// 0xffffff90c89e5002
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0xffffff90c89e5002
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0xffffff90c89e5002
	bool IsCollisionUsingComplexAsSimple();// 0xffffff90c89e5001
	bool IsCollisionUsingAsyncCooking();// 0xffffff90c89e5001
	bool IsAsyncCollisionCookingPending();// 0xffffff90c89e5001
	MaterialInterface* GetSectionMaterial(int SectionID);// 0xffffff90c89e5002
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0xffffff90c89e5002
	void GetSectionIdAndFaceIdFromCollisionFaceIndex(int FaceIndex, out int SectionIndex, out int SectionFaceIndex);// 0xffffff90c89e5003
	Box GetSectionBoundingBox(int SectionIndex);// 0xffffff90c89e5002
	enum GetRuntimeMeshMobility();// 0xffffff90c89e5001
	RuntimeMesh* GetRuntimeMesh();// 0xffffff90c89e5001
	RuntimeMesh* GetOrCreateRuntimeMesh();// 0xffffff90c89e5001
	int GetNumSections();// 0xffffff90c89e5001
	int GetAvailableSectionIndex();// 0xffffff90c89e5001
	bool DoesSectionExist(int SectionIndex);// 0xffffff90c89e5002
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const 4b6b0d2b3d[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0xffffff90c89e500a
	void CreateMeshSectionFromBuilder(int SectionID, cb5d9227ab* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0xffffff90c89e5004
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const fc502227e5[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0xffffff90c89e500f
	void CookCollisionNow();// 0xffffff90c89e5000
	void ClearMeshSection(int SectionIndex);// 0xffffff90c89e5001
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0xffffff90c89e5001
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0xffffff90c89e5001
	void ClearCollisionSpheres();// 0xffffff90c89e5000
	void ClearCollisionCapsules();// 0xffffff90c89e5000
	void ClearCollisionBoxes();// 0xffffff90c89e5000
	void ClearAllMeshSections();// 0xffffff90c89e5000
	void ClearAllMeshCollisionSections();// 0xffffff90c89e5000
	void ClearAllConvexCollisionSections();// 0xffffff90c89e5000
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0xffffff90c89e5002
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0xffffff90c89e5002
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0xffffff90c89e5002
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0xffffff90c89e5002

--------------------------------
Class: 4b6b0d2b3d
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	fc502227e5 Tangent;//[Offset: 0x18, Size: 0x10]
	LinearColor Color;//[Offset: 0x28, Size: 0x10]
	Vector2D UV0;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: fc502227e5
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: cb5d9227ab.3cd9414fb2.Object
	int SetVertex(out cb5d9227ab* OutMeshBuilder, int Index, Vector InPosition, Vector Normal, fc502227e5 Tangent, Vector2D UV0, LinearColor Color);// 0xffffff90c89e5008
	int SetUV(out cb5d9227ab* OutMeshBuilder, int Index, Vector2D Value, int Channel);// 0xffffff90c89e5005
	int SetTangents(out cb5d9227ab* OutMeshBuilder, int Index, Vector TangentX, Vector TangentY, Vector TangentZ);// 0xffffff90c89e5006
	int SetTangent(out cb5d9227ab* OutMeshBuilder, int Index, fc502227e5 Value);// 0xffffff90c89e5004
	int SetPosition(out cb5d9227ab* OutMeshBuilder, int Index, Vector Value);// 0xffffff90c89e5004
	void SetNumVertices(out cb5d9227ab* OutMeshBuilder, int NewNum);// 0xffffff90c89e5002
	void SetNumIndices(out cb5d9227ab* OutMeshBuilder, int NewNum);// 0xffffff90c89e5002
	int SetNormalTangent(out cb5d9227ab* OutMeshBuilder, int Index, Vector Normal, fc502227e5 Tangent);// 0xffffff90c89e5005
	int SetNormal(out cb5d9227ab* OutMeshBuilder, int Index, out const Vector4 Value);// 0xffffff90c89e5004
	void SetIndex(out cb5d9227ab* OutMeshBuilder, int Index, int Value);// 0xffffff90c89e5003
	int SetColor(out cb5d9227ab* OutMeshBuilder, int Index, LinearColor Value);// 0xffffff90c89e5004
	int NumVertices(out cb5d9227ab* OutMeshBuilder);// 0xffffff90c89e5002
	int NumUVChannels(out cb5d9227ab* OutMeshBuilder);// 0xffffff90c89e5002
	int NumIndices(out cb5d9227ab* OutMeshBuilder);// 0xffffff90c89e5002
	bool IsUsingHighPrecisionUVs(out cb5d9227ab* OutMeshBuilder);// 0xffffff90c89e5002
	bool IsUsingHighPrecisionTangents(out cb5d9227ab* OutMeshBuilder);// 0xffffff90c89e5002
	bool IsUsing32BitIndices(out cb5d9227ab* OutMeshBuilder);// 0xffffff90c89e5002
	bool IsReadonly(out cb5d9227ab* OutMeshBuilder);// 0xffffff90c89e5002
	Vector2D GetUV(out cb5d9227ab* OutMeshBuilder, int Index, int Channel);// 0xffffff90c89e5004
	Vector GetTangent(out cb5d9227ab* OutMeshBuilder, int Index);// 0xffffff90c89e5003
	Vector GetPosition(out cb5d9227ab* OutMeshBuilder, int Index);// 0xffffff90c89e5003
	Vector4 GetNormal(out cb5d9227ab* OutMeshBuilder, int Index);// 0xffffff90c89e5003
	int GetIndex(out cb5d9227ab* OutMeshBuilder, int Index);// 0xffffff90c89e5003
	LinearColor GetColor(out cb5d9227ab* OutMeshBuilder, int Index);// 0xffffff90c89e5003
	void EmptyVertices(out cb5d9227ab* OutMeshBuilder, int Slack);// 0xffffff90c89e5002
	void EmptyIndices(out cb5d9227ab* OutMeshBuilder, int Slack);// 0xffffff90c89e5002
	int AddVertex(out cb5d9227ab* OutMeshBuilder, Vector InPosition, Vector Normal, fc502227e5 Tangent, Vector2D UV0, LinearColor Color);// 0xffffff90c89e5007
	int AddTriangle(out cb5d9227ab* OutMeshBuilder, int Index0, int Index1, int Index2);// 0xffffff90c89e5005
	int AddIndex(out cb5d9227ab* OutMeshBuilder, int NewIndex);// 0xffffff90c89e5003

--------------------------------
Class: 3cd9414fb2.Object

--------------------------------
Class: RuntimeMesh.Object
	MaterialInterface*[] Materials;//[Offset: 0x78, Size: 0x10]
	delegate CollisionUpdated;//[Offset: 0x88, Size: 0x10]
	BodySetup*[] e660f4ccdd;//[Offset: 0xa0, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0xd8, Size: 0x8]
	enum 12a8ca72f2;//[Offset: 0xe0, Size: 0x1]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const 4b6b0d2b3d[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0xffffff90c89e5006
	void UpdateMeshSectionFromBuilder(int SectionID, cb5d9227ab* MeshData);// 0xffffff90c89e5002
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const fc502227e5[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0xffffff90c89e500b
	bool ShouldSerializeMeshData();// 0xffffff90c89e5001
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0xffffff90c89e5001
	void SetSectionTessellationTriangles(int SectionID, out const int[] Triangles);// 0xffffff90c89e5002
	void SetSectionMaterial(int SectionID, MaterialInterface* Material);// 0xffffff90c89e5002
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0xffffff90c89e5002
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0xffffff90c89e5002
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0xffffff90c89e5002
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0xffffff90c89e5003
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0xffffff90c89e5002
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0xffffff90c89e5001
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0xffffff90c89e5001
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0xffffff90c89e5001
	void SetCollisionMode(enum NewMode);// 0xffffff90c89e5001
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0xffffff90c89e5001
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0xffffff90c89e5001
	void RemoveCollisionSphere(int Index);// 0xffffff90c89e5001
	void RemoveCollisionCapsule(int Index);// 0xffffff90c89e5001
	void RemoveCollisionBox(int Index);// 0xffffff90c89e5001
	bool IsMeshSectionVisible(int SectionIndex);// 0xffffff90c89e5002
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0xffffff90c89e5002
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0xffffff90c89e5002
	bool IsCollisionUsingComplexAsSimple();// 0xffffff90c89e5001
	bool IsCollisionUsingAsyncCooking();// 0xffffff90c89e5001
	MaterialInterface* GetSectionMaterial(int SectionID);// 0xffffff90c89e5002
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0xffffff90c89e5002
	void GetSectionIdAndFaceIdFromCollisionFaceIndex(int FaceIndex, out int SectionIndex, out int SectionFaceIndex);// 0xffffff90c89e5003
	Box GetSectionBoundingBox(int SectionIndex);// 0xffffff90c89e5002
	int GetNumSections();// 0xffffff90c89e5001
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xffffff90c89e5003
	enum GetCollisionMode();// 0xffffff90c89e5001
	int GetAvailableSectionIndex();// 0xffffff90c89e5001
	bool DoesSectionExist(int SectionIndex);// 0xffffff90c89e5002
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const 4b6b0d2b3d[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0xffffff90c89e500a
	void CreateMeshSectionFromBuilder(int SectionID, cb5d9227ab* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0xffffff90c89e5004
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const fc502227e5[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0xffffff90c89e500f
	void CookCollisionNow();// 0xffffff90c89e5000
	void ClearMeshSection(int SectionIndex);// 0xffffff90c89e5001
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0xffffff90c89e5001
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0xffffff90c89e5001
	void ClearCollisionSpheres();// 0xffffff90c89e5000
	void ClearCollisionCapsules();// 0xffffff90c89e5000
	void ClearCollisionBoxes();// 0xffffff90c89e5000
	void ClearAllMeshSections();// 0xffffff90c89e5000
	void ClearAllMeshCollisionSections();// 0xffffff90c89e5000
	void ClearAllConvexCollisionSections();// 0xffffff90c89e5000
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0xffffff90c89e5002
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0xffffff90c89e5002
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0xffffff90c89e5002
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0xffffff90c89e5002

--------------------------------
Class: RuntimeMeshCollisionSphere
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RuntimeMeshCollisionCapsule
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float Radius;//[Offset: 0x18, Size: 0x4]
	float Length;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: RuntimeMeshCollisionBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Extents;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: 51b98327da.DataAsset.Object
	<FName,f6a9a62aae> e7b00d20aa;//[Offset: 0x70, Size: 0x50]
	9b629b9737[] 9c1a905220;//[Offset: 0xc0, Size: 0x10]
	Vector[] 9b30af2146;//[Offset: 0xd0, Size: 0x10]
	Vector2D[] bac001a551;//[Offset: 0xe0, Size: 0x10]
	Vector[] 8367c4863f;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: f6a9a62aae
	FName LevelName;//[Offset: 0x0, Size: 0x8]
	int a50072e88d;//[Offset: 0x8, Size: 0x4]
	int 740316f4a2;//[Offset: 0xc, Size: 0x4]
	FName 347190db12;//[Offset: 0x10, Size: 0x8]
	FName 271e6c4db8;//[Offset: 0x18, Size: 0x8]
	byte f2077b1cef;//[Offset: 0x20, Size: 0x1]
	int d1540abfad;//[Offset: 0x24, Size: 0x4]
	int[] e59b67a202;//[Offset: 0x28, Size: 0x10]
	int[] cd8b38e5b3;//[Offset: 0x38, Size: 0x10]
	int eea1984dec;//[Offset: 0x48, Size: 0x4]
	FName d9c7c3d2d3;//[Offset: 0x4c, Size: 0x8]
	FName ed7bf69f03;//[Offset: 0x54, Size: 0x8]
	IntPoint f90f6c315a;//[Offset: 0x5c, Size: 0x8]

--------------------------------
Class: 9b629b9737
	int 7c06eecf8d;//[Offset: 0x4, Size: 0x4]
	int[] ac3d7184b5;//[Offset: 0x8, Size: 0x10]
	int[] 1e93bfb53e;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: XtrmCharOptimizeManager.Actor.Object

--------------------------------
Class: XtrmSimpleCollisionManager.Actor.Object

--------------------------------
Class: XtrmCharacter_C.XtrmCharacter.Character.Pawn.Actor.Object
	3aeed9dadb UberGraphFrame;//[Offset: 0x2420, Size: 0x8]
	void BP_ChangeClothStyle(int Type);// 0xffffff90c89e5001
	void ExecuteUbergraph_XtrmCharacter(int EntryPoint, int K2Node_Event_Type, bool K2Node_SwitchInteger_CmpSuccess);// 0xffffff90c89e5001

--------------------------------
Class: BP_XtrmBattleRoyaleHUD_C.XtrmBattleRoyaleHUD.XtrmHUD.HUD.Actor.Object
	3aeed9dadb UberGraphFrame;//[Offset: 0x9b0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x9b8, Size: 0x8]
	void ReceiveBeginPlay();// 0xffffff90c89e5000
	void ExecuteUbergraph_BP_XtrmBattleRoyaleHUD(int EntryPoint);// 0xffffff90c89e5001

--------------------------------
Class: XtrmBattleRoyaleHUD.XtrmHUD.HUD.Actor.Object

--------------------------------
Class: XtrmHUD.HUD.Actor.Object
	<enum,53a54d5dc1> d574597d8c;//[Offset: 0x3f0, Size: 0x50]
	class ItemStudio* 85c4aa73e5;//[Offset: 0x440, Size: 0x8]
	float CurrentPlayzoneRadius;//[Offset: 0x448, Size: 0x4]
	9e70421366 3ace51c483;//[Offset: 0x450, Size: 0x30]
	float NextPlayzoneRadius;//[Offset: 0x480, Size: 0x4]
	<FName,63f07bee1d> 1ea95497b5;//[Offset: 0x4d8, Size: 0x50]
	e491544ab0* e491544ab0;//[Offset: 0x528, Size: 0x8]
	<FName,5319e5b672> b7656a0723;//[Offset: 0x530, Size: 0x50]
	class GrenadeTrajectoryLine* c05d45fce1;//[Offset: 0x580, Size: 0x40]
	<FName,53a54d5dc1> afe56e80cc;//[Offset: 0x5d8, Size: 0x50]
	<int,ItemStudio*> 5461c7a3da;//[Offset: 0x628, Size: 0x50]
	ItemStudio* OutlineStudio;//[Offset: 0x678, Size: 0x8]
	5276879caf[] 35aa3a0a1f;//[Offset: 0x688, Size: 0x10]
	<FName,63f07bee1d> 23bd87af35;//[Offset: 0x698, Size: 0x50]
	BlockInputUserWidget*[] 6db6469279;//[Offset: 0x700, Size: 0x10]
	GrenadeTrajectoryLine* GrenadeTrajectoryLine;//[Offset: 0x710, Size: 0x8]
	GameSoundTracker* GameSoundTracker;//[Offset: 0x730, Size: 0x8]
	<FName,63f07bee1d> 9dff5a6b8e;//[Offset: 0x738, Size: 0x50]
	Vector NextPlayzonePosition;//[Offset: 0x7a8, Size: 0xc]
	<FName,63f07bee1d> 7c1fe4a391;//[Offset: 0x7b8, Size: 0x50]
	63f07bee1d 2f27ba774b;//[Offset: 0x848, Size: 0x48]
	TslSceneCaptureWorld* SceneCaptureWorld;//[Offset: 0x890, Size: 0x8]
	Vector CurrentPlayzonePosition;//[Offset: 0x898, Size: 0xc]
	class GameSoundTracker* a059dc1c2e;//[Offset: 0x8a8, Size: 0x8]
	<FName,63f07bee1d> 0bd9e2be2e;//[Offset: 0x8b0, Size: 0x50]
	TextureRenderTarget2D* 408be271b5;//[Offset: 0x900, Size: 0x8]
	class e491544ab0* 5d554e748e;//[Offset: 0x920, Size: 0x8]
	void WidgetToggle(out const FName WidgetName);// 0xffffff90c89e5001
	void WidgetShow(FName WidgetName, enum ShowType);// 0xffffff90c89e5002
	void WidgetCreate(FName WidgetName, 63f07bee1d Config);// 0xffffff90c89e5002
	void TestChangeGameFlowEvents(const byte GameFlowEventVal);// 0xffffff90c89e5001
	void OnWidgetClassLoaded(const FName WidgetName, const 63f07bee1d AsyncLoadedWidgetConfig);// 0xffffff90c89e5002
	void OnGameFlowEventChanged(const enum ChangedGameFlowEvent);// 0xffffff90c89e5001
	bool IsWidgetShow(out const FName WidgetName);// 0xffffff90c89e5002
	XtrmUserWidget* GetWidget(out const FName WidgetName);// 0xffffff90c89e5002
	void DisplayActorNames(FName InClassName, float InInterval, FName InItemName, float InCullDistance);// 0xffffff90c89e5004
	void DestroyAllWidgets();// 0xffffff90c89e5000

--------------------------------
Class: 53a54d5dc1
	FName[] WidgetList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: 63f07bee1d
	bool bDefaultShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int ZOrder;//[Offset: 0x4, Size: 0x4]
	class XtrmUserWidget* WidgetClassReference;//[Offset: 0x8, Size: 0x40]

--------------------------------
Class: ItemStudio.ViewModeStudio.Actor.Object
	void SetItem(Object* Item);// 0xffffff90c89e5001

--------------------------------
Class: ViewModeStudio.Actor.Object
	CameraComponent* CameraComponent;//[Offset: 0x2a8, Size: 0x8]
	float ViewSlaveLocationDuration;//[Offset: 0x2b0, Size: 0x4]
	FName CameraSocketName;//[Offset: 0x2b4, Size: 0x8]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2c0, Size: 0x8]
	float MaxViewDistance;//[Offset: 0x2c8, Size: 0x4]
	SceneCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x2d0, Size: 0x8]
	Transform aad64d40a0;//[Offset: 0x2e0, Size: 0x30]
	void SetViewModeAbleActor(Actor* Actor);// 0xffffff90c89e5001
	void SetTextureRenderTarget(TextureRenderTarget2D* NewTextureTarget);// 0xffffff90c89e5001
	void SetCameraSocketName(FName NewCameraSocketName);// 0xffffff90c89e5001
	void AddYaw(float Value);// 0xffffff90c89e5001
	void AddViewSlaveLocation(float Duration);// 0xffffff90c89e5001
	void AddViewDistance(float Value);// 0xffffff90c89e5001
	void AddRoll(float Value);// 0xffffff90c89e5001
	void AddPitch(float Value);// 0xffffff90c89e5001

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	Vector ClipPlaneNormal;//[Offset: 0x358, Size: 0xc]
	float FOVAngle;//[Offset: 0x364, Size: 0x4]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x36c, Size: 0x4]
	Vector ClipPlaneBase;//[Offset: 0x370, Size: 0xc]
	float PostProcessBlendWeight;//[Offset: 0x37c, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x380, Size: 0x8]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 0x550]
	byte ProjectionType;//[Offset: 0x8e0, Size: 0x1]
	byte CompositeMode;//[Offset: 0x8e1, Size: 0x1]
	float OrthoWidth;//[Offset: 0x8e4, Size: 0x4]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e8, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e8, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x8f0, Size: 0x40]
	void CaptureScene();// 0xffffff90c89e5000
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xffffff90c89e5002

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x290, Size: 0x1]
	int CaptureSortPriority;//[Offset: 0x294, Size: 0x4]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	PrimitiveComponent*[] 221471bf4e;//[Offset: 0x2a0, Size: 0x10]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	Actor*[] HiddenActors;//[Offset: 0x2b8, Size: 0x10]
	float MaxViewDistanceOverride;//[Offset: 0x2c8, Size: 0x4]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x320, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x338, Size: 0x10]
	d64f73cdfb[] ShowFlagSettings;//[Offset: 0x348, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0xffffff90c89e5001
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xffffff90c89e5002
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0xffffff90c89e5001
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0xffffff90c89e5001
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xffffff90c89e5002
	void HideComponent(PrimitiveComponent* InComponent);// 0xffffff90c89e5001
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xffffff90c89e5002
	void ClearShowOnlyComponents();// 0xffffff90c89e5000
	void ClearHiddenComponents();// 0xffffff90c89e5000

--------------------------------
Class: d64f73cdfb
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: e491544ab0.Object
	void OnUpdateGameResultState();// 0xffffff90c89e5000

--------------------------------
Class: 5319e5b672
	63f07bee1d Config;//[Offset: 0x0, Size: 0x48]
	XtrmUserWidget* Widget;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: GrenadeTrajectoryLine.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x2a8, Size: 0x8]
	MaterialInterface* 696f0a9fc4;//[Offset: 0x2b0, Size: 0x8]
	SplineMeshComponent*[] 1e0b4851b8;//[Offset: 0x2b8, Size: 0x10]
	Vector2D c036d383fb;//[Offset: 0x2cc, Size: 0x8]
	StaticMesh* 3bc2b0b3af;//[Offset: 0x2d8, Size: 0x8]
	FName ba1b318b4b;//[Offset: 0x2e4, Size: 0x8]
	FName 581711554c;//[Offset: 0x2ec, Size: 0x8]
	StaticMeshComponent* fae1b04639;//[Offset: 0x2f8, Size: 0x8]
	MaterialInstanceDynamic* 7b1370cbee;//[Offset: 0x300, Size: 0x8]

--------------------------------
Class: 5276879caf
	class Actor* ActorClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BlockInputUserWidget.XtrmUserWidget.UserWidget.Widget.Visual.Object
	ed91e67db7[] BlockActionsOnDemand;//[Offset: 0x838, Size: 0x10]
	FName[] BlockAxises;//[Offset: 0x848, Size: 0x10]
	bool bCancelDragDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]
	ed91e67db7[] BlockActions;//[Offset: 0x860, Size: 0x10]
	bool bWhiteList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	FName[] BlockAxisesOnDemand;//[Offset: 0x878, Size: 0x10]
	bool bLockMouseCursorInViewport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	bool bGenerateEventOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 0x1]

--------------------------------
Class: ed91e67db7
	byte KeyEvent;//[Offset: 0x0, Size: 0x1]
	FName ActionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: GameSoundTracker.Object
	<9ee68f3e08,f727540cae> 18c43a332a;//[Offset: 0x88, Size: 0x50]
	<9ee68f3e08,9f4b0f6329> abf050ddba;//[Offset: 0xd8, Size: 0x50]
	<9ee68f3e08,ParachutingSound> WaitingParachutingSoundMap;//[Offset: 0x128, Size: 0x50]
	<9ee68f3e08,97b2ed3905> f8a25c2a12;//[Offset: 0x178, Size: 0x50]
	<9ee68f3e08,a5846f61fc> 4c85313213;//[Offset: 0x1c8, Size: 0x50]
	<9ee68f3e08,7be8c7b4bc> 4e50a51412;//[Offset: 0x218, Size: 0x50]
	<9ee68f3e08,3921bce07c> 0bec5ae095;//[Offset: 0x268, Size: 0x50]
	<enum,float> dfdef525c8;//[Offset: 0x2b8, Size: 0x50]

--------------------------------
Class: 9ee68f3e08
	uint32 e9f2a3faa8;//[Offset: 0x0, Size: 0x4]
	uint32 05b7d61589;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: f727540cae.84eb153ce0

--------------------------------
Class: 84eb153ce0
	float bf5fbd658f;//[Offset: 0x0, Size: 0x4]
	enum 1262713221;//[Offset: 0x4, Size: 0x1]
	float 132192ec08;//[Offset: 0x30, Size: 0x4]
	Vector ToTarget;//[Offset: 0x34, Size: 0xc]
	enum cdca69bae2;//[Offset: 0x40, Size: 0x1]
	float IconOpacity;//[Offset: 0x44, Size: 0x4]
	enum ca8f2307c7;//[Offset: 0x48, Size: 0x1]
	float CheckDistance;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: 9f4b0f6329.84eb153ce0

--------------------------------
Class: ParachutingSound.84eb153ce0

--------------------------------
Class: 97b2ed3905.84eb153ce0
	bool 694c460d8f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: a5846f61fc.84eb153ce0

--------------------------------
Class: 7be8c7b4bc.84eb153ce0

--------------------------------
Class: 3921bce07c
	<byte,float> 02f1285cec;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TslSceneCaptureWorld.Object
	World* World;//[Offset: 0xa0, Size: 0x8]
	void InitWorld(GameInstance* GameInstance, FString SceneCapturePackageName);// 0xffffff90c89e5002
	void DestroyWorld();// 0xffffff90c89e5000

--------------------------------
Class: BP_GrenadeTrajectoryLine_C.GrenadeTrajectoryLine.Actor.Object

--------------------------------
Class: XtrmParticleManager.Actor.Object
	<FName,5c4c5fa5ce> f11c34b7ed;//[Offset: 0x2a8, Size: 0x50]
	<FName,fea986feaf> 94479104d6;//[Offset: 0x2f8, Size: 0x50]
	fea986feaf[] GroupList;//[Offset: 0x398, Size: 0x10]

--------------------------------
Class: 5c4c5fa5ce

--------------------------------
Class: fea986feaf
	float MaxDistance;//[Offset: 0x0, Size: 0x4]
	enum CullTypeAffectedMe;//[Offset: 0x4, Size: 0x1]
	int MaxObjectCount;//[Offset: 0x8, Size: 0x4]
	FName GroupName;//[Offset: 0xc, Size: 0x8]
	enum CullType;//[Offset: 0x14, Size: 0x1]
	int 773f7fb847;//[Offset: 0x18, Size: 0x4]
	int MaxNearbyLocationCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GunImpact_Med_C.XtrmImpactEffect.Actor.Object

--------------------------------
Class: TransportAircraft_Africa_C.TransportAircraft.Pawn.Actor.Object
	ParticleSystemComponent* P_Cloud_Flow;//[Offset: 0x5a0, Size: 0x8]
	StaticMeshComponent* SM_Cloud_Wing1;//[Offset: 0x5a8, Size: 0x8]
	ParticleSystemComponent* Rotors;//[Offset: 0x5b0, Size: 0x8]
	ParticleSystemComponent* P_Cloud_Screen;//[Offset: 0x5b8, Size: 0x8]
	CurveFloat* TestCurve;//[Offset: 0x5c0, Size: 0x8]
	Vector SunDir;//[Offset: 0x5c8, Size: 0xc]
	Rotator Cloud Rotation;//[Offset: 0x5d4, Size: 0xc]
	Rotator Cloud Rotation_02;//[Offset: 0x5e0, Size: 0xc]
	Rotator Cloud Rotation_03;//[Offset: 0x5ec, Size: 0xc]

--------------------------------
Class: XtrmGridCullStaticMeshManager.Actor.Object
	ffde7a6760[] 77cefc7a00;//[Offset: 0x2a8, Size: 0x10]

--------------------------------
Class: ffde7a6760
	<int,6dfbaaefa1> WorldGrid;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: 6dfbaaefa1
	XtrmGridCullStaticMeshComponent*[] Objects;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BP_Lightning_C.XtrmMotorbikeVehicle_Standalone.XtrmMotorbikeVehicle.XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object
	VehicleRadioComponent* VehicleRadio;//[Offset: 0xd68, Size: 0x8]
	VehicleTrunkComponent* VehicleTrunk;//[Offset: 0xd70, Size: 0x8]
	InteractableSeatCollision* InteractableSeatCollision_Passenger;//[Offset: 0xd78, Size: 0x8]
	InteractableSeatCollision* InteractableSeatCollision_Driver;//[Offset: 0xd80, Size: 0x8]

--------------------------------
Class: XtrmMotorbikeVehicle_Standalone.XtrmMotorbikeVehicle.XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object

--------------------------------
Class: XtrmMotorbikeVehicle.XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object
	Vector2D d7ce824e92;//[Offset: 0xb94, Size: 0x8]
	Vector2D e592a1f140;//[Offset: 0xb9c, Size: 0x8]
	XtrmAnchorActor* 2a6b126e68;//[Offset: 0xbe8, Size: 0x8]
	FName 2ef20daaef;//[Offset: 0xc6c, Size: 0x8]
	9f4912a594 6afcb4d712;//[Offset: 0xc88, Size: 0x10]
	Vector2D c7a42b365b;//[Offset: 0xca0, Size: 0x8]
	bool bRunStabilizeOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 0x1]
	bool 8face7fbba;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 0x1]
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0xd30, Size: 0x8]
	float StabilizeInitialTimer;//[Offset: 0xd40, Size: 0x4]
	9f4912a594 94a8fd261d;//[Offset: 0xd54, Size: 0x10]
	void PutBodyToSleep();// 0xffffff90c89e5000
	void ProcessFlipAndStabilize();// 0xffffff90c89e5000
	void OnVehicleEjected();// 0xffffff90c89e5000
	void OnRep_KickstandStabilize();// 0xffffff90c89e5000
	void OnMeshHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5005
	void 108f7c8781(const Quat InQuat, const Vector InLocation);// 0xffffff90c89e5002

--------------------------------
Class: XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object
	AkComponent* EngineSoundComponent;//[Offset: 0x430, Size: 0x8]
	CameraComponent* FirstPersonCameraInVehicle;//[Offset: 0x448, Size: 0x8]
	PhysicalMaterial* 3ac8aaaa7b;//[Offset: 0x478, Size: 0x8]
	VehicleEffectData WingEffectData;//[Offset: 0x480, Size: 0x60]
	class XtrmParticle* Muffler;//[Offset: 0x4e8, Size: 0x40]
	VehicleEffectData LevelUpEffectData;//[Offset: 0x528, Size: 0x60]
	VehicleCommonComponent* CommonComponent;//[Offset: 0x590, Size: 0x8]
	SpringArmInVehicleComponent* FirstPersonSpringArmInVehicle;//[Offset: 0x598, Size: 0x8]
	bool ff9a93220c;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a4, Size: 0x1]
	VehicleEffectData MufflerEffectData;//[Offset: 0x5c8, Size: 0x60]
	VehicleEffectData DriveEffectData;//[Offset: 0x628, Size: 0x60]
	WheeledVehicleBaseMovement ReplicatedBase;//[Offset: 0x688, Size: 0x58]
	VehicleSkinData VehicleSkinData;//[Offset: 0x6e8, Size: 0x30]
	VehicleSoundData OverrideEngineIgniteSound;//[Offset: 0x718, Size: 0x18]
	bool SeatDestroyAfterExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 0x1]
	VehicleSpecialEffectData* VehicleSpecialEffectData;//[Offset: 0x738, Size: 0x8]
	XtrmParticle* 56382c1941;//[Offset: 0x740, Size: 0x8]
	float SteeringYawBias;//[Offset: 0x748, Size: 0x4]
	2102794289* 5a41b854ac;//[Offset: 0x778, Size: 0x8]
	VehicleSyncComponent* SyncComponent;//[Offset: 0x7e8, Size: 0x8]
	bool a6929e32f0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f0, Size: 0x1]
	FName LightMaterialSlotName;//[Offset: 0x7f4, Size: 0x8]
	float MaxClampThrottleInClutch;//[Offset: 0x808, Size: 0x4]
	CurveFloat* 52b1a50f08;//[Offset: 0x810, Size: 0x8]
	50cd5c39ff 0fcdaf6031;//[Offset: 0x818, Size: 0xa8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x8c8, Size: 0x8]
	SpringArmInVehicleComponent* ThirdPersonSpringArmInVehicle;//[Offset: 0x8f0, Size: 0x8]
	float SteeringInputTolerance;//[Offset: 0x8fc, Size: 0x4]
	VehicleExplosionComponent* ExplosionComponent;//[Offset: 0x920, Size: 0x8]
	4ec523ccaf 676ab7aae5;//[Offset: 0x940, Size: 0x28]
	VehicleEffectData BoostEffectData;//[Offset: 0x9a0, Size: 0x60]
	d30b84de44* 4423accd3a;//[Offset: 0xa08, Size: 0x8]
	VehicleEffectData DriftEffectData;//[Offset: 0xa60, Size: 0x60]
	VehicleLightDataAsset* ce44248777;//[Offset: 0xac0, Size: 0x8]
	StaticMeshComponent* VehicleBulletCollision;//[Offset: 0xad8, Size: 0x8]
	FName 0d44bf41a7;//[Offset: 0xae4, Size: 0x8]
	VehicleSeatComponent* SeatComponent;//[Offset: 0xaf0, Size: 0x8]
	WheeledVehicleBaseMovement LastReplicatedBaseMovement;//[Offset: 0xaf8, Size: 0x58]
	float NetUpdateFrequency_VehicleMovement;//[Offset: 0xb54, Size: 0x4]
	PrimitiveComponent* 6a6750d5ee;//[Offset: 0xb58, Size: 0x8]
	CameraComponent* ThirdPersonCameraInVehicle;//[Offset: 0xb68, Size: 0x8]
	VehicleDoorComponent* 9363327d49;//[Offset: 0xb78, Size: 0x8]
	void SetVehicleFuelPercent(const float InPercent);// 0xffffff90c89e5001
	void dcc6f45551(const float InPercent);// 0xffffff90c89e5001
	void 34087faa8d(bool bNewBoosting);// 0xffffff90c89e5001
	void Server_RequestEngineToggle();// 0xffffff90c89e5000
	void OnVehicleSleep(PrimitiveComponent* SleepingComponent, FName BoneName);// 0xffffff90c89e5002
	void OnVehicleMeshWake(PrimitiveComponent* WakingComponent, FName BoneName);// 0xffffff90c89e5002
	void OnRep_WheeledVehicleBaseMovement();// 0xffffff90c89e5000
	void OnRep_VehicleSkinData();// 0xffffff90c89e5000
	void OnRep_VehicleEngine();// 0xffffff90c89e5000
	void dc07a51256(const ae7d2df7ab InSharedParam);// 0xffffff90c89e5001
	void MulticastDrawVehicleDebug(Vector Position, Quat Rot, 47c55f1997 BodyState, Vector CompVelocity, bool bSimulatedPhysic);// 0xffffff90c89e5005
	bool IsBoosting();// 0xffffff90c89e5001

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	XigPtrProperty Mesh;//[Offset: 0x358, Size: 0x20]
	XigPtrProperty VehicleMovement;//[Offset: 0x378, Size: 0x20]

--------------------------------
Class: ae7d2df7ab

--------------------------------
Class: VehicleEffectData
	VehicleMaterialEffectDefaultData[] MaterialInfo;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] ParticlePtr;//[Offset: 0x10, Size: 0x10]
	VehicleParticleEffectInfo ParticleInfo;//[Offset: 0x28, Size: 0x38]

--------------------------------
Class: VehicleMaterialEffectDefaultData
	MaterialInstanceDynamic* Material;//[Offset: 0x0, Size: 0x20]
	float DefaultAlpha;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: VehicleParticleEffectInfo
	SpecialEffectVehicleParticleInfo[] LobbyParticleInfoDataList;//[Offset: 0x0, Size: 0x10]
	CurveFloat* ParticleSizeModiferCurve;//[Offset: 0x10, Size: 0x8]
	FName[] MaterialSlotName;//[Offset: 0x18, Size: 0x10]
	SpecialEffectVehicleParticleInfo[] ParticleInfoDataList;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SpecialEffectVehicleParticleInfo
	Rotator LocalRotation;//[Offset: 0x0, Size: 0xc]
	Vector LocalOffset;//[Offset: 0xc, Size: 0xc]
	FName SlotName;//[Offset: 0x18, Size: 0x8]
	Vector LocalScale;//[Offset: 0x20, Size: 0xc]
	ParticleSystem* Particle;//[Offset: 0x30, Size: 0x40]

--------------------------------
Class: VehicleRadioComponent.XtrmBaseRadioComponent.ActorComponent.Object
	void 961179667d(const bool bIsFront);// 0xffffff90c89e5001

--------------------------------
Class: XtrmBaseRadioComponent.ActorComponent.Object
	int8 7c2ffb0d06;//[Offset: 0x11c, Size: 0x1]
	397241b548* ec8a783bef;//[Offset: 0x120, Size: 0x8]
	bcf039bdc5 e24c643876;//[Offset: 0x128, Size: 0x8]
	bcf039bdc5 3a83129fed;//[Offset: 0x130, Size: 0x8]
	float cd6d3bbd2b;//[Offset: 0x13c, Size: 0x4]
	AkComponent* 2fc2158b67;//[Offset: 0x148, Size: 0x8]
	void aa70870497();// 0xffffff90c89e5000
	void PendingOnRep_ServerPlayTime();// 0xffffff90c89e5000
	void OnRep_ServerPlayTime();// 0xffffff90c89e5000
	void OnRep_RadioChannel();// 0xffffff90c89e5000

--------------------------------
Class: 397241b548.DataAsset.Object
	AkAudioEvent* 439af2a096;//[Offset: 0x70, Size: 0x8]
	6c13506bb3[] 54689607a4;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: 6c13506bb3
	float 230401b0c8;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* f33bd424f8;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InteractableSeatCollision.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MaxInteractableDistance;//[Offset: 0x5a4, Size: 0x4]

--------------------------------
Class: XtrmAnchorActor.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x2a8, Size: 0x8]
	SphereComponent* SphereComp;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	876afcb897 1494984684;//[Offset: 0x2b0, Size: 0x8]
	ConstraintInstance ConstraintInstance;//[Offset: 0x2b8, Size: 0x1c0]
	Actor* eafd2dafd7;//[Offset: 0x478, Size: 0x8]
	876afcb897 b51a64936f;//[Offset: 0x480, Size: 0x8]
	PhysicsConstraintTemplate* 299542a4b8;//[Offset: 0x4a8, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x4b0, Size: 0x10]
	Actor* 2cb6b08b1f;//[Offset: 0x4c0, Size: 0x8]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xffffff90c89e5002
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0xffffff90c89e5001
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0xffffff90c89e5002
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0xffffff90c89e5002
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0xffffff90c89e5002
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0xffffff90c89e5001
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xffffff90c89e5003
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0xffffff90c89e5001
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xffffff90c89e5003
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xffffff90c89e5003
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0xffffff90c89e5002
	void SetDisableCollision(bool bDisableCollision);// 0xffffff90c89e5001
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0xffffff90c89e5002
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0xffffff90c89e5003
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0xffffff90c89e5002
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0xffffff90c89e5004
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0xffffff90c89e5001
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xffffff90c89e5002
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0xffffff90c89e5001
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xffffff90c89e5002
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0xffffff90c89e5002
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0xffffff90c89e5002
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0xffffff90c89e5002
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0xffffff90c89e5001
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xffffff90c89e5002
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xffffff90c89e5003
	void SetAngularDriveMode(byte DriveMode);// 0xffffff90c89e5001
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0xffffff90c89e5002
	bool IsBroken();// 0xffffff90c89e5001
	float GetCurrentTwist();// 0xffffff90c89e5001
	float GetCurrentSwing2();// 0xffffff90c89e5001
	float GetCurrentSwing1();// 0xffffff90c89e5001
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0xffffff90c89e5002
	void BreakConstraint();// 0xffffff90c89e5000

--------------------------------
Class: 876afcb897
	FName ComponentName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: 9f4912a594
	float 6f53d228c0;//[Offset: 0x0, Size: 0x4]
	float 937a97e4a7;//[Offset: 0x4, Size: 0x4]
	float 5141b76824;//[Offset: 0x8, Size: 0x4]
	float 31637ef853;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VehicleCommonComponent.ActorComponent.Object
	9f784fe77b* 0edbed9c0a;//[Offset: 0x120, Size: 0x8]
	XtrmParticle* efdf6ef005;//[Offset: 0x128, Size: 0x8]
	<PhysicalMaterial*,float> 2c26769df8;//[Offset: 0x150, Size: 0x50]
	fb845163cd* e0448eb2b9;//[Offset: 0x1a8, Size: 0x8]
	FName ac417c2dd1;//[Offset: 0x1b0, Size: 0x8]
	FName 0c422142fd;//[Offset: 0x1b8, Size: 0x8]
	FName[] 9d2c3952ce;//[Offset: 0x1c0, Size: 0x10]
	4063052b5c[] 4063052b5c;//[Offset: 0x1d0, Size: 0x10]
	VehicleSkinData ReplicatedSkinData;//[Offset: 0x230, Size: 0x30]
	fb845163cd* OverrideHornDataAsset;//[Offset: 0x270, Size: 0x8]
	Texture2D* 48636acfc9;//[Offset: 0x280, Size: 0x8]
	9ac9d4687b* 9ac9d4687b;//[Offset: 0x290, Size: 0x8]
	961e10c956 961e10c956;//[Offset: 0x298, Size: 0x8]
	float Health;//[Offset: 0x2bc, Size: 0x4]
	bool 8cc4f0975f;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c1, Size: 0x1]
	bool f95a14c7b6;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c1, Size: 0x1]
	class XtrmParticle* 7ed09495e1;//[Offset: 0x2c8, Size: 0x40]
	<class XtrmWeapon_Gun> AlwaysAllowedPenetrationWeapons;//[Offset: 0x310, Size: 0x50]
	fb845163cd* SpecialEffectHornData;//[Offset: 0x368, Size: 0x8]
	<enum,float> eb5ae30cdb;//[Offset: 0x3b8, Size: 0x50]
	66f5057561* 66f5057561;//[Offset: 0x420, Size: 0x8]
	StaticMeshComponent*[] WeaponCollisions;//[Offset: 0x438, Size: 0x10]
	<enum,06e5351200> 029207420d;//[Offset: 0x450, Size: 0x50]
	VehicleSoundData OverrideHornSoundInfo;//[Offset: 0x4a8, Size: 0x18]
	ParticleSystemComponent* SpecialSkinTransFXComp;//[Offset: 0x4c0, Size: 0x8]
	class XtrmParticle* fe95c766af;//[Offset: 0x4c8, Size: 0x40]
	ParticleSystem* SpecialSkinTransFX;//[Offset: 0x508, Size: 0x8]
	3b15666bba* 3b15666bba;//[Offset: 0x510, Size: 0x8]
	float Fuel;//[Offset: 0x520, Size: 0x4]
	45dee49130 00b1a85b7e;//[Offset: 0x528, Size: 0x20]
	Rotator SpecialSkinTransRotator;//[Offset: 0x548, Size: 0xc]
	void ServerSetHorn(961e10c956 InHornPlayInfo);// 0xffffff90c89e5001
	void OnSyncHit(Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5002
	void OnSkinAsyncLoadFinish(const enum InSkinMeshTarget);// 0xffffff90c89e5001
	void OnRep_SkinData();// 0xffffff90c89e5000
	void OnRep_SetHornPlayInfo();// 0xffffff90c89e5000
	void OnRep_Health(float LastHealth);// 0xffffff90c89e5001
	void OnRep_Dying();// 0xffffff90c89e5000
	void OnHornEnd();// 0xffffff90c89e5000
	void OnHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5004
	void OnFinishImpactEffect(ParticleSystemComponent* PSystem);// 0xffffff90c89e5001
	void OnEnableComponentTick(PrimitiveComponent* WakingComponent, FName BoneName);// 0xffffff90c89e5002
	void OnClientHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5004
	void MulticastSetInstantHorn(961e10c956 InHornPlayInfo);// 0xffffff90c89e5001
	void MulticastCharacterHitEffects(XtrmCharacter* CharacterHit, const float HitDamage);// 0xffffff90c89e5002

--------------------------------
Class: 961e10c956
	bool b56ffd0fce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum 828982f1a8;//[Offset: 0x1, Size: 0x1]
	float 91cef1652e;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: 9f784fe77b.DataAsset.Object
	CurveFloat* FuelConsumptionCurve;//[Offset: 0x70, Size: 0x8]
	float EVWayChargingSpeed;//[Offset: 0x78, Size: 0x4]
	bool bIsElectricVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	AkAudioEvent* OutSafetyzoneSound;//[Offset: 0x80, Size: 0x8]
	float BluezoneDischargingInEngineOff;//[Offset: 0x88, Size: 0x4]
	float FuelMax;//[Offset: 0x8c, Size: 0x4]
	float FuelEfficiency;//[Offset: 0x90, Size: 0x4]
	float[] BluezoneDischargingInEngineOn;//[Offset: 0x98, Size: 0x10]
	float FuelDetractionTime;//[Offset: 0xa8, Size: 0x4]
	AkAudioEvent* InSafetyzoneSound;//[Offset: 0xb0, Size: 0x8]
	CurveFloat* FuelConsumptionModifierBoost;//[Offset: 0xb8, Size: 0x8]
	byte ChargingSurfaceType;//[Offset: 0xc0, Size: 0x1]
	float FuelConsumptionModifierIdle;//[Offset: 0xc4, Size: 0x4]
	float EVWayChargingDelay;//[Offset: 0xc8, Size: 0x4]
	float EVWayChargingTickTimer;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: fb845163cd.DataAsset.Object
	2ae045b2be ed017520b1;//[Offset: 0x78, Size: 0x10]
	2ae045b2be cfa714a75a;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: 2ae045b2be
	AkAudioEvent* d7d6bc50ae;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* 7aaa798bac;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: 4063052b5c
	Margin Margin;//[Offset: 0x0, Size: 0x10]
	int WheelIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VehicleSkinData
	int LevelUpEffectOpenLevel;//[Offset: 0x0, Size: 0x4]
	bool bIsLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Color HeadlightColor;//[Offset: 0x8, Size: 0x4]
	int DriftEffectLevel;//[Offset: 0xc, Size: 0x4]
	int HornSoundLevel;//[Offset: 0x10, Size: 0x4]
	int BoostEffectLevel;//[Offset: 0x14, Size: 0x4]
	int WingEffectLevel;//[Offset: 0x18, Size: 0x4]
	int TextureVaryIndex;//[Offset: 0x1c, Size: 0x4]
	int UpdateLevel;//[Offset: 0x20, Size: 0x4]
	int MufflerEffectLevel;//[Offset: 0x24, Size: 0x4]
	int DriveEffectLevel;//[Offset: 0x28, Size: 0x4]
	SkinID SkinID;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: 9ac9d4687b.DataAsset.Object
	FloatRange 401889b4d5;//[Offset: 0x74, Size: 0x10]
	PhysicalMaterial* f996d6cc09;//[Offset: 0x88, Size: 0x8]
	class XtrmParticle* cdd9456321;//[Offset: 0x90, Size: 0x40]
	class DamageType* d7e805cd21;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: 66f5057561.DataAsset.Object
	CurveFloat* 5494f2f50d;//[Offset: 0x70, Size: 0x8]
	AkAudioEvent* bf3de8d86b;//[Offset: 0x80, Size: 0x8]
	CurveFloat* 2228ff364d;//[Offset: 0x88, Size: 0x8]
	class DamageType* e3419ca4ca;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: 06e5351200
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	Object* 6a33a90b48;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: VehicleSoundData
	AkAudioEvent* LobbyEquippedSound;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* SessionLocalSound;//[Offset: 0x8, Size: 0x8]
	AkAudioEvent* SessionRemoteSound;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: 3b15666bba.DataAsset.Object
	AkAudioEvent* b7f477159e;//[Offset: 0x78, Size: 0x8]
	class Actor[] a5558b56ae;//[Offset: 0x88, Size: 0x10]
	Vector2D 3f74aedb36;//[Offset: 0x9c, Size: 0x8]
	Vector2D 6e8dce3e44;//[Offset: 0xa4, Size: 0x8]
	CurveFloat* aa0c3e80b2;//[Offset: 0xb0, Size: 0x8]
	CurveFloat* a1ee55f7cf;//[Offset: 0xc0, Size: 0x8]
	class DamageType* e3419ca4ca;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: SpringArmInVehicleComponent.SpringArmComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WheeledVehicleBaseMovement
	bool HasServerBaseComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector RelativePos;//[Offset: 0x4, Size: 0xc]
	RepMovement RepMovement;//[Offset: 0x10, Size: 0x34]
	Rotator RelativeRot;//[Offset: 0x44, Size: 0xc]
	PrimitiveComponent* BaseComp;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: VehicleSpecialEffectData.CommonSpecialEffectData.DataAsset.Object
	enum VehicleSkinSlotType;//[Offset: 0x70, Size: 0x1]
	VehicleUpgradeEffectInfo UpgradeEffectInfo;//[Offset: 0x78, Size: 0x68]
	VehicleBonusEffectInfo BonusEffectInfo;//[Offset: 0xe0, Size: 0x60]
	SoftObjectPath BaseVehicleActor;//[Offset: 0x150, Size: 0x18]

--------------------------------
Class: VehicleUpgradeEffectInfo
	Color HeadlightColor;//[Offset: 0x0, Size: 0x4]
	fb845163cd*[] HornSoundInfo;//[Offset: 0x8, Size: 0x10]
	VehicleParticleEffectInfo[] BoostEffectInfo;//[Offset: 0x18, Size: 0x10]
	VehicleParticleEffectInfo[] MufflerEffectInfo;//[Offset: 0x28, Size: 0x10]
	VehicleParticleEffectInfo[] WingEffectInfo;//[Offset: 0x38, Size: 0x10]
	VehicleParticleEffectInfo[] DriveEffectInfo;//[Offset: 0x48, Size: 0x10]
	VehicleParticleEffectInfo[] DriftEffectInfo;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: VehicleBonusEffectInfo
	VehicleParticleEffectInfo LevelUpEffectInfo;//[Offset: 0x0, Size: 0x38]
	VehicleTextureSkinInfo[] ColorVariationInfo;//[Offset: 0x38, Size: 0x10]
	VehicleSoundData EngineIgniteSound;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: VehicleTextureSkinInfo
	FString CategoryId;//[Offset: 0x0, Size: 0x10]
	Color IconColor;//[Offset: 0x10, Size: 0x4]
	MaterialInterface* DestroyMaterial;//[Offset: 0x18, Size: 0x40]
	MaterialInterface* DestroyInsideMaterial;//[Offset: 0x58, Size: 0x40]
	<enum,cae8dd11ce> VehicleSkinMesh;//[Offset: 0x98, Size: 0x50]

--------------------------------
Class: 2102794289.DataAsset.Object
	enum InterpolationCurve;//[Offset: 0x7c, Size: 0x1]
	f773e87c74* a8b0c3ff71;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: f773e87c74.DataAsset.Object
	<byte,2f0ebd4107*> 70aba6d420;//[Offset: 0x70, Size: 0x50]

--------------------------------
Class: 2f0ebd4107.DataAsset.Object
	AkAudioEvent* RollSound;//[Offset: 0x70, Size: 0x8]
	AkAudioEvent* SpinSound;//[Offset: 0x78, Size: 0x8]
	AkAudioEvent* SkidSound;//[Offset: 0x80, Size: 0x8]
	AkAudioEvent* BrakeSound;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: VehicleSyncComponent.ActorComponent.Object
	PrimitiveComponent* LastClientMovementBase;//[Offset: 0x128, Size: 0x8]
	487638264f* 487638264f;//[Offset: 0x130, Size: 0x8]
	delegate OnSyncHit;//[Offset: 0x168, Size: 0x10]
	bool 1661c0a59d;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	void ServerMoveUnreliably_MovementBase(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, PrimitiveComponent* ClientMovementBase, Vector_NetQuantize100 ClientRelativeLocation, Vector_NetQuantizeNormal ClientRelativeRotation, uint32 InPhysCallerCheckValue);// 0xffffff90c89e5009
	void ServerMoveUnreliably(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, float ClientTimeStamp, uint32 CheckValue);// 0xffffff90c89e5007
	void ServerMoveReliably_MovementBase(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, PrimitiveComponent* ClientMovementBase, Vector_NetQuantize100 ClientRelativeLocation, Vector_NetQuantizeNormal ClientRelativeRotation, uint32 InPhysCallerCheckValue);// 0xffffff90c89e5009
	void ServerMoveReliably(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, uint32 CheckValue);// 0xffffff90c89e5006
	void ServerHitUnreliably_MovementBase(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, Vector_NetQuantize100 NormalImpulse, HitResult Hit, PrimitiveComponent* ClientMovementBase, Vector_NetQuantize100 ClientRelativeLocation, Vector_NetQuantizeNormal ClientRelativeRotation, uint32 InPhysCallerCheckValue);// 0xffffff90c89e500b
	void ServerHitUnreliably(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, Vector_NetQuantize100 NormalImpulse, HitResult Hit, uint32 InPhysCheckValue);// 0xffffff90c89e5008
	void ServerHitReliably_MovementBase(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, Vector_NetQuantize100 NormalImpulse, HitResult Hit, PrimitiveComponent* ClientMovementBase, Vector_NetQuantize100 ClientRelativeLocation, Vector_NetQuantizeNormal ClientRelativeRotation, uint32 InPhysCallerCheckValue);// 0xffffff90c89e500b
	void ServerHitReliably(int InCorrectionId, Vector_NetQuantize100 ClientLocation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantizeNormal ClientRotator, Vector_NetQuantize100 ClientAngularVelocity, Vector_NetQuantize100 NormalImpulse, HitResult Hit, uint32 InPhysCheckValue);// 0xffffff90c89e5008
	void ServerForceCorrectionRespond(bool bServerCorrection);// 0xffffff90c89e5001
	void OnTimerSweepToFloor();// 0xffffff90c89e5000
	void OnRep_ServerCorrection(bool bPrevServerCorrection);// 0xffffff90c89e5001
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5004
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xffffff90c89e5004
	void OnDriverRide();// 0xffffff90c89e5000
	void OnDriverLeave();// 0xffffff90c89e5000
	void ClientOthervehicleMoveUnreliably(VehicleSyncComponent* TargetSyncComponent, Vector_NetQuantize100 ServerLocation, Vector_NetQuantize100 ServerLinearVelocity, Vector_NetQuantizeNormal ServerRotator, Vector_NetQuantize100 ServerAngularVelocity);// 0xffffff90c89e5005
	void ClientOthervehicleMoveReliably(VehicleSyncComponent* TargetSyncComponent, Vector_NetQuantize100 ServerLocation, Vector_NetQuantize100 ServerLinearVelocity, Vector_NetQuantizeNormal ServerRotator, Vector_NetQuantize100 ServerAngularVelocity);// 0xffffff90c89e5005
	void ClientMoveUnreliably(Vector_NetQuantize100 ServerLocation, Vector_NetQuantize100 ServerLinearVelocity, Vector_NetQuantizeNormal ServerRotator, Vector_NetQuantize100 ServerAngularVelocity);// 0xffffff90c89e5004
	void ClientMoveReliably(int InCorrectionId, Vector_NetQuantize100 ServerLocation, Vector_NetQuantize100 ServerLinearVelocity, Vector_NetQuantizeNormal ServerRotator, Vector_NetQuantize100 ServerAngularVelocity);// 0xffffff90c89e5005
	void b65224ba87(const Vector InStart, const Vector InEnd, float InDistance);// 0xffffff90c89e5003

--------------------------------
Class: 487638264f.DataAsset.Object

--------------------------------
Class: 50cd5c39ff
	<enum,fbc2a3efc3> 40585d0a45;//[Offset: 0x0, Size: 0x50]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	<int,float> 5902283ecf;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: fbc2a3efc3.fa72ce9067
	<int,enum> 80681e878a;//[Offset: 0xb0, Size: 0x50]
	float 131167bb3f;//[Offset: 0x100, Size: 0x4]
	float 915e4415da;//[Offset: 0x108, Size: 0x4]
	<int,float> e21907b690;//[Offset: 0x110, Size: 0x50]

--------------------------------
Class: VehicleExplosionComponent.RadialForceComponent.SceneComponent.ActorComponent.Object
	6192018085* 3fd096f387;//[Offset: 0x2d8, Size: 0x8]
	2ea76c41af 0fcdaf6031;//[Offset: 0x2e0, Size: 0x58]
	int[] 7edbb467d2;//[Offset: 0x338, Size: 0x10]
	int[] DestroyVehicleInsideMaterialIndices;//[Offset: 0x388, Size: 0x10]
	MaterialInterface* 3ada70e530;//[Offset: 0x398, Size: 0x40]
	MaterialInterface* DestroyVehicleInsideMaterialClass;//[Offset: 0x418, Size: 0x40]
	XtrmParticle* e622c87635;//[Offset: 0x458, Size: 0x8]

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float ImpulseStrength;//[Offset: 0x290, Size: 0x4]
	float Radius;//[Offset: 0x294, Size: 0x4]
	byte[] ObjectTypesToAffect;//[Offset: 0x298, Size: 0x10]
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	float DestructibleDamage;//[Offset: 0x2ac, Size: 0x4]
	float ForceStrength;//[Offset: 0x2b0, Size: 0x4]
	byte Falloff;//[Offset: 0x2b4, Size: 0x1]
	void RemoveObjectTypeToAffect(byte ObjectType);// 0xffffff90c89e5001
	void FireImpulse();// 0xffffff90c89e5000
	void AddObjectTypeToAffect(byte ObjectType);// 0xffffff90c89e5001

--------------------------------
Class: 6192018085.DataAsset.Object
	class XtrmParticle* 194284a323;//[Offset: 0x88, Size: 0x40]
	class 54a318b1a5* bf57fb6ab5;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: 2ea76c41af
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	<enum,781ad688f0> 40585d0a45;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: 781ad688f0.fa72ce9067

--------------------------------
Class: 4ec523ccaf
	enum ServerState;//[Offset: 0x4, Size: 0x1]
	float 34ac4121aa;//[Offset: 0x10, Size: 0x4]
	float StartTime;//[Offset: 0x14, Size: 0x4]
	float 1be7930808;//[Offset: 0x18, Size: 0x4]
	float ab61c67307;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: d30b84de44.DataAsset.Object
	AkAudioEvent* 8a1474d0aa;//[Offset: 0x78, Size: 0x8]
	AkAudioEvent* f6b4532248;//[Offset: 0x80, Size: 0x8]
	AkAudioEvent* 3cfb5a24bd;//[Offset: 0x88, Size: 0x8]
	AkAudioEvent* fd62725549;//[Offset: 0x90, Size: 0x8]
	CurveFloat* 95c6ad1507;//[Offset: 0xa0, Size: 0x8]
	AkAudioEvent* 2097e1cc5c;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: VehicleLightDataAsset.DataAsset.Object
	FName 47781c9e59;//[Offset: 0x70, Size: 0x8]
	FName e9fd61309d;//[Offset: 0x78, Size: 0x8]
	CurveFloat* d01ffb14e8;//[Offset: 0x80, Size: 0x8]
	CurveFloat* 5232743d36;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: VehicleDoorComponent.ActorComponent.Object
	1165bde75b* OverrideVehicleDoorDataAsset;//[Offset: 0x120, Size: 0x8]
	VehicleDoorDirectingDataAsset* VehicleDoorDirectingDataAsset;//[Offset: 0x128, Size: 0x8]
	1165bde75b* 1165bde75b;//[Offset: 0x138, Size: 0x8]
	6ce9133da5[] 47bf52fc11;//[Offset: 0x140, Size: 0x10]
	class Actor[] aed4d07fa2;//[Offset: 0x160, Size: 0x10]
	void 2562b0ff43(const FName DoorName, const enum InDoorState, const float InVelocity);// 0xffffff90c89e5003
	void 65b569debe(const FName DoorName);// 0xffffff90c89e5001

--------------------------------
Class: 1165bde75b.DataAsset.Object
	AkAudioEvent* 6b690df954;//[Offset: 0x78, Size: 0x8]
	<enum,Transform> DoorOriginTransformMap;//[Offset: 0x80, Size: 0x50]
	<enum,FName> 82a1f0e932;//[Offset: 0xd0, Size: 0x50]
	AkAudioEvent* fd452cec38;//[Offset: 0x130, Size: 0x8]
	AkAudioEvent* 745e3f3cf1;//[Offset: 0x140, Size: 0x8]
	AkAudioEvent* c46fcc4fbd;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: VehicleDoorDirectingDataAsset.DataAsset.Object

--------------------------------
Class: 6ce9133da5
	enum ac407542cb;//[Offset: 0x20, Size: 0x1]
	enum 7b09f22c47;//[Offset: 0x28, Size: 0x1]
	float Health;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: DroppedItem_Gun.DroppedItem.Actor.Object
	b9287015ff[] f1dd1d95af;//[Offset: 0x310, Size: 0x10]
	103f37913b 7df712b49e;//[Offset: 0x324, Size: 0x8]

--------------------------------
Class: b9287015ff
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	int AttachmentID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DroppedItem_Equipment.DroppedItem.Actor.Object
	float 2f8df2d9d0;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: BP_Gun_AR_AKM_C.XtrmWeapon_Gun.XtrmWeapon.Actor.Object

--------------------------------
Class: BP_Gun_DMR_M110A1_C.XtrmWeapon_Gun.XtrmWeapon.Actor.Object

--------------------------------
